# Makefile generated by imake - do not edit!
# $Xorg: imake.c,v 1.6 2001/02/09 02:03:15 xorgcvs Exp $

#
#
#

# ====================================================================
#
#  Included macros and rules from <Imake.cf> and <Imake.rules>
#
# ====================================================================

PWD        = /home/daiep/git_repos/epi2_qti_grant/sim_linux
TOP        = /ESE_RX27.0_R02
OS_NAME    = Linux
OS_RELEASE = 2_6_32__696_16_1_el6_x86_64

SHELL = /bin/sh

BASENAME = /bin/basename
CAT      = /bin/cat
CHMOD    = /bin/chmod
CP       = /bin/cp
CUT      = /usr/bin/cut
DD       = /bin/dd
GREP     = /bin/grep
MV       = /bin/mv
RM       = /bin/rm -f
SED      = /bin/sed
SORT     = /bin/sort
TAIL     = /usr/bin/tail
TAR      = /bin/tar
TOUCH    = /bin/touch

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Common targets found in all makefiles
#
# ====================================================================

# --------------------------------------------------------------------
#
#  Rule: "CommonTargets()"
#

all:: hw sim

clean::

hw::

hw-ice::

hw-mgd::

install::

sim::

test::

# --------------------------------------------------------------------

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Beginning of included template file: "GCC_SIM_LINUX.tmpl"
#
# ====================================================================

#
# These are parameter definitions common to all users who use the
#    GCC compiler set.
#

AR    = $(GE_SIM_CCTOP)/bin/ar
CC    = $(GE_SIM_CCTOP)/bin/gcc
CPP   = $(GE_SIM_CCTOP)/bin/cpp
CXX   = $(GE_SIM_CCTOP)/bin/g++
STRIP = $(GE_SIM_CCTOP)/bin/strip

STD_COMPILE_FLAGS =     -m32     $(ENV_GCC_SIM_CPPFLAGS)     $(HW_OPTIONS)     -g     -Wall     $(WARNING_ERROR_FLAG)     -D_GE_SIMLINUX_BUILD

DEFAULT_CFLAGS =     $(STD_COMPILE_FLAGS)

DEFAULT_CXXFLAGS =     $(STD_COMPILE_FLAGS)

DEFAULT_OBJCPPFLAGS =     -Wall     -U__GNUC__     -Dconst=     -DUSE_STDARG     -DALLC

DEFAULT_SO_CFLAGS =     -fpic

DEFAULT_SO_CXXFLAGS =     -fpic

DEFAULT_LDFLAGS1 =     -m32     $(ENV_GCC_SIM_LDFLAGS)     $(HW_OPTIONS)

DEFAULT_LDFLAGS2 =

DEFAULT_ARFLAGS    = cr

DEFAULT_CXXARFLAGS = -ar -WR,-v -o

HW32_OPTIONS =     -m32

HW64_OPTIONS =     -m64

# Global compiler flag concering warnings.  By default we don't treat
# warnings as errors.  Add -Werror to cause build errors on warnings.

WARNING_ERROR_FLAG =

#
# End common GCC parameter definitions.
#

# --------------------------------------------------------------------
#
#  Rule: "SuffixRules()"
#

.SUFFIXES:
.SUFFIXES: .c .cc .cpp .m .mi .o

SUFFIX_CFLAGS = $(SO_CFLAGS) $(CFLAGS1) $(DEFAULT_CFLAGS) $(CFLAGS2)

SUFFIX_CXXFLAGS = $(SO_CXXFLAGS) $(CXXFLAGS1) $(DEFAULT_CXXFLAGS) \
	$(CXXFLAGS2)

SUFFIX_FFLAGS = $(FFLAGS1) $(DEFAULT_FFLAGS) $(FFLAGS2)

SUFFIX_OBJCPPFLAGS = $(CPPFLAGS1) $(DEFAULT_OBJCPPFLAGS) $(CPPFLAGS2)

.c.o:
	$(RM) ${@F}
	 $(CC) -c -o ${@F} $< $(SUFFIX_CFLAGS) \
		-UIMAKE_SIMLINUX_SUFFIXRULES

.cc.o:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(SUFFIX_CXXFLAGS) \
		-UIMAKE_SIMLINUX_SUFFIXRULES

.cpp.o:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(SUFFIX_CXXFLAGS) \
		-UIMAKE_SIMLINUX_SUFFIXRULES

.m.mi:
	$(RM) ${@F}
	$(CPP) -o ${@F} $< $(SUFFIX_OBJCPPFLAGS) \
		-UIMAKE_SIMLINUX_SUFFIXRULES

clean::
	-$(RM) *.mi *.o

# --------------------------------------------------------------------

# ====================================================================
#
#  End of included template file: "GCC_SIM_LINUX.tmpl"
#
# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Local Imakefile begins here
#
# ====================================================================

TOOLSET = SIM_LINUX

MAKE_TARGET = programs

PSD = epi2

ADD_INLINE_FILES =

ADD_EFILES =

ADD_CFILES_HOST = calcdelta.cpp calcbval.cpp pgen_calcbval.cpp getminesp.cpp

ADD_CFILES_TGT =

ADD_EFLAGS = -z -+

ADD_E_INCLUDES =

ADD_CFLAGS_HH =

ADD_CFLAGS_HS =

ADD_CFLAGS_TH =

ADD_CFLAGS_TS =

ADD_LINKFLAGS_HH =

ADD_LINKFLAGS_HS =

ADD_LINKFLAGS_TH =

ADD_LINKFLAGS_TS =

ADD_LIBS_HH =

ADD_LIBS_HS =

ADD_LIBS_TH =

ADD_LIBS_TS =

# --------------------------------------------------------------------
#
#  Rule: "UsePgenOnHost()"
#
#
#  This rule is empty for the GCC compiler set.  It is only used
#  by the Epic preprocessor.
#
# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "PsdParameters()"
#
#

VPATH = ..

#
#  Rule: "PsdSuffixRules()"
#

.SUFFIXES: .cpp .c .o-hs .o-ts

CFLAGS_HS  = $(CFLAGS1_HS) $(DEFAULT_CFLAGS) $(CFLAGS2_HS)
CFLAGS_TS  = $(CFLAGS1_TS) $(DEFAULT_CFLAGS) $(CFLAGS2_TS)

.c.o-hs:
	$(RM) ${@F}
	 $(CC) -c -o ${@F} $< $(CFLAGS_HS) \
		-UIMAKE_SIMLINUX_PSDSUFFIXRULES

.c.o-ts:
	$(RM) ${@F}
	 $(CC) -c -o ${@F} $< $(CFLAGS_TS) \
		-UIMAKE_SIMLINUX_PSDSUFFIXRULES

CXXFLAGS_HS  = $(CXXFLAGS1_HS) $(DEFAULT_CXXFLAGS) $(CXXFLAGS2_HS)
CXXFLAGS_TS  = $(CXXFLAGS1_TS) $(DEFAULT_CXXFLAGS) $(CXXFLAGS2_TS)

.cpp.o-hs:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(CXXFLAGS_HS) \
		-UIMAKE_PSDCPPSUFFIXRULES

.cpp.o-ts:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(CXXFLAGS_TS) \
		-UIMAKE_PSDCPPSUFFIXRULES

clean::
	-$(RM) *.o-hs *.o-ts

#
#  Rule: "StandardPsdParameters()"
#

hw-mgd:: hw

hw-ice:: hw

PSD_INCLUDES = \
	       -I.. \
	       -I$(TOP)/psd/include \
	       -I$(TOP)/psd/include/private \
	       -I$(TOP)/psd/include/private/support \
	       -I$(TOP)/psd/psdsource \
	       -I$(TOP)/lx/em/include \
	       -I$(TOP)/lx/include \
	       -I$(TOP)/host/foundation-libs/CnvEndianLib/sim_linux \
	       -I$(TOP)/host/include \
	       -I$(TOP)/mgd/include \
	       -I$(TOP)/vre/support

# Locking flag to modify CVs.
# Use -DMCVALL to allow all CVs to be modified.
M_CVS =

PSD_FLAGS = \
	    $(M_CVS) \
	    $(EPLUS_CFLAGS)

HOST_FLAGS = \
	     -DHOST_TGT \
	     -DMGD_IF

SIM_FLAGS = \
	    -DERMES_DEBUG \
	    -DSIM \
	    -DSIM_IO

CFLAGS1_HS = \
	     $(ADD_CFLAGS_HS) \
	     $(PSD_INCLUDES)

CFLAGS2_HS = \
	     $(PSD_FLAGS) \
	     $(HOST_FLAGS) \
	     $(SIM_FLAGS) \
	     -Wfloat-equal \
         -mfpmath=sse -msse2

CFLAGS1_TS = \
	     $(ADD_CFLAGS_TS) \
	     $(PSD_INCLUDES)

CFLAGS2_TS = \
	     $(PSD_FLAGS) \
	     $(SIM_FLAGS) \
	     -DMGD_TGT \
	     -DMGD \
	     -DIPG \
	     -DIPGHWTGT

CXXFLAGS1_HS = \
	       $(CFLAGS1_HS)

CXXFLAGS2_HS = \
	       $(CFLAGS2_HS)

CXXFLAGS1_TS = \
	       $(CFLAGS1_TS)

CXXFLAGS2_TS = \
	       $(CFLAGS2_TS)

PSD_LDFLAGS = \
	      -L.. \
	      -L$(TOP)/psd/lib \
	      -L$(TOP)/mgd/lib/sim_linux

HOST_LINKDIRS = \
		-L$(TOP)/lx/lib/sim_linux \
		-L$(TOP)/host/lib/sim_linux

RECON_LINKDIRS    = \
                    -L$(BLITZ_ROOT)/lib

ENDIAN_LDFLAGS = \
		 -lCnvEndianBase_sim

HOST_EXTERN_LIBS = \
		   -lop_keyPortableC_sim \
		   -lgemshid_sim

LDFLAGS1_HS = \
	      $(ADD_LINKFLAGS_HS) \
	      $(PSD_LDFLAGS) \
	      $(HOST_LINKDIRS) \
	      $(RECON_LINKDIRS)

# Duplicated entries are necessary to preserve correct linking

LDFLAGS2_HS = \
	      $(EPLUS_LDFLAGS2) \
	      $(ADD_LIBS_HS) \
	      $(EPLUS_FEATURES_LIB_HS) \
	      $(DBDT_LIB_HS) \
	      -lpgen_on_host_hs \
	      -L$(TOP)/host/lib/sim_linux     -lBurstMode_sim \
	      -lPURE_hs \
	      -lpsdsupport_ts \
	      -lpsdcrucial_ts \
	      -lpulsegen_hs \
	      -lpsdsupport_ts \
	      -lre_support_hs \
	      -lwavegensim_sim \
	      -lrspsim_sim \
	      -lrspsim_common_sim \
	      -lSeqCfg \
	      -lpsdipgsim_stubs_hs \
	      -lepic_main_hs \
	      -lepic_rt_hs \
	      -L$(TOP)/mxutil/rxccfg/gemriutil/rxccfg/sim_linux_no_ace     -lrxccfg \
	      -lpsdsupport_hs \
	      -L$(TOP)/mxutil/rxccfg/gemriutil/rxccfg/sim_linux_no_ace     -lrxccfg \
	      -lpsdopt_hs \
	      -lpsdcrucial_hs \
	      -lposlib_hs \
	      -lrfextfile_sim \
	      -L$(FFTW_HOME)/lib     -lfftw3f \
	      -lpsdutil_hs \
	      $(HOST_EXTERN_LIBS) \
	      $(ENDIAN_LDFLAGS) \
	      -lepic_cm_hs \
	      -lre_support_hs\
	      -L$(TOP)/host/lib/sim_linux     -lCrcClassC_sim \
	      -L$(TOP)/host/lib/sim_linux     -ltime_profiler_client_sim \
	      -L$(TOP)/host/lib/sim_linux     -llog_trace_service_client_sim \
	      -L$(TOP)/host/lib/sim_linux     -luds_com_sim \
	      -L$(TOP)/host/lib/sim_linux     -lhash_table_c_sim \
	      -L$(TOP)/psd/lib     -lposlib_hs     -L$(TOP)/host/lib/sim_linux     -llog_trace_service_client_sim     -L$(TOP)/host/lib/sim_linux     -luds_com_sim     -L$(TOP)/host/lib/sim_linux     -lhash_table_c_sim     -L$(TOP)/recon/Hdf5/sim_linux32     -lGEHdf5     -L$(TOP)/recon/System/sim_linux32     -lSystem     $(BOOST_ROOT)/lib/libboost_date_time.a     $(BOOST_ROOT)/lib/libboost_program_options.a     $(BOOST_ROOT)/lib/libboost_filesystem.a     $(BOOST_ROOT)/lib/libboost_serialization.a     $(BOOST_ROOT)/lib/libboost_thread.a     $(BOOST_ROOT)/lib/libboost_system.a     $(BLITZ_ROOT)/lib/libblitz.a     -L$(HDF5_ROOT)/lib     -lh5tools     -lhdf5_cpp     -lhdf5     -ldl     -pthread \
	      -lm

LDFLAGS1_TS = \
	      $(ADD_LINKFLAGS_TS) \
	      $(PSD_LDFLAGS) \
	      -u MGD_SSP_parse_W

LDFLAGS2_TS = \
	      $(ADD_LIBS_TS) \
	      $(EPLUS_FEATURES_LIB_TS) \
	      -lpsdipgsim_main_ts \
	      -lpsdipgsim_ts \
	      -lpulsegen_ts \
	      -lepic_rt_ts \
	      -lwavegensim_sim \
	      -lrspsim_sim \
	      -lrspsim_common_sim \
	      -lSeqCfg \
	      -lpsdplotpulse_sim \
	      -lpsdplotpulse_ts \
	      -lpsdsupport_ts \
	      -lpsdcrucial_ts \
	      -lpsdutil_ts \
	      -lpsdipcnet_sim \
	      -L$(TOP)/host/lib/sim_linux     -lCrcClassC_sim \
	      -L$(TOP)/host/lib/sim_linux     -llog_trace_service_client_sim \
	      -L$(TOP)/host/lib/sim_linux     -luds_com_sim \
	      -L$(TOP)/host/lib/sim_linux     -lhash_table_c_sim \
	      -lm \
	      -lrspdummy_sim

# --------------------------------------------------------------------
#
#  Rule: "Generate32BitCode()"
#

HW_OPTIONS = \
    $(HW32_OPTIONS)

ACE_ROOT        = $(ACE_32_ROOT)
BLITZ_ROOT      = $(BLITZ_32_ROOT)
BOOST_ROOT      = $(BOOST_32_ROOT)
FFTW_HOME       = $(FFTW_32_HOME)
HDF5_ROOT       = $(HDF5_32_ROOT)
MPI_HOME        = $(MPI_32_HOME)
OBJCC_ROOT      = $(OBJCC_32_ROOT)
POSTGRESQL_ROOT = $(POSTGRESQL_32_ROOT)
TAO_ROOT        = $(TAO_32_ROOT)
XERCES_CPP_ROOT = $(XERCES_CPP_32_ROOT)

# --------------------------------------------------------------------

# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "NoWarnings()"
#
#  This flag causes warnings to be treated as build errors.
#

WARNING_ERROR_FLAG = -Werror

# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "BuildingEpicPsd()"
#
#

HS_C_OBJS = $(PSD).host.o-hs $(ADD_CFILES_HOST:.c=.o-hs)

HS_OBJS = $(HS_C_OBJS:.cpp=.o-hs)

TS_C_OBJS = $(PSD).tgt.o-ts $(ADD_CFILES_TGT:.c=.o-ts)

TS_OBJS = $(TS_C_OBJS:.cpp=.o-ts)

#
#  Rule: "PsdLink()"
#

HS_EXE = $(PSD).host
TS_EXE = $(PSD).tgt

sim $(MAKE_TARGET):: $(HS_EXE) $(TS_EXE)

# --------------------------------------------------------------------
#
#  Rule: "LinkUsingCxx(LINKOBJ,OBJS,LDFLAGS1,LDFLAGS2)"
#
#
#  LINKOBJ: The name of the resultant object file for this rule.
#       It is created by linking together the files given by
#       OBJS (see next definition).
#
#  OBJS: A list of object files which are to be linked together.
#
#  LDFLAGS1: A list of flags to be passed to $(CXX).  These flags
#       are placed before any standard flags which may be defined.
#
#  LDFLAGS2: A list of flags to be passed to $(CXX).  These flags
#       are placed after any standard flags which may be defined.
#

all $(MAKE_TARGET):: $(HS_EXE)

$(HS_EXE): $(HS_OBJS)
	$(RM) $@
	$(CXX) -o $@ $(LDFLAGS1_HS) $(DEFAULT_LDFLAGS1) $? \
		$(DEFAULT_LDFLAGS2) $(LDFLAGS2_HS) -UIMAKE_SIMLINUX_LINKUSINGCXX

clean::
	$(RM) $(HS_EXE)

# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "LinkUsingCxx(LINKOBJ,OBJS,LDFLAGS1,LDFLAGS2)"
#
#
#  LINKOBJ: The name of the resultant object file for this rule.
#       It is created by linking together the files given by
#       OBJS (see next definition).
#
#  OBJS: A list of object files which are to be linked together.
#
#  LDFLAGS1: A list of flags to be passed to $(CXX).  These flags
#       are placed before any standard flags which may be defined.
#
#  LDFLAGS2: A list of flags to be passed to $(CXX).  These flags
#       are placed after any standard flags which may be defined.
#

all $(MAKE_TARGET):: $(TS_EXE)

$(TS_EXE): $(TS_OBJS)
	$(RM) $@
	$(CXX) -o $@ $(LDFLAGS1_TS) $(DEFAULT_LDFLAGS1) $? \
		$(DEFAULT_LDFLAGS2) $(LDFLAGS2_TS) -UIMAKE_SIMLINUX_LINKUSINGCXX

clean::
	$(RM) $(TS_EXE)

# --------------------------------------------------------------------

# --------------------------------------------------------------------

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  This dependency line is found in all makefiles.  $(MAKE_TARGET)
#     should be defined in the local Imakefile.
#
# ====================================================================

all $(MAKE_TARGET):: $(ALL_OBJS)

# ====================================================================

