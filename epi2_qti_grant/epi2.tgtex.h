/*
 *  epi2.tgtex.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Jul 22 2018
 *  Time : 03:23:38
 */

#ifndef h_epi2_tgtex_h
#define h_epi2_tgtex_h


/*
 *  ipgexport
 *  variables serialized from the host to the target compilation objects
 */

RSP_INFO rsp_info[DATA_ACQ_MAX] = { {0,0,0,0} };
/* changed following 2 parameters from short to int. YH */
long rsprot[TRIG_ROT_MAX][9]= {{0}};    /* rotation matrix for this slice */
long rsptrigger[TRIG_ROT_MAX]= {0};   /* trigger type */

long ipg_alloc_instr[PSD_MAX_PROCESSORS] = {
PSD_GRADX_INSTR_SIZE,
PSD_GRADY_INSTR_SIZE,
PSD_GRADZ_INSTR_SIZE,
PSD_RHO1_INSTR_SIZE,
PSD_RHO2_INSTR_SIZE,
PSD_THETA_INSTR_SIZE,
PSD_OMEGA_INSTR_SIZE,
PSD_SSP_INSTR_SIZE,
PSD_AUX_INSTR_SIZE};


RSP_INFO asrsp_info[3] = { {0,0,0,0} };   /* transmit, receive locations for autoshim */
/* changed from short to in.  YH */
long sat_rot_matrices[SAT_ROT_MAX][9]= {{0}}; /* rotation matrices for sp sat */
int  sat_rot_ex_indices[7]= {0};   /* indices of rotation matrices for explicit sp sat */

/* following parameters are new for 55 */ /* added  YH 10/14/94 */
/* physical gradient characteristics */
/* MRIhc08159: Initializations added */
PHYS_GRAD phygrd = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
/* logical gradient characteristics */
LOG_GRAD  loggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
/* logical gradient chars. for graphic sat */
LOG_GRAD satloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
/* logical gradient characteristics */
LOG_GRAD asloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
SCAN_INFO asscan_info[3] = { {0,0,0,0,0,0,0,0,0,{0}} };
/* MRIge43968 (BJM): redefined from long PSrot[10] to the following.. */
/* redefined to long PSrot from int as per CARDIAC34.01 version */
long PSrot[PRESCAN_ROT_MAX][9]= {{0}};             /* prescan rotation matrix */

/* ************************************
   Prescan modification parameter (GE)
   ************************************  */
long PSrot_mod[PRESCAN_ROT_MAX][9]= {{0}};             /* prescan rotation matrix */
 
PHASE_OFF phase_off[DATA_ACQ_MAX] = { {0,0} };
int yres_phase= {0};  /* offset in phase direction in mm */
int yoffs1= {0};  /* intermediate phase offset variable */

/*** RT ***/
/* For use in SpSat.e */
/* storage of original concat sat offsets */
int off_rfcsz_base[DATA_ACQ_MAX]= {0};
/* storage of original matrix location */
SCAN_INFO scan_info_base[1] = { {0,0,0,0,0,0,0,0,0,{0}} };

/* For use in Prescan.e and psds */
/* storage of original x, y, and z offsets */
float xyz_base[DATA_ACQ_MAX][3]= {{0}};
/* storage of original rotation matrices */
long rsprot_base[TRIG_ROT_MAX][9]= {{0}};
/*** End RT ***/

/* Begin RTIA */
int rtia_first_scan_flag = 1 ; 
/* End RTIA */

RSP_PSC_INFO rsp_psc_info[MAX_PSC_VQUANT] = { {0,0,0,{0},0,0,0} };

/*************************************************************************
 * These structures are copy for target side. We will copy from host
 * @reqexport section to @ipgexport section.
 * The COIL_INFO and TX_COIL_INFO is defined                 
 * in /vobs/lx/include/CoilParameters.h
 *************************************************************************/

COIL_INFO coilInfo_tgt[MAX_COIL_SETS] = { { {0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

COIL_INFO volRecCoilInfo_tgt[MAX_COIL_SETS] = { { {0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

COIL_INFO fullRecCoilInfo_tgt[MAX_COIL_SETS] = { { {0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

TX_COIL_INFO txCoilInfo_tgt[MAX_TX_COIL_SETS] = { { 0,0,0,0,0,0,0,0,0,{0},0,0,{0},{0},{0},{0},0 } };

int cframpdir_tgt = 1;
int chksum_rampdir_tgt = 1447292810UL;

SeqCfgInfo seqcfginfo = {0,0,0,0,0,0,{0,0,0,0,0},{{0,0,0,0,0,0,{0,0,0,0}}},{{0,0,{0},0,{0}}},{{0,0,0,0,0,0,0,0}}}; 



/*
 * Copyright 2017 General Electric Company.  All rights reserved.
 */

/*
 * \file epic_rspvar.eh
 *
 * This EPIC source file declares target RSP variables common across all
 * PSDs.  Note that variables uniquely used by specific to PSD(s) may be
 * included here to ensure that the variables are present for code which
 * sets these variables. 
 *
 * RSP variables should be put into their respective psdsource
 * modules whenever possible. 
 *
 * This file is included in epic.h
 *
 */
 
/*********************************************************************
 *                  PRESCAN.E IPGEXPORT SECTION                      *
 *                                                                   *
 * Standard C variables of _any_ type common for both the Host and   *
 * Tgt PSD processes. Declare here all the complex type, e.g.,       *
 * structures, arrays, files, etc.                                   *
 *                                                                   *
 * NOTE FOR Lx:                                                      *
 * Since the architectures between the Host and the Tgt sides are    *
 * different, the memory alignment for certain types varies. Hence,  *
 * the following types are "forbidden": short, char, and double.     *
 *********************************************************************/
int PSfreq_offset[ENTRY_POINT_MAX]= {0};
int cfl_tdaq= {0};
int cfh_tdaq= {0};
int rcvn_tdaq= {0};
long rsp_PSrot[MAX_PSC_VQUANT] [9]= {{0}};
long rsp_rcvnrot[1][9]= {{0}};
long rsrsprot[RFSHIM_SLQ][9] = {{0}}; /* rot for B1 Map */
long dtgrsprot[DYNTG_SLQ][9] = {{0}}; /* rot for dynTG B1 Map */
long calrsprot[CAL_SLTAB_MAX + 1][9] = {{0}}; /* rot for Auto Cal */
long coilrsprot[CAL_SLTAB_MAX + 1][9] = {{0}}; /* rot for Auto Cal */
int min_ssp= {0}; /* Minimum required time between consecutive RF pulses */

RSP_INFO rsrsp_info[RFSHIM_SLQ] = { {0,0,0,0} };  /* B1 Map rsp info */
RSP_INFO dtgrsp_info[DYNTG_SLQ] = { {0,0,0,0} };  /* dynTG B1 Map rsp info */
RSP_INFO calrsp_info[64] = { {0,0,0,0} };  /* Ext Cal rsp info */
RSP_INFO coilrsp_info[64] = { {0,0,0,0} };  /* Auto Coil rsp info */
ZY_INDEX cal_zyindex[CAL_SLTAB_MAX*CAL_VIEWTAB_MAX] = { {0,0,0} };
ZY_INDEX coil_zyindex[CAL_SLTAB_MAX*CAL_VIEWTAB_MAX] = { {0,0,0} };

/* For presscfh MRIhc08321 */
PSC_INFO presscfh_info[MAX_PSC_VQUANT]={ {0,0,0,{0},0,0,0} };

/* YMSmr09211  04/26/2006 YI */

LOG_GRAD  cflloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  ps1loggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  cfhloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  rcvnloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  rsloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  dtgloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  calloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };
LOG_GRAD  coilloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };

PHYS_GRAD original_pgrd = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };


WF_PROCESSOR read_axis = XGRAD;
WF_PROCESSOR killer_axis = YGRAD;
WF_PROCESSOR tg_killer_axis = YGRAD;
WF_PROCESSOR tg_read_axis = XGRAD;


/* Off-iso center excitation */
float z_to_omscale[MAXSLQUANT2D]= {0};
float y_to_omscale[MAXSLQUANT2D]= {0};
float shift_to_omscale[MAXSLQUANT2D]= {0};

/**********************************************/
int  runtime_rf_waveform_rf1[32768]= {0};
int  runtime_rf_waveform_rf1a[32768]= {0};
int  runtime_rf_waveform_rf1b[32768]= {0};
int  runtime_rf_waveform_rf1c[32768]= {0};
int  runtime_rf_waveform_rf1d[32768]= {0};
int  runtime_rf_waveform_rf1e[32768]= {0};
int  runtime_rf_waveform_rf1f[32768]= {0};
int  runtime_rf_waveform_rf1g[32768]= {0};
int  runtime_rf_waveform_rf1h[32768]= {0};
int  runtime_rf_waveform_rf1i[32768]= {0};

/**********************************************/

/*RTB0 correction */
int slloc2sltime[SLICE_FACTOR*DATA_ACQ_MAX]= {0};
int sltime2slloc[SLICE_FACTOR*DATA_ACQ_MAX]= {0};
float f_sltime2slloc[SLICE_FACTOR*DATA_ACQ_MAX]= {0}; /*floating point array*/
int act_slquant1= {0};

long rsprot_unscaled[DATA_ACQ_MAX][9]= {{0}}; /* a copy of the roation matrices
                                          unscaled by cf<x,y,z.full, targets,
                                          or full scale values */
/* Obl 3in1 opt */
float inversRR[9]= {0};
float D[NUM_DWI_DIRS][NUM_DWI_AXES]= {{0}};     /* Diffusion Vector Matrix */
float log_incdifx[NUM_DWI_DIRS]= {0};
float log_incdify[NUM_DWI_DIRS]= {0};
float log_incdifz[NUM_DWI_DIRS]= {0};
float diff_ampx2[MAX_NUM_BVALS_PSD][NUM_DWI_DIRS]= {{0}};
float diff_ampy2[MAX_NUM_BVALS_PSD][NUM_DWI_DIRS]= {{0}};
float diff_ampz2[MAX_NUM_BVALS_PSD][NUM_DWI_DIRS]= {{0}};

int off_rfcsz[DATA_ACQ_MAX]= {0};

float dwigcor[9] = {0,0,0,0,0,0,0,0,0};         /* output grad correction matrix */
float dwibcor[3] = {0,0,0};                     /* output b0 (freg) correction matrix */
float dwikcor[9] = {0,0,0,0,0,0,0,0,0};         /* output pre-phaser area correction matrix */

/* HOEC */

/* slice-dependent HOEC contrinutions on each echo, based on logic axis */
float dwi_hoec_gcor_XonX[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};
float dwi_hoec_gcor_YonX[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}}; 
float dwi_hoec_gcor_ZonX[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};

float dwi_hoec_gcor_XonY[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};
float dwi_hoec_gcor_YonY[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};
float dwi_hoec_gcor_ZonY[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};

float dwi_hoec_bcor_XonB0[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};
float dwi_hoec_bcor_YonB0[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};
float dwi_hoec_bcor_ZonB0[HOEC_MAX_ILEAVE][HOEC_MAX_SLQUANT][HOEC_MAX_ETL]={{{0}}};


/* BJM: declare these here so they can be set on host and used by ipg */
float diff_ampx[MAX_NUM_BVALS_PSD]= {0};
float diff_ampy[MAX_NUM_BVALS_PSD]= {0};
float diff_ampz[MAX_NUM_BVALS_PSD]= {0};

/* for b-value weighted gradient scale calculation */
float diff_bv_weight[MAX_NUM_BVALS_PSD]= {0};

/* define physical and gradient characterisitics for epi read train.
   Physical limits are actual hardware limits, not limited by dB/dt
   constraints.  dB/dt constraints are applied within epigradopt function. */
/* MRIhc08159 */
/* physical gradient characteristics */
PHYS_GRAD epiphygrd = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };    
/* logical gradient characteristics */
LOG_GRAD  epiloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };

/* Obl 3in1 opt */
PHYS_GRAD orthphygrd = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
LOG_GRAD  orthloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0 };

RF_PULSE_INFO rfpulseInfo[RF_FREE] = { {0,0} };

/* variables used as buffers to read in static data from external file; 
   these buffers are used by functions for on-the-fly calculations, etc.    RK */
float delay_buffer[10]= {0};
float dither_buffer[12]= {0};
float ccinx[50]= {0};
float cciny[50]= {0};
float ccinz[50]= {0};
float fesp_in[50]= {0};
int esp_in[50]= {0};
float g0= {0};
int num_elements= {0};
int file_exist= {0};

/* SXZ::MRIge72411: edge ghost optimization */
float taratio_arr[NODESIZE]= {0};
float totarea_arr[NODESIZE]= {0};

float agxdif_tmp= {0}, agydif_tmp= {0}, agzdif_tmp= {0};
int difnextab_rsp[MAX_NUM_BVALS]= {0};

int ctlend_last[SLTAB_MAX]= {0}; /* dead time of last temporal cardiac slice */
int ctlend_fill[SLTAB_MAX]= {0}; /* dead time of last slice in a filled R-R interval */
int ctlend_unfill[SLTAB_MAX]= {0}; /* dead time of a last slice in an unfilled R-R interval */

/* t1flair_stir */
int t1flair_slice_info_enh[DATA_ACQ_MAX]= {0};
int t1flair_slice_info_reg[DATA_ACQ_MAX]= {0};



char ssrffile[40]= {0};
char ssgzfile[40]= {0};
char hgzssfn[40]= {0};

float ss_psd_slthick = 10;

/******************************ssInit************************************/

RSP_INFO mon_rsp_info[1] = { {0,0,0,0} };
RSP_INFO mon_rsp_info2[1] = { {0,0,0,0} };
LOG_GRAD monloggrd = {0,0,0,0,0,0,{0,0,0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0},0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 , 0, 0, 0};
PHYS_GRAD monphygrd = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
long rsprot_monitor[1][9]= {{0}};
n32 mcbias_info[EPT_MC_NUM_CONNECTORS] = {0};


/* ARCIpgexport  inlined from ARC.e */
int arcPhIndex[YRES_MAX+1]= {0};
int arcSlIndex[MAXSLQUANT3D+1]= {0};

/* ARCIpgexport  inlined from ARC.e */

/* Obl 3in1 opt */
long _lasttgtex = 0;

#endif /* h_epi2_tgtex_h */

