/*
 *  epi2.tgtdecl.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Jul 22 2018
 *  Time : 03:23:38
 */

#ifndef h_epi2_tgtdecl_h
#define h_epi2_tgtdecl_h


/*
 * rspvar
 * variables for exclusive use in the target compilation objects
 */

/* id tags - one for MROR-WS, one for pulse sequence, 0 based */
int cont_wsid, cont_psdid;

/* time stamp to recon for MROR header */
int cont_time;

/* variable communicating to recon that real time is on */
int cont_synch;

/* stops the cont imaging after acquisition of the last pass */
int cont_stop, cont_stop_usr;

/* x, y, and z offsets from original prescription - mm units, 1/10 mm
   accuracy, range TBD */
float cont_xoffset, cont_yoffset, cont_zoffset;

/* alpha, beta, and gamma offsets from original prescription - degree
   units, 1/10 degree accuracy, range 0-360 degrees */
float cont_alpha, cont_beta, cont_gamma;

/* variable for checking scan plane offset (cont_x/y/zofset )change */
int cont_sp_changed;

/* The following are set by prescan upon successful completion: */
int pscR1;  /* R1 receive attenuation (dB) */
int pscR2;  /* R2 receive attenuation (barrel shift) */
int pscCF;  /* CF center frequency (Hz) */
int pscTG;  /* TG transmit gain (dB) */

/* Host send DynaPlan phase index to PSD for DISCO DynaPlan feature */
int currentPhase_dynaplan;

int maxTGAtOffset = MAX_SYS_TG;  /* TG limit for off-center */

#ifdef PSD_HW
/* FGRET Timestamp */
int perf_tdel_id = 0;

/* 
 * If promo_rescantime_id==2, the rescan time communication between psd and recon 
 * will be initialized, the value of rescan time will then be sent to host for display
 */
int promo_rescantime_id = 0;
#endif /* PSD_HW */

/*
 * Copyright 2017 General Electric Company.  All rights reserved.
 */
 

/**
 * @brief Contains arrays and variables for recording dab information
 * @author Jeff Hopkins
 * @since 05 Dec 1999
 * 
 * Description: Contains constants, arrays, and counters
 * for keeping track of the contents of DAB packets as
 * they are passed in. This is the epic.h version for
 * the @rsp section. This needs to match  one-to-one
 * with dabrecord_pgen.h which gives the external links
 * for the loaddab functions.
 */

#include "dabrecord_common.h"

/*JAH: for recording view order table*/
int view_record[DABRECLEN];
int dabview_counter = 0;
int fse_dabview_flag = 0;
int record_views = 0;



/*
 * Copyright 2017 General Electric Company.  All rights reserved.
 */
 
/*
 * pulsedef
 * Contains the definitions of the EPIC pulse generation macros.
 * Each macro may contain the following sections even if they are empty
 * cv: creates all the CVs necessary to define and manipulate the
 * resultant pulse. 
 * insert: cvinit =>: adds the contained code to the cvinit.in file for
 * execution during PSD evaluation
 * insert: predownload =>: add the contained code to the predownload.in
 * file for execution during preparation for PSD download
 * var: creates all the runtime variables necessry for creation and
 * manipulation of the pulse constructs used during scanning
 * subst: inserts the contained code in the place of the macro usage
 * when the target PSD compilable code is created from the EPIC file.
 */
/*********************************************************************
 *                    PRESCAN.E RSPVAR SECTION                       *
 *                             PSrspvar                              *
 *                                                                   *
 * Declare here the real time variables that can be viewed and modi- *
 * fied while the Tgt PSD process is running. Only limited standard  *
 * C types are provided: short, int, long, float, double, and 1D     *
 * arrays of those types.                                            *
 *                                                                   *
 * NOTE: Do not declare all real-time variables here because of the  *
 *       overhead required for viewing and modifying them.           *
 *********************************************************************/

float dipir_ratio;
int dixon,as_slice,as_view,as_excitation;
int dur_invse; /* Initial duration for the WAIT pulse before the 90 pulse */
               /* based on OPTI */
int new_dur;   /* New duration time calulated with psctitime and cfh_ti delta */
int psctitime; /* input TI time on milliseconds; initialized to OPTI */
int titime_us;  /* input TI time in microseconds */
int tislice; /* holds new slice value that is changed during CFH */
int tislice_start; /* initial slice number passed into CFH */
float new_slice_loc; /* holds new slice location in cm */
int noir; /* Flag for IR pulse to be turned off */
int cscfh_satindex = 1; /* default chemsat occurence in cfh */
int mtcfh_index = 1; /* default mt occurence in cfh */
int amp_gyrf0kcfh;
int psc_vol_index; /* index of the prescan volume */
int showfp;

/****  FastTG RSPvar    ****/
int ftg_acq1, ftg_acq2; /* flags for data acquisiton, windows 1 and 2
                           1=on, 0=off */

/****  eXpressTG RSPvar    ****/
int xtg_acq1;           /* flag for data acquisiton windows 1=on, 0=off */

/****  AutoShim RSPvar  ****/
float asrot0,asrot1,asrot2,asrot3,asrot4,asrot5,asrot6,asrot7,asrot8;
float asrot9,asrot10,asrot11,asrot12,asrot13,asrot14,asrot15,asrot16,asrot17;
float asrot18,asrot19,asrot20,asrot21,asrot22,asrot23,asrot24,asrot25,asrot26;
float astloc1,asrloc1,asploc1;
float astloc2,asrloc2,asploc2;
float astloc3,asrloc3,asploc3;
float asdim1,asdim2,asdim3;
short as_slquant = 3;
short as_index = 1;
int PSdebugrotmat=0;

/* SWIFT debug */
int swift_debug = 0;

/* # of channels update rsp for auto coil */
int rspusefullcoil = 0;
int rcvn_usefullcoil = 0;
int cfh_usefullcoil = 0;
int xtg_usefullcoil = 0;
/************************ END OF PRESCAN.E ****************************/


int spucode_loaded;
int total_points;
int points;

int montime;           /* monitor sequence deadtime */
float scantime;        /* scan sequence deadtime */
int num_items;         /* number of items written to file */
int sequence_tr;
int test_flag;
int xo;  /* offset in x direction for cyl nav */
int yo;  /* offset in y direction for cyl nav */
int sprep_monit = 1;             /* for scan to skip smartprep monitoring */
int isrtplaunched = 0;


float rdx, rdy, rdz;     /* B0 phase dither in degrees, physical axes */
float dlyx, dlyy, dlyz;  /* gldelay acq/grad alignment real time variables */

int ref_switch;   /* If 1 use prescribed y FOV offset in exciter phase calc
                     If 0, don't used phase offset (for reference scan) */

int acq_data;  /* data acquisiton on/off flag */

int shot_delay;    /* trigger delay value for progressive gating */
int end_delay;     /* end of sequence wait time for conserved TR with
                      progressive gating */
int gyb_amp;       /* amplitude of gyb pulse */
int dro = 0;         /* delta readout offset in mm */
int dpo = 0;         /* delta phase encoding offset in mm */

float xtr;         /* xtr tuning value */
float frt;         /* frt tuning value */

float timedelta;
int deltaomega,scaleomega;
int newramp1,newramp1a;

int   sliceindex, pass,view,core_rep,ileave,excitation,slice,echo,pass_rep, pass_index, sliceindex1,slice1;
int   false_pass, false_slice, slice_tmp;
int   slq_to_shift; /* MRIge44963 - slice to be shifted in flair to get correct number of */
                    /* slices in each pack (false_pass) so that there is no cross talk */
int   slicerep;
int   use_sl;
int   sl_rcvcf;        /*  center freq receive offset */
int   dabecho, dabecho_multi, dabop, dabview; /* vars for loaddab */
short debugstate;      /* if trace is on */
int   acq_sl;
int   rsp_card_intern; /* deadtime when next slice is internally gated in a cardiac scan */
int   rsp_card_last[DATA_ACQ_MAX];   /* dead time for last temporal slice of a cardiac scan */
int   rsp_card_fill[DATA_ACQ_MAX];   /* dead time for last slice in a filled R-R interval */
int   rsp_card_unfill[DATA_ACQ_MAX]; /* dead time for last slice in a unfilled R-R interval */
short rsp_hrate;       /* cardiac heart rate */

short rsp_preview; /* amplitude of phase encode for prescan entrypoints */

int pre_slnum;  /* Prescan slice number */

/* int dshot; */  /* Diffusion shot counter */

int echoOffset;
int dabmask, hsdabmask, diffdabmask;

int sync1_pos;                  /* time of sync for rf1 */
int rf1_pos;                    /* time of rf1 */
int sync_to_rf1;                /* time from sync to start of rf1 */
int t_rf1_phase;                /* time from sync to middle of rf1 */

int sync2_pos;                  /* time of sync for rf2 */
int rf2_pos;                    /* time of rf2 */
int sync_to_rf2;                /* time from sync to start of rf2 */
int t_rf2_phase;                /* time from sync to middle of rf2 */

int sp_slice;
int sp_sat_index;
int sp_array_index;
int isi_vector_count;
int isi_vector_count_card;
int isi_vector_count_seqir123;
int isi_vector_count_seqir13;
int isi_vector_count_seqir12;
int sp_maxslice;
int sp_ir_mode;
int sp_sat_seq_count;
short int amp_gyksx1, amp_gyksx2, amp_gyksy1, amp_gyksy2, amp_gyksz1, amp_gyksz2, amp_gykse1, amp_gykse2, amp_gykse3, amp_gykse4, amp_gykse5, amp_gykse6;

short int amp_gxksx1, amp_gxksx2, amp_gxksy1, amp_gxksy2, amp_gxksz1, amp_gxksz2, amp_gxkse1, amp_gxkse2, amp_gxkse3, amp_gxkse4, amp_gxkse5, amp_gxkse6;


int csf, amp_gykcs, cstun;
float csflip, csa, max_csa;
    
#ifdef CSXKILLER
int amp_gxkcs;
#endif
#ifdef CSZKILLER
int amp_gzkcs;
#endif



/* t1flair_stir */
int edgeslice1, edgeslice2, edgeslice1freq, edgeslice1pha, edgeslice2freq, edgeslice2pha;


int   rspent, rspgyc, rspgzc;

short rspdda, rspbas, rspvus, rspilv, rsprep, rspnex, rspnex_temp, rspchp, rspgy1,
    rspesl, rspasl, rspech, rspsct, rspdex, rspslq, rspslq1,
    rspacq, rspacqb, rspslqb, rspilvb, rspbasb, rspprp, rsppepolar; 

short false_rspacqb, false_rspacq;

short rspe1st, rspetot;

/* ocfov fix MRIge26428 */
int refindex1,refindex2;
float refdattime[SLTAB_MAX];
int blankomega;
/* blip correction array */
int rspia_gyboc[DATA_ACQ_MAX];

/*RTB0 correction*/
float slice_cfoffset[DATA_ACQ_MAX];
float slice_cfoffset_filtered[DATA_ACQ_MAX];
float slice_cfoffset_bySlice[DATA_ACQ_MAX];
int slice_cfoffset_TARDIS[DATA_ACQ_MAX];
float slice_fidmean[DATA_ACQ_MAX]; /*MF B0 correction*/
float slice_cfresidual[DATA_ACQ_MAX];   /* Confidence metric when rtb0_confidence_method = 1 */
float slice_cfstddev[DATA_ACQ_MAX];     /* Confidence metric when rtb0_confidence_method = 2 */
float slice_cfconfidence[DATA_ACQ_MAX]; /* Confidence metric actually passed into appropriate weighted fit function
                                         * as determined by rtb0_confidence_method switch */
float cf_coeff[4]; /*polyfit coefficient MAX is 3rd order, so 4 coefficient*/



  WF_PULSE gxwkspa = INITPULSE;
  WF_PULSE gxwksp = INITPULSE;
  WF_PULSE gxwkspd = INITPULSE;

  WF_PULSE gywkspa = INITPULSE;
  WF_PULSE gywksp = INITPULSE;
  WF_PULSE gywkspd = INITPULSE;

  WF_PULSE gzwkspa = INITPULSE;
  WF_PULSE gzwksp = INITPULSE;
  WF_PULSE gzwkspd = INITPULSE;

  WF_PULSE gyex1a = INITPULSE;
  WF_PULSE gyex1 = INITPULSE;
  WF_PULSE gyex1d = INITPULSE;

    WF_PULSE om_omthrf2 = INITPULSE;	/* Omega waveform pulse */
    WF_PULSE th_omthrf2 = INITPULSE;	/* Theta waveform pulse */
    short *om_iamp_omthrf2; /* Omega waveform instruction amplitudes */
    LONG *om_wave_omthrf2;  /* Output omega waveform pointers per slice */
    LONG *th_wave_omthrf2;  /* Output theta waveform pointers per slice */

    WF_PULSE om_omthrf2left = INITPULSE;	/* Omega waveform pulse */
    WF_PULSE th_omthrf2left = INITPULSE;	/* Theta waveform pulse */
    short *om_iamp_omthrf2left; /* Omega waveform instruction amplitudes */
    LONG *om_wave_omthrf2left;  /* Output omega waveform pointers per slice */
    LONG *th_wave_omthrf2left;  /* Output theta waveform pointers per slice */

    WF_PULSE om_omthrf2right = INITPULSE;	/* Omega waveform pulse */
    WF_PULSE th_omthrf2right = INITPULSE;	/* Theta waveform pulse */
    short *om_iamp_omthrf2right; /* Omega waveform instruction amplitudes */
    LONG *om_wave_omthrf2right;  /* Output omega waveform pointers per slice */
    LONG *th_wave_omthrf2right;  /* Output theta waveform pointers per slice */

  WF_PULSE rf2_gradient_waveform = INITPULSE;

  WF_PULSE dynr1 = INITPULSE;

  WF_PULSE x_td0 = INITPULSE;

  WF_PULSE y_td0 = INITPULSE;

  WF_PULSE z_td0 = INITPULSE;

  WF_PULSE rho_td0 = INITPULSE;

  WF_PULSE theta_td0 = INITPULSE;

  WF_PULSE omega_td0 = INITPULSE;

  WF_PULSE ssp_td0 = INITPULSE;

    EXTERN_FILENAME2 grad_zrf1;
    EXTERN_FILENAME2 rf_rf1 ;
    EXTERN_FILENAME2 theta_rf1;
    WF_PULSE gzrf1a = INITPULSE;
    WF_PULSE gzrf1  = INITPULSE;
    WF_PULSE gzrf1d = INITPULSE;
    WF_PULSE rf1 = INITPULSE;
    WF_PULSE thetarf1  = INITPULSE;

  WF_PULSE gzrf2a = INITPULSE;
  WF_PULSE gzrf2  = INITPULSE;
  WF_PULSE gzrf2d = INITPULSE;
  WF_PULSE rf2 = INITPULSE;

  WF_PULSE gzrf2lefta = INITPULSE;
  WF_PULSE gzrf2left  = INITPULSE;
  WF_PULSE gzrf2leftd = INITPULSE;
  WF_PULSE rf2left = INITPULSE;

  WF_PULSE gzrf2righta = INITPULSE;
  WF_PULSE gzrf2right  = INITPULSE;
  WF_PULSE gzrf2rightd = INITPULSE;
  WF_PULSE rf2right = INITPULSE;

  WF_PULSE rf2se1b4 = INITPULSE;

  WF_PULSE gyrf2iva = INITPULSE;
  WF_PULSE gyrf2iv = INITPULSE;
  WF_PULSE gyrf2ivd = INITPULSE;

  WF_PULSE gzrf2l1a = INITPULSE;
  WF_PULSE gzrf2l1 = INITPULSE;
  WF_PULSE gzrf2l1d = INITPULSE;

  WF_PULSE gzrf2r1a = INITPULSE;
  WF_PULSE gzrf2r1 = INITPULSE;
  WF_PULSE gzrf2r1d = INITPULSE;

  WF_PULSE xgradCrusherLa = INITPULSE;
  WF_PULSE xgradCrusherL = INITPULSE;
  WF_PULSE xgradCrusherLd = INITPULSE;

  WF_PULSE xgradCrusherRa = INITPULSE;
  WF_PULSE xgradCrusherR = INITPULSE;
  WF_PULSE xgradCrusherRd = INITPULSE;

  WF_PULSE ygradCrusherLa = INITPULSE;
  WF_PULSE ygradCrusherL = INITPULSE;
  WF_PULSE ygradCrusherLd = INITPULSE;

  WF_PULSE ygradCrusherRa = INITPULSE;
  WF_PULSE ygradCrusherR = INITPULSE;
  WF_PULSE ygradCrusherRd = INITPULSE;

  WF_PULSE gzrf2leftl1a = INITPULSE;
  WF_PULSE gzrf2leftl1 = INITPULSE;
  WF_PULSE gzrf2leftl1d = INITPULSE;

  WF_PULSE gzrf2leftr1a = INITPULSE;
  WF_PULSE gzrf2leftr1 = INITPULSE;
  WF_PULSE gzrf2leftr1d = INITPULSE;

  WF_PULSE gzrf2rightl1a = INITPULSE;
  WF_PULSE gzrf2rightl1 = INITPULSE;
  WF_PULSE gzrf2rightl1d = INITPULSE;

  WF_PULSE gzrf2rightr1a = INITPULSE;
  WF_PULSE gzrf2rightr1 = INITPULSE;
  WF_PULSE gzrf2rightr1d = INITPULSE;

  WF_PULSE xgradRightCrusherLa = INITPULSE;
  WF_PULSE xgradRightCrusherL = INITPULSE;
  WF_PULSE xgradRightCrusherLd = INITPULSE;

  WF_PULSE xgradRightCrusherRa = INITPULSE;
  WF_PULSE xgradRightCrusherR = INITPULSE;
  WF_PULSE xgradRightCrusherRd = INITPULSE;

  WF_PULSE ygradRightCrusherLa = INITPULSE;
  WF_PULSE ygradRightCrusherL = INITPULSE;
  WF_PULSE ygradRightCrusherLd = INITPULSE;

  WF_PULSE ygradRightCrusherRa = INITPULSE;
  WF_PULSE ygradRightCrusherR = INITPULSE;
  WF_PULSE ygradRightCrusherRd = INITPULSE;

  WF_PULSE xgradLeftCrusherLa = INITPULSE;
  WF_PULSE xgradLeftCrusherL = INITPULSE;
  WF_PULSE xgradLeftCrusherLd = INITPULSE;

  WF_PULSE xgradLeftCrusherRa = INITPULSE;
  WF_PULSE xgradLeftCrusherR = INITPULSE;
  WF_PULSE xgradLeftCrusherRd = INITPULSE;

  WF_PULSE ygradLeftCrusherLa = INITPULSE;
  WF_PULSE ygradLeftCrusherL = INITPULSE;
  WF_PULSE ygradLeftCrusherLd = INITPULSE;

  WF_PULSE ygradLeftCrusherRa = INITPULSE;
  WF_PULSE ygradLeftCrusherR = INITPULSE;
  WF_PULSE ygradLeftCrusherRd = INITPULSE;

    WF_PULSE gxcla = INITPULSE;
    WF_PULSE gxcl = INITPULSE;
    WF_PULSE gxcld = INITPULSE;
 
    WF_PULSE gxwa = INITPULSE;
    WF_PULSE gxw = INITPULSE;
    WF_PULSE gxwd = INITPULSE;
    WF_PULSE gxwde = INITPULSE;
    WF_PULSE gxcra = INITPULSE;
    WF_PULSE gxcr = INITPULSE;
    WF_PULSE gxcrd = INITPULSE;
 
    WF_PULSE gxgap = INITPULSE;
 
    WF_PULSE gyb = INITPULSE;
    WF_PULSE gyba = INITPULSE;
    WF_PULSE gybd = INITPULSE;

    WF_PULSE gzb = INITPULSE;
    WF_PULSE gzba = INITPULSE;
    WF_PULSE gzbd = INITPULSE;
   
    WF_PULSE *echotrain = (WF_PULSE*)NULL;

  WF_PULSE rec_unblank = INITPULSE;
  short rec_unblank_pack[4];

  WF_PULSE rec_unblank3 = INITPULSE;
  short rec_unblank3_pack[4];

  WF_PULSE rtb0echo = INITPULSE;

  WF_PULSE rec_unblank2 = INITPULSE;
  short rec_unblank2_pack[4];

  WF_PULSE hyperdab = INITPULSE;

  WF_PULSE diffdab = INITPULSE;

  WF_PULSE gxiref1a = INITPULSE;
  WF_PULSE gxiref1 = INITPULSE;
  WF_PULSE gxiref1d = INITPULSE;

  WF_PULSE gxirefra = INITPULSE;
  WF_PULSE gxirefr = INITPULSE;
  WF_PULSE gxirefrd = INITPULSE;

  WF_PULSE gy1a = INITPULSE;
  WF_PULSE gy1 = INITPULSE;
  WF_PULSE gy1d = INITPULSE;

  WF_PULSE gymn2a = INITPULSE;
  WF_PULSE gymn2 = INITPULSE;
  WF_PULSE gymn2d = INITPULSE;

  WF_PULSE gymn1a = INITPULSE;
  WF_PULSE gymn1 = INITPULSE;
  WF_PULSE gymn1d = INITPULSE;

  WF_PULSE gz1a = INITPULSE;
  WF_PULSE gz1 = INITPULSE;
  WF_PULSE gz1d = INITPULSE;

  WF_PULSE gzmna = INITPULSE;
  WF_PULSE gzmn = INITPULSE;
  WF_PULSE gzmnd = INITPULSE;

  WF_PULSE rf2se1 = INITPULSE;

  WF_PULSE gxdl1a = INITPULSE;
  WF_PULSE gxdl1 = INITPULSE;
  WF_PULSE gxdl1d = INITPULSE;

  WF_PULSE gxdr1a = INITPULSE;
  WF_PULSE gxdr1 = INITPULSE;
  WF_PULSE gxdr1d = INITPULSE;

  WF_PULSE gxdl2a = INITPULSE;
  WF_PULSE gxdl2 = INITPULSE;
  WF_PULSE gxdl2d = INITPULSE;

  WF_PULSE gxdr2a = INITPULSE;
  WF_PULSE gxdr2 = INITPULSE;
  WF_PULSE gxdr2d = INITPULSE;

  WF_PULSE gxka = INITPULSE;
  WF_PULSE gxk = INITPULSE;
  WF_PULSE gxkd = INITPULSE;

  WF_PULSE gydl1a = INITPULSE;
  WF_PULSE gydl1 = INITPULSE;
  WF_PULSE gydl1d = INITPULSE;

  WF_PULSE gydr1a = INITPULSE;
  WF_PULSE gydr1 = INITPULSE;
  WF_PULSE gydr1d = INITPULSE;

  WF_PULSE gydl2a = INITPULSE;
  WF_PULSE gydl2 = INITPULSE;
  WF_PULSE gydl2d = INITPULSE;

  WF_PULSE gydr2a = INITPULSE;
  WF_PULSE gydr2 = INITPULSE;
  WF_PULSE gydr2d = INITPULSE;

  WF_PULSE gyka = INITPULSE;
  WF_PULSE gyk = INITPULSE;
  WF_PULSE gykd = INITPULSE;

  WF_PULSE gzdl1a = INITPULSE;
  WF_PULSE gzdl1 = INITPULSE;
  WF_PULSE gzdl1d = INITPULSE;

  WF_PULSE gzdr1a = INITPULSE;
  WF_PULSE gzdr1 = INITPULSE;
  WF_PULSE gzdr1d = INITPULSE;

  WF_PULSE gzdl2a = INITPULSE;
  WF_PULSE gzdl2 = INITPULSE;
  WF_PULSE gzdl2d = INITPULSE;

  WF_PULSE gzdr2a = INITPULSE;
  WF_PULSE gzdr2 = INITPULSE;
  WF_PULSE gzdr2d = INITPULSE;

  WF_PULSE gzka = INITPULSE;
  WF_PULSE gzk = INITPULSE;
  WF_PULSE gzkd = INITPULSE;

  WF_PULSE wgx = INITPULSE;

  WF_PULSE wgy = INITPULSE;

  WF_PULSE wgz = INITPULSE;

  WF_PULSE wssp = INITPULSE;

  WF_PULSE sspdelay = INITPULSE;

  WF_PULSE omegadelay = INITPULSE;

  WF_PULSE womega = INITPULSE;

  WF_PULSE e1entns = INITPULSE;
  short e1entns_pack[4] = {0,SSPOC+DREG,SSPD+DCBL,SSPDS};

  WF_PULSE e1distns = INITPULSE;
  short e1distns_pack[4] = {0,SSPOC+DREG,SSPD,SSPDS};

  WF_PULSE atten = INITPULSE;

  WF_PULSE sspshift = INITPULSE;

  WF_PULSE ssp_pass_delay = INITPULSE;

  WF_PULSE pass_pulse = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcore;
  WF_PULSE seqcore;
#if defined(HOST_TGT)
  int idx_seqcore;   /* sequence entry index */
#endif

  EXTERN_FILENAME grad_zrf0= "NULL";
  EXTERN_FILENAME rf_rf0 = "shNvrg5b.rho";

  WF_PULSE gzrf0a = INITPULSE;
  WF_PULSE gzrf0  = INITPULSE;
  WF_PULSE gzrf0d = INITPULSE;
  WF_PULSE rf0 = INITPULSE;


  EXTERN_FILENAME fileloc_omegarf0 =  "shNvrg5b.pha";
  WF_PULSE omegarf0 = INITPULSE;

  WF_PULSE gyk0a = INITPULSE;
  WF_PULSE gyk0 = INITPULSE;
  WF_PULSE gyk0d = INITPULSE;

  SEQUENCE_ENTRIES  off_seqinv;
  WF_PULSE seqinv;
#if defined(HOST_TGT)
  int idx_seqinv;   /* sequence entry index */
#endif

  WF_PULSE bline_unblank = INITPULSE;
  short bline_unblank_pack[4];

  WF_PULSE blineacq1 = INITPULSE;

  WF_PULSE hyperdabbl = INITPULSE;

  WF_PULSE diffdabbl = INITPULSE;

  SEQUENCE_ENTRIES  off_seqblineacq;
  WF_PULSE seqblineacq;
#if defined(HOST_TGT)
  int idx_seqblineacq;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqrtb0dummy;
  WF_PULSE seqrtb0dummy;
#if defined(HOST_TGT)
  int idx_seqrtb0dummy;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqrtb0fitwait;
  WF_PULSE seqrtb0fitwait;
#if defined(HOST_TGT)
  int idx_seqrtb0fitwait;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqrtprtb0;
  WF_PULSE seqrtprtb0;
#if defined(HOST_TGT)
  int idx_seqrtprtb0;   /* sequence entry index */
#endif

  WF_PULSE rfcssat = INITPULSE;

  WF_PULSE dbgxrfcssata = INITPULSE;
  WF_PULSE dbgxrfcssat = INITPULSE;
  WF_PULSE dbgxrfcssatd = INITPULSE;

  WF_PULSE dbgyrfcssata = INITPULSE;
  WF_PULSE dbgyrfcssat = INITPULSE;
  WF_PULSE dbgyrfcssatd = INITPULSE;

  WF_PULSE dbgzrfcssata = INITPULSE;
  WF_PULSE dbgzrfcssat = INITPULSE;
  WF_PULSE dbgzrfcssatd = INITPULSE;

  WF_PULSE omega_hs_rfcssat = INITPULSE;

  WF_PULSE gzrfcsa = INITPULSE;
  WF_PULSE gzrfcs = INITPULSE;
  WF_PULSE gzrfcsd = INITPULSE;

  WF_PULSE gykcsa = INITPULSE;
  WF_PULSE gykcs = INITPULSE;
  WF_PULSE gykcsd = INITPULSE;

  WF_PULSE gxkcsa = INITPULSE;
  WF_PULSE gxkcs = INITPULSE;
  WF_PULSE gxkcsd = INITPULSE;

  WF_PULSE gzkcsa = INITPULSE;
  WF_PULSE gzkcs = INITPULSE;
  WF_PULSE gzkcsd = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcssat;
  WF_PULSE seqcssat;
#if defined(HOST_TGT)
  int idx_seqcssat;   /* sequence entry index */
#endif

  WF_PULSE isi_cardiacsat = INITPULSE;

  WF_PULSE rot_update_cardiacsat = INITPULSE;

  WF_PULSE gzrfse1a = INITPULSE;
  WF_PULSE gzrfse1  = INITPULSE;
  WF_PULSE gzrfse1d = INITPULSE;
  WF_PULSE rfse1 = INITPULSE;
  WF_PULSE rfse1Theta = INITPULSE;

  WF_PULSE isi_sate1 = INITPULSE;

  WF_PULSE rot_update_e1 = INITPULSE;

  WF_PULSE gykse1a = INITPULSE;
  WF_PULSE gykse1 = INITPULSE;
  WF_PULSE gykse1d = INITPULSE;

  WF_PULSE gxkse1a = INITPULSE;
  WF_PULSE gxkse1 = INITPULSE;
  WF_PULSE gxkse1d = INITPULSE;

  WF_PULSE isi_satek1 = INITPULSE;

  WF_PULSE rot_update_ek1 = INITPULSE;

  WF_PULSE gzrfse2a = INITPULSE;
  WF_PULSE gzrfse2  = INITPULSE;
  WF_PULSE gzrfse2d = INITPULSE;
  WF_PULSE rfse2 = INITPULSE;
  WF_PULSE rfse2Theta = INITPULSE;

  WF_PULSE isi_sate2 = INITPULSE;

  WF_PULSE rot_update_e2 = INITPULSE;

  WF_PULSE gykse2a = INITPULSE;
  WF_PULSE gykse2 = INITPULSE;
  WF_PULSE gykse2d = INITPULSE;

  WF_PULSE gxkse2a = INITPULSE;
  WF_PULSE gxkse2 = INITPULSE;
  WF_PULSE gxkse2d = INITPULSE;

  WF_PULSE isi_satek2 = INITPULSE;

  WF_PULSE rot_update_ek2 = INITPULSE;

  WF_PULSE gzrfse3a = INITPULSE;
  WF_PULSE gzrfse3  = INITPULSE;
  WF_PULSE gzrfse3d = INITPULSE;
  WF_PULSE rfse3 = INITPULSE;
  WF_PULSE rfse3Theta = INITPULSE;

  WF_PULSE isi_sate3 = INITPULSE;

  WF_PULSE rot_update_e3 = INITPULSE;

  WF_PULSE gykse3a = INITPULSE;
  WF_PULSE gykse3 = INITPULSE;
  WF_PULSE gykse3d = INITPULSE;

  WF_PULSE gxkse3a = INITPULSE;
  WF_PULSE gxkse3 = INITPULSE;
  WF_PULSE gxkse3d = INITPULSE;

  WF_PULSE isi_satek3 = INITPULSE;

  WF_PULSE rot_update_ek3 = INITPULSE;

  WF_PULSE gzrfse4a = INITPULSE;
  WF_PULSE gzrfse4  = INITPULSE;
  WF_PULSE gzrfse4d = INITPULSE;
  WF_PULSE rfse4 = INITPULSE;
  WF_PULSE rfse4Theta = INITPULSE;

  WF_PULSE isi_sate4 = INITPULSE;

  WF_PULSE rot_update_e4 = INITPULSE;

  WF_PULSE gykse4a = INITPULSE;
  WF_PULSE gykse4 = INITPULSE;
  WF_PULSE gykse4d = INITPULSE;

  WF_PULSE gxkse4a = INITPULSE;
  WF_PULSE gxkse4 = INITPULSE;
  WF_PULSE gxkse4d = INITPULSE;

  WF_PULSE isi_satek4 = INITPULSE;

  WF_PULSE rot_update_ek4 = INITPULSE;

  WF_PULSE gzrfse5a = INITPULSE;
  WF_PULSE gzrfse5  = INITPULSE;
  WF_PULSE gzrfse5d = INITPULSE;
  WF_PULSE rfse5 = INITPULSE;
  WF_PULSE rfse5Theta = INITPULSE;

  WF_PULSE isi_sate5 = INITPULSE;

  WF_PULSE rot_update_e5 = INITPULSE;

  WF_PULSE gykse5a = INITPULSE;
  WF_PULSE gykse5 = INITPULSE;
  WF_PULSE gykse5d = INITPULSE;

  WF_PULSE gxkse5a = INITPULSE;
  WF_PULSE gxkse5 = INITPULSE;
  WF_PULSE gxkse5d = INITPULSE;

  WF_PULSE isi_satek5 = INITPULSE;

  WF_PULSE rot_update_ek5 = INITPULSE;

  WF_PULSE gzrfse6a = INITPULSE;
  WF_PULSE gzrfse6  = INITPULSE;
  WF_PULSE gzrfse6d = INITPULSE;
  WF_PULSE rfse6 = INITPULSE;
  WF_PULSE rfse6Theta = INITPULSE;

  WF_PULSE isi_sate6 = INITPULSE;

  WF_PULSE rot_update_e6 = INITPULSE;

  WF_PULSE gykse6a = INITPULSE;
  WF_PULSE gykse6 = INITPULSE;
  WF_PULSE gykse6d = INITPULSE;

  WF_PULSE gxkse6a = INITPULSE;
  WF_PULSE gxkse6 = INITPULSE;
  WF_PULSE gxkse6d = INITPULSE;

  WF_PULSE isi_satek6 = INITPULSE;

  WF_PULSE rot_update_ek6 = INITPULSE;

  WF_PULSE gxrfsx1a = INITPULSE;
  WF_PULSE gxrfsx1  = INITPULSE;
  WF_PULSE gxrfsx1d = INITPULSE;
  WF_PULSE rfsx1 = INITPULSE;
  WF_PULSE rfsx1Theta = INITPULSE;

  WF_PULSE isi_satx1 = INITPULSE;

  WF_PULSE rot_update_x1 = INITPULSE;

  WF_PULSE gyksx1a = INITPULSE;
  WF_PULSE gyksx1 = INITPULSE;
  WF_PULSE gyksx1d = INITPULSE;

  WF_PULSE gxksx1a = INITPULSE;
  WF_PULSE gxksx1 = INITPULSE;
  WF_PULSE gxksx1d = INITPULSE;

  WF_PULSE isi_satxk1 = INITPULSE;

  WF_PULSE rot_update_xk1 = INITPULSE;

  WF_PULSE gxrfsx2a = INITPULSE;
  WF_PULSE gxrfsx2  = INITPULSE;
  WF_PULSE gxrfsx2d = INITPULSE;
  WF_PULSE rfsx2 = INITPULSE;
  WF_PULSE rfsx2Theta = INITPULSE;

  WF_PULSE isi_satx2 = INITPULSE;

  WF_PULSE rot_update_x2 = INITPULSE;

  WF_PULSE gyksx2a = INITPULSE;
  WF_PULSE gyksx2 = INITPULSE;
  WF_PULSE gyksx2d = INITPULSE;

  WF_PULSE gxksx2a = INITPULSE;
  WF_PULSE gxksx2 = INITPULSE;
  WF_PULSE gxksx2d = INITPULSE;

  WF_PULSE isi_satxk2 = INITPULSE;

  WF_PULSE rot_update_xk2 = INITPULSE;

  WF_PULSE gyrfsy1a = INITPULSE;
  WF_PULSE gyrfsy1  = INITPULSE;
  WF_PULSE gyrfsy1d = INITPULSE;
  WF_PULSE rfsy1 = INITPULSE;
  WF_PULSE rfsy1Theta = INITPULSE;

  WF_PULSE isi_saty1 = INITPULSE;

  WF_PULSE rot_update_y1 = INITPULSE;

  WF_PULSE gyksy1a = INITPULSE;
  WF_PULSE gyksy1 = INITPULSE;
  WF_PULSE gyksy1d = INITPULSE;

  WF_PULSE gxksy1a = INITPULSE;
  WF_PULSE gxksy1 = INITPULSE;
  WF_PULSE gxksy1d = INITPULSE;

  WF_PULSE isi_satyk1 = INITPULSE;

  WF_PULSE rot_update_yk1 = INITPULSE;

  WF_PULSE gyrfsy2a = INITPULSE;
  WF_PULSE gyrfsy2  = INITPULSE;
  WF_PULSE gyrfsy2d = INITPULSE;
  WF_PULSE rfsy2 = INITPULSE;
  WF_PULSE rfsy2Theta = INITPULSE;

  WF_PULSE isi_saty2 = INITPULSE;

  WF_PULSE rot_update_y2 = INITPULSE;

  WF_PULSE gyksy2a = INITPULSE;
  WF_PULSE gyksy2 = INITPULSE;
  WF_PULSE gyksy2d = INITPULSE;

  WF_PULSE gxksy2a = INITPULSE;
  WF_PULSE gxksy2 = INITPULSE;
  WF_PULSE gxksy2d = INITPULSE;

  WF_PULSE isi_satyk2 = INITPULSE;

  WF_PULSE rot_update_yk2 = INITPULSE;

  WF_PULSE gzrfsz1a = INITPULSE;
  WF_PULSE gzrfsz1  = INITPULSE;
  WF_PULSE gzrfsz1d = INITPULSE;
  WF_PULSE rfsz1 = INITPULSE;
  WF_PULSE rfsz1Theta = INITPULSE;

  WF_PULSE isi_satz1 = INITPULSE;

  WF_PULSE rot_update_z1 = INITPULSE;

  WF_PULSE gyksz1a = INITPULSE;
  WF_PULSE gyksz1 = INITPULSE;
  WF_PULSE gyksz1d = INITPULSE;

  WF_PULSE gxksz1a = INITPULSE;
  WF_PULSE gxksz1 = INITPULSE;
  WF_PULSE gxksz1d = INITPULSE;

  WF_PULSE isi_satzk1 = INITPULSE;

  WF_PULSE rot_update_zk1 = INITPULSE;

  WF_PULSE gzrfsz2a = INITPULSE;
  WF_PULSE gzrfsz2  = INITPULSE;
  WF_PULSE gzrfsz2d = INITPULSE;
  WF_PULSE rfsz2 = INITPULSE;
  WF_PULSE rfsz2Theta = INITPULSE;

  WF_PULSE isi_satz2 = INITPULSE;

  WF_PULSE rot_update_z2 = INITPULSE;

  WF_PULSE gyksz2a = INITPULSE;
  WF_PULSE gyksz2 = INITPULSE;
  WF_PULSE gyksz2d = INITPULSE;

  WF_PULSE gxksz2a = INITPULSE;
  WF_PULSE gxksz2 = INITPULSE;
  WF_PULSE gxksz2d = INITPULSE;

  WF_PULSE isi_satzk2 = INITPULSE;

  WF_PULSE rot_update_zk2 = INITPULSE;

  SEQUENCE_ENTRIES  off_seqsat_fgre;
  WF_PULSE seqsat_fgre;
#if defined(HOST_TGT)
  int idx_seqsat_fgre;   /* sequence entry index */
#endif

  WF_PULSE y_ccs_null = INITPULSE;

  SEQUENCE_ENTRIES  off_cat_seq;
  WF_PULSE cat_seq;
#if defined(HOST_TGT)
  int idx_cat_seq;   /* sequence entry index */
#endif

    WF_PULSE rf1mps1 = INITPULSE;

  WF_PULSE gyrf1mps1a = INITPULSE;
  WF_PULSE gyrf1mps1 = INITPULSE;
  WF_PULSE gyrf1mps1d = INITPULSE;

  WF_PULSE gy1mps1a = INITPULSE;
  WF_PULSE gy1mps1 = INITPULSE;
  WF_PULSE gy1mps1d = INITPULSE;

  WF_PULSE gzrf1mps1a = INITPULSE;
  WF_PULSE gzrf1mps1 = INITPULSE;
  WF_PULSE gzrf1mps1d = INITPULSE;

  WF_PULSE gz1mps1a = INITPULSE;
  WF_PULSE gz1mps1 = INITPULSE;
  WF_PULSE gz1mps1d = INITPULSE;

  WF_PULSE gx1mps1a = INITPULSE;
  WF_PULSE gx1mps1 = INITPULSE;
  WF_PULSE gx1mps1d = INITPULSE;

  WF_PULSE gzrf2mps1a = INITPULSE;
  WF_PULSE gzrf2mps1  = INITPULSE;
  WF_PULSE gzrf2mps1d = INITPULSE;
  WF_PULSE rf2mps1 = INITPULSE;

  WF_PULSE gzrf2lmps1a = INITPULSE;
  WF_PULSE gzrf2lmps1 = INITPULSE;
  WF_PULSE gzrf2lmps1d = INITPULSE;

  WF_PULSE gzrf2rmps1a = INITPULSE;
  WF_PULSE gzrf2rmps1 = INITPULSE;
  WF_PULSE gzrf2rmps1d = INITPULSE;

  WF_PULSE gxwmps1a = INITPULSE;
  WF_PULSE gxwmps1 = INITPULSE;
  WF_PULSE gxwmps1d = INITPULSE;

  WF_PULSE echo1mps1 = INITPULSE;

  WF_PULSE attenuator_keymps1 = INITPULSE;

  SEQUENCE_ENTRIES  off_seqmps1;
  WF_PULSE seqmps1;
#if defined(HOST_TGT)
  int idx_seqmps1;   /* sequence entry index */
#endif

  WF_PULSE gzrf1cfla = INITPULSE;
  WF_PULSE gzrf1cfl  = INITPULSE;
  WF_PULSE gzrf1cfld = INITPULSE;
  WF_PULSE rf1cfl = INITPULSE;

  WF_PULSE gz1cfla = INITPULSE;
  WF_PULSE gz1cfl = INITPULSE;
  WF_PULSE gz1cfld = INITPULSE;

  WF_PULSE cfl_fid = INITPULSE;

  WF_PULSE cfl_attenkey = INITPULSE;

  WF_PULSE gykcfla = INITPULSE;
  WF_PULSE gykcfl = INITPULSE;
  WF_PULSE gykcfld = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcfl;
  WF_PULSE seqcfl;
#if defined(HOST_TGT)
  int idx_seqcfl;   /* sequence entry index */
#endif

  WF_PULSE gxkrcvna = INITPULSE;
  WF_PULSE gxkrcvn = INITPULSE;
  WF_PULSE gxkrcvnd = INITPULSE;

  WF_PULSE gykrcvna = INITPULSE;
  WF_PULSE gykrcvn = INITPULSE;
  WF_PULSE gykrcvnd = INITPULSE;

  WF_PULSE gzkrcvna = INITPULSE;
  WF_PULSE gzkrcvn = INITPULSE;
  WF_PULSE gzkrcvnd = INITPULSE;

  WF_PULSE grd_trig = INITPULSE;

  WF_PULSE gxk2rcvna = INITPULSE;
  WF_PULSE gxk2rcvn = INITPULSE;
  WF_PULSE gxk2rcvnd = INITPULSE;

  WF_PULSE gyk2rcvna = INITPULSE;
  WF_PULSE gyk2rcvn = INITPULSE;
  WF_PULSE gyk2rcvnd = INITPULSE;

  WF_PULSE gzk2rcvna = INITPULSE;
  WF_PULSE gzk2rcvn = INITPULSE;
  WF_PULSE gzk2rcvnd = INITPULSE;

  WF_PULSE rcvn_wait = INITPULSE;

  SEQUENCE_ENTRIES  off_pre_rcvn;
  WF_PULSE pre_rcvn;
#if defined(HOST_TGT)
  int idx_pre_rcvn;   /* sequence entry index */
#endif

  WF_PULSE rcvrbl = INITPULSE;
  short rcvrbl_pack[4];

  WF_PULSE rcvn_fid = INITPULSE;

  WF_PULSE rcvn_attenkey = INITPULSE;

  WF_PULSE rcvrbl2 = INITPULSE;
  short rcvrbl2_pack[4];

  SEQUENCE_ENTRIES  off_seqrcvn;
  WF_PULSE seqrcvn;
#if defined(HOST_TGT)
  int idx_seqrcvn;   /* sequence entry index */
#endif

  EXTERN_FILENAME grad_zrf0cfh= "NULL";
  EXTERN_FILENAME rf_rf0cfh = "shNvrg5b.rho";

  WF_PULSE gzrf0cfha = INITPULSE;
  WF_PULSE gzrf0cfh  = INITPULSE;
  WF_PULSE gzrf0cfhd = INITPULSE;
  WF_PULSE rf0cfh = INITPULSE;


  EXTERN_FILENAME fileloc_omegarf0cfh =  "shNvrg5b.pha";
  WF_PULSE omegarf0cfh = INITPULSE;

  WF_PULSE gyrf0kcfha = INITPULSE;
  WF_PULSE gyrf0kcfh = INITPULSE;
  WF_PULSE gyrf0kcfhd = INITPULSE;

  WF_PULSE zticfh = INITPULSE;

  WF_PULSE rticfh = INITPULSE;

  WF_PULSE xticfh = INITPULSE;

  WF_PULSE yticfh = INITPULSE;

  WF_PULSE sticfh = INITPULSE;

  WF_PULSE gzrf1cfha = INITPULSE;
  WF_PULSE gzrf1cfh  = INITPULSE;
  WF_PULSE gzrf1cfhd = INITPULSE;
  WF_PULSE rf1cfh = INITPULSE;

    WF_PULSE rf2cfh = INITPULSE;

    WF_PULSE rf3cfh = INITPULSE;

    WF_PULSE rf4cfh = INITPULSE;

  WF_PULSE gxrf2cfha = INITPULSE;
  WF_PULSE gxrf2cfh = INITPULSE;
  WF_PULSE gxrf2cfhd = INITPULSE;

  WF_PULSE gyrf2cfha = INITPULSE;
  WF_PULSE gyrf2cfh = INITPULSE;
  WF_PULSE gyrf2cfhd = INITPULSE;

  WF_PULSE gzrf2lcfha = INITPULSE;
  WF_PULSE gzrf2lcfh = INITPULSE;
  WF_PULSE gzrf2lcfhd = INITPULSE;

  WF_PULSE gzrf2rcfha = INITPULSE;
  WF_PULSE gzrf2rcfh = INITPULSE;
  WF_PULSE gzrf2rcfhd = INITPULSE;

  WF_PULSE gyrf3cfha = INITPULSE;
  WF_PULSE gyrf3cfh = INITPULSE;
  WF_PULSE gyrf3cfhd = INITPULSE;

  WF_PULSE gzrf3lcfha = INITPULSE;
  WF_PULSE gzrf3lcfh = INITPULSE;
  WF_PULSE gzrf3lcfhd = INITPULSE;

  WF_PULSE gzrf3rcfha = INITPULSE;
  WF_PULSE gzrf3rcfh = INITPULSE;
  WF_PULSE gzrf3rcfhd = INITPULSE;

  WF_PULSE gy1cfha = INITPULSE;
  WF_PULSE gy1cfh = INITPULSE;
  WF_PULSE gy1cfhd = INITPULSE;

  WF_PULSE gx1cfha = INITPULSE;
  WF_PULSE gx1cfh = INITPULSE;
  WF_PULSE gx1cfhd = INITPULSE;

  WF_PULSE gzrf4cfha = INITPULSE;
  WF_PULSE gzrf4cfh = INITPULSE;
  WF_PULSE gzrf4cfhd = INITPULSE;

  WF_PULSE isi_slice1 = INITPULSE;

  WF_PULSE rot_slice1 = INITPULSE;

  WF_PULSE isi_slice2 = INITPULSE;

  WF_PULSE rot_slice2 = INITPULSE;

  WF_PULSE gzrf4lcfha = INITPULSE;
  WF_PULSE gzrf4lcfh = INITPULSE;
  WF_PULSE gzrf4lcfhd = INITPULSE;

  WF_PULSE gzrf4rcfha = INITPULSE;
  WF_PULSE gzrf4rcfh = INITPULSE;
  WF_PULSE gzrf4rcfhd = INITPULSE;

  WF_PULSE cfh_fid = INITPULSE;

  WF_PULSE cfh_attenkey = INITPULSE;

  WF_PULSE gykcfha = INITPULSE;
  WF_PULSE gykcfh = INITPULSE;
  WF_PULSE gykcfhd = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcfh;
  WF_PULSE seqcfh;
#if defined(HOST_TGT)
  int idx_seqcfh;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqcfhwait;
  WF_PULSE seqcfhwait;
#if defined(HOST_TGT)
  int idx_seqcfhwait;   /* sequence entry index */
#endif

  WF_PULSE contrfhubsel = INITPULSE;

  WF_PULSE contrfsel = INITPULSE;

  WF_PULSE csw_wait = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcsw;
  WF_PULSE seqcsw;
#if defined(HOST_TGT)
  int idx_seqcsw;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqcswWaitBefore;
  WF_PULSE seqcswWaitBefore;
#if defined(HOST_TGT)
  int idx_seqcswWaitBefore;   /* sequence entry index */
#endif

  WF_PULSE gzrf1ftga = INITPULSE;
  WF_PULSE gzrf1ftg  = INITPULSE;
  WF_PULSE gzrf1ftgd = INITPULSE;
  WF_PULSE rf1ftg = INITPULSE;

  WF_PULSE gz1ftga = INITPULSE;
  WF_PULSE gz1ftg = INITPULSE;
  WF_PULSE gz1ftgd = INITPULSE;

  WF_PULSE gzrf2ftga = INITPULSE;
  WF_PULSE gzrf2ftg  = INITPULSE;
  WF_PULSE gzrf2ftgd = INITPULSE;
  WF_PULSE rf2ftg = INITPULSE;

  WF_PULSE gz2ftga = INITPULSE;
  WF_PULSE gz2ftg = INITPULSE;
  WF_PULSE gz2ftgd = INITPULSE;

  WF_PULSE gzrf3ftga = INITPULSE;
  WF_PULSE gzrf3ftg  = INITPULSE;
  WF_PULSE gzrf3ftgd = INITPULSE;
  WF_PULSE rf3ftg = INITPULSE;

  WF_PULSE gz3ftga = INITPULSE;
  WF_PULSE gz3ftg = INITPULSE;
  WF_PULSE gz3ftgd = INITPULSE;

  WF_PULSE gx1ftga = INITPULSE;
  WF_PULSE gx1ftg = INITPULSE;
  WF_PULSE gx1ftgd = INITPULSE;

  WF_PULSE gx1bftga = INITPULSE;
  WF_PULSE gx1bftg = INITPULSE;
  WF_PULSE gx1bftgd = INITPULSE;

  WF_PULSE gxw1ftga = INITPULSE;
  WF_PULSE gxw1ftg = INITPULSE;
  WF_PULSE gxw1ftgd = INITPULSE;

  WF_PULSE postgxw1ftga = INITPULSE;
  WF_PULSE postgxw1ftg = INITPULSE;
  WF_PULSE postgxw1ftgd = INITPULSE;

  WF_PULSE echo1ftg = INITPULSE;

  WF_PULSE gz2bftga = INITPULSE;
  WF_PULSE gz2bftg = INITPULSE;
  WF_PULSE gz2bftgd = INITPULSE;

  WF_PULSE gx2ftga = INITPULSE;
  WF_PULSE gx2ftg = INITPULSE;
  WF_PULSE gx2ftgd = INITPULSE;

  WF_PULSE gxw2ftga = INITPULSE;
  WF_PULSE gxw2ftg = INITPULSE;
  WF_PULSE gxw2ftgd = INITPULSE;

  WF_PULSE gx2testa = INITPULSE;
  WF_PULSE gx2test = INITPULSE;
  WF_PULSE gx2testd = INITPULSE;

  WF_PULSE echo2ftg = INITPULSE;

  WF_PULSE ftg_attenkey = INITPULSE;

  SEQUENCE_ENTRIES  off_seqftg;
  WF_PULSE seqftg;
#if defined(HOST_TGT)
  int idx_seqftg;   /* sequence entry index */
#endif

    WF_PULSE rf1xtg = INITPULSE;

  WF_PULSE gyrf1xtga = INITPULSE;
  WF_PULSE gyrf1xtg = INITPULSE;
  WF_PULSE gyrf1xtgd = INITPULSE;

  WF_PULSE gzrf1xtga = INITPULSE;
  WF_PULSE gzrf1xtg = INITPULSE;
  WF_PULSE gzrf1xtgd = INITPULSE;

  WF_PULSE gykxtgla = INITPULSE;
  WF_PULSE gykxtgl = INITPULSE;
  WF_PULSE gykxtgld = INITPULSE;

        WF_PULSE rf3xtg    = INITPULSE;

        /* for RF shimming */
        WF_PULSE phs_rf3xtg      = INITPULSE;

  WF_PULSE gz1xtga = INITPULSE;
  WF_PULSE gz1xtg = INITPULSE;
  WF_PULSE gz1xtgd = INITPULSE;

  WF_PULSE gzrf2xtga = INITPULSE;
  WF_PULSE gzrf2xtg  = INITPULSE;
  WF_PULSE gzrf2xtgd = INITPULSE;
  WF_PULSE rf2xtg = INITPULSE;

  WF_PULSE gz2xtga = INITPULSE;
  WF_PULSE gz2xtg = INITPULSE;
  WF_PULSE gz2xtgd = INITPULSE;

        WF_PULSE rf4xtg    = INITPULSE;

        /* for RF shimming */
        WF_PULSE phs_rf4xtg      = INITPULSE;

  WF_PULSE gykxtgra = INITPULSE;
  WF_PULSE gykxtgr = INITPULSE;
  WF_PULSE gykxtgrd = INITPULSE;

  WF_PULSE gx1bxtga = INITPULSE;
  WF_PULSE gx1bxtg = INITPULSE;
  WF_PULSE gx1bxtgd = INITPULSE;

  WF_PULSE gxw1xtga = INITPULSE;
  WF_PULSE gxw1xtg = INITPULSE;
  WF_PULSE gxw1xtgd = INITPULSE;

  WF_PULSE echo1xtg = INITPULSE;

  WF_PULSE xtg_attenkey = INITPULSE;

  SEQUENCE_ENTRIES  off_seqxtg;
  WF_PULSE seqxtg;
#if defined(HOST_TGT)
  int idx_seqxtg;   /* sequence entry index */
#endif

  WF_PULSE gzrf1asa = INITPULSE;
  WF_PULSE gzrf1as  = INITPULSE;
  WF_PULSE gzrf1asd = INITPULSE;
  WF_PULSE rf1as = INITPULSE;

  WF_PULSE gz1asa = INITPULSE;
  WF_PULSE gz1as = INITPULSE;
  WF_PULSE gz1asd = INITPULSE;

  WF_PULSE gxwasa = INITPULSE;
  WF_PULSE gxwas = INITPULSE;
  WF_PULSE gxwasd = INITPULSE;

  WF_PULSE echo1as = INITPULSE;

  WF_PULSE gx1asa = INITPULSE;
  WF_PULSE gx1as = INITPULSE;
  WF_PULSE gx1asd = INITPULSE;

  WF_PULSE attenuator_keyas = INITPULSE;

  WF_PULSE gy1asa = INITPULSE;
  WF_PULSE gy1as = INITPULSE;
  WF_PULSE gy1asd = INITPULSE;

  WF_PULSE gy1rasa = INITPULSE;
  WF_PULSE gy1ras = INITPULSE;
  WF_PULSE gy1rasd = INITPULSE;

  WF_PULSE gxkasa = INITPULSE;
  WF_PULSE gxkas = INITPULSE;
  WF_PULSE gxkasd = INITPULSE;

  WF_PULSE gzkasa = INITPULSE;
  WF_PULSE gzkas = INITPULSE;
  WF_PULSE gzkasd = INITPULSE;

  WF_PULSE xdixon = INITPULSE;

  WF_PULSE ydixon = INITPULSE;

  WF_PULSE zdixon = INITPULSE;

  WF_PULSE sdixon = INITPULSE;

  WF_PULSE sdixon2 = INITPULSE;

  SEQUENCE_ENTRIES  off_seqaushim;
  WF_PULSE seqaushim;
#if defined(HOST_TGT)
  int idx_seqaushim;   /* sequence entry index */
#endif

  WF_PULSE pass_aushim = INITPULSE;

  SEQUENCE_ENTRIES  off_seqpassas;
  WF_PULSE seqpassas;
#if defined(HOST_TGT)
  int idx_seqpassas;   /* sequence entry index */
#endif

  WF_PULSE dDDIQ = INITPULSE;

  SEQUENCE_ENTRIES  off_seqIQControl;
  WF_PULSE seqIQControl;
#if defined(HOST_TGT)
  int idx_seqIQControl;   /* sequence entry index */
#endif

  WF_PULSE rf1rs = INITPULSE;

  WF_PULSE gzrf1rsa = INITPULSE;
  WF_PULSE gzrf1rs = INITPULSE;
  WF_PULSE gzrf1rsd = INITPULSE;

  WF_PULSE gxkbsrsa = INITPULSE;
  WF_PULSE gxkbsrs = INITPULSE;
  WF_PULSE gxkbsrsd = INITPULSE;

  WF_PULSE gz1rsa = INITPULSE;
  WF_PULSE gz1rs = INITPULSE;
  WF_PULSE gz1rsd = INITPULSE;


  EXTERN_FILENAME fileloc_rfbrs =  "bloch_siegert_abs.rho";
  WF_PULSE rfbrs = INITPULSE;


  EXTERN_FILENAME fileloc_thetarfbrs =  "bloch_siegert_abs.pha";
  WF_PULSE thetarfbrs = INITPULSE;

  WF_PULSE gzkbsrsa = INITPULSE;
  WF_PULSE gzkbsrs = INITPULSE;
  WF_PULSE gzkbsrsd = INITPULSE;

  WF_PULSE gxwrsa = INITPULSE;
  WF_PULSE gxwrs = INITPULSE;
  WF_PULSE gxwrsd = INITPULSE;

  WF_PULSE echo1rs = INITPULSE;

  WF_PULSE gx2rsa = INITPULSE;
  WF_PULSE gx2rs = INITPULSE;
  WF_PULSE gx2rsd = INITPULSE;

  WF_PULSE gy2rsa = INITPULSE;
  WF_PULSE gy2rs = INITPULSE;
  WF_PULSE gy2rsd = INITPULSE;

  WF_PULSE gxw2rsa = INITPULSE;
  WF_PULSE gxw2rs = INITPULSE;
  WF_PULSE gxw2rsd = INITPULSE;

  WF_PULSE gx1rsa = INITPULSE;
  WF_PULSE gx1rs = INITPULSE;
  WF_PULSE gx1rsd = INITPULSE;

  WF_PULSE gy1rrsa = INITPULSE;
  WF_PULSE gy1rrs = INITPULSE;
  WF_PULSE gy1rrsd = INITPULSE;

  WF_PULSE gy1rsa = INITPULSE;
  WF_PULSE gy1rs = INITPULSE;
  WF_PULSE gy1rsd = INITPULSE;

  WF_PULSE gzkrsa = INITPULSE;
  WF_PULSE gzkrs = INITPULSE;
  WF_PULSE gzkrsd = INITPULSE;

  WF_PULSE gxkrsa = INITPULSE;
  WF_PULSE gxkrs = INITPULSE;
  WF_PULSE gxkrsd = INITPULSE;

  WF_PULSE attenuator_keyrs = INITPULSE;

  SEQUENCE_ENTRIES  off_seqrs;
  WF_PULSE seqrs;
#if defined(HOST_TGT)
  int idx_seqrs;   /* sequence entry index */
#endif

  WF_PULSE pass_rs = INITPULSE;

  SEQUENCE_ENTRIES  off_seqpassrs;
  WF_PULSE seqpassrs;
#if defined(HOST_TGT)
  int idx_seqpassrs;   /* sequence entry index */
#endif

  WF_PULSE rf1dtg = INITPULSE;

  WF_PULSE gzrf1dtga = INITPULSE;
  WF_PULSE gzrf1dtg = INITPULSE;
  WF_PULSE gzrf1dtgd = INITPULSE;

  WF_PULSE gxkbsdtga = INITPULSE;
  WF_PULSE gxkbsdtg = INITPULSE;
  WF_PULSE gxkbsdtgd = INITPULSE;

  WF_PULSE gz1dtga = INITPULSE;
  WF_PULSE gz1dtg = INITPULSE;
  WF_PULSE gz1dtgd = INITPULSE;


  EXTERN_FILENAME fileloc_rfbdtg =  "bloch_siegert_abs.rho";
  WF_PULSE rfbdtg = INITPULSE;


  EXTERN_FILENAME fileloc_thetarfbdtg =  "bloch_siegert_abs.pha";
  WF_PULSE thetarfbdtg = INITPULSE;

  WF_PULSE gzkbsdtga = INITPULSE;
  WF_PULSE gzkbsdtg = INITPULSE;
  WF_PULSE gzkbsdtgd = INITPULSE;

  WF_PULSE gxwdtga = INITPULSE;
  WF_PULSE gxwdtg = INITPULSE;
  WF_PULSE gxwdtgd = INITPULSE;

  WF_PULSE echo1dtg = INITPULSE;

  WF_PULSE gx2dtga = INITPULSE;
  WF_PULSE gx2dtg = INITPULSE;
  WF_PULSE gx2dtgd = INITPULSE;

  WF_PULSE gy2dtga = INITPULSE;
  WF_PULSE gy2dtg = INITPULSE;
  WF_PULSE gy2dtgd = INITPULSE;

  WF_PULSE gxw2dtga = INITPULSE;
  WF_PULSE gxw2dtg = INITPULSE;
  WF_PULSE gxw2dtgd = INITPULSE;

  WF_PULSE gx1dtga = INITPULSE;
  WF_PULSE gx1dtg = INITPULSE;
  WF_PULSE gx1dtgd = INITPULSE;

  WF_PULSE gy1rdtga = INITPULSE;
  WF_PULSE gy1rdtg = INITPULSE;
  WF_PULSE gy1rdtgd = INITPULSE;

  WF_PULSE gy1dtga = INITPULSE;
  WF_PULSE gy1dtg = INITPULSE;
  WF_PULSE gy1dtgd = INITPULSE;

  WF_PULSE gzkdtga = INITPULSE;
  WF_PULSE gzkdtg = INITPULSE;
  WF_PULSE gzkdtgd = INITPULSE;

  WF_PULSE gxkdtga = INITPULSE;
  WF_PULSE gxkdtg = INITPULSE;
  WF_PULSE gxkdtgd = INITPULSE;

  WF_PULSE attenuator_keydtg = INITPULSE;

  SEQUENCE_ENTRIES  off_seqdtg;
  WF_PULSE seqdtg;
#if defined(HOST_TGT)
  int idx_seqdtg;   /* sequence entry index */
#endif

  WF_PULSE pass_dtg = INITPULSE;

  SEQUENCE_ENTRIES  off_seqpassdtg;
  WF_PULSE seqpassdtg;
#if defined(HOST_TGT)
  int idx_seqpassdtg;   /* sequence entry index */
#endif


  EXTERN_FILENAME fileloc_rf1cal =  "tbw8_01_001_150.rho";
  WF_PULSE rf1cal = INITPULSE;

  WF_PULSE gzrf1cala = INITPULSE;
  WF_PULSE gzrf1cal = INITPULSE;
  WF_PULSE gzrf1cald = INITPULSE;

  WF_PULSE gzcombcala = INITPULSE;
  WF_PULSE gzcombcal = INITPULSE;
  WF_PULSE gzcombcald = INITPULSE;

  WF_PULSE gzprcala = INITPULSE;
  WF_PULSE gzprcal = INITPULSE;
  WF_PULSE gzprcald = INITPULSE;

  WF_PULSE gxwcala = INITPULSE;
  WF_PULSE gxwcal = INITPULSE;
  WF_PULSE gxwcald = INITPULSE;

  WF_PULSE echo1cal = INITPULSE;

  WF_PULSE d3dcal = INITPULSE;

  WF_PULSE gx1cala = INITPULSE;
  WF_PULSE gx1cal = INITPULSE;
  WF_PULSE gx1cald = INITPULSE;

  WF_PULSE gy1cala = INITPULSE;
  WF_PULSE gy1cal = INITPULSE;
  WF_PULSE gy1cald = INITPULSE;

  WF_PULSE gy1rcala = INITPULSE;
  WF_PULSE gy1rcal = INITPULSE;
  WF_PULSE gy1rcald = INITPULSE;

  WF_PULSE attenuator_keycal = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcal;
  WF_PULSE seqcal;
#if defined(HOST_TGT)
  int idx_seqcal;   /* sequence entry index */
#endif

  WF_PULSE d3dpasscal = INITPULSE;

  WF_PULSE pass_pulsecal = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcalpass;
  WF_PULSE seqcalpass;
#if defined(HOST_TGT)
  int idx_seqcalpass;   /* sequence entry index */
#endif


  EXTERN_FILENAME fileloc_rf1coil =  "tbw8_01_001_150.rho";
  WF_PULSE rf1coil = INITPULSE;

  WF_PULSE gzrf1coila = INITPULSE;
  WF_PULSE gzrf1coil = INITPULSE;
  WF_PULSE gzrf1coild = INITPULSE;

  WF_PULSE gzcombcoila = INITPULSE;
  WF_PULSE gzcombcoil = INITPULSE;
  WF_PULSE gzcombcoild = INITPULSE;

  WF_PULSE gzprcoila = INITPULSE;
  WF_PULSE gzprcoil = INITPULSE;
  WF_PULSE gzprcoild = INITPULSE;

  WF_PULSE gxwcoila = INITPULSE;
  WF_PULSE gxwcoil = INITPULSE;
  WF_PULSE gxwcoild = INITPULSE;

  WF_PULSE echo1coil = INITPULSE;

  WF_PULSE d3dcoil = INITPULSE;

  WF_PULSE gx1coila = INITPULSE;
  WF_PULSE gx1coil = INITPULSE;
  WF_PULSE gx1coild = INITPULSE;

  WF_PULSE gy1coila = INITPULSE;
  WF_PULSE gy1coil = INITPULSE;
  WF_PULSE gy1coild = INITPULSE;

  WF_PULSE gy1rcoila = INITPULSE;
  WF_PULSE gy1rcoil = INITPULSE;
  WF_PULSE gy1rcoild = INITPULSE;

  WF_PULSE attenuator_keycoil = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcoil;
  WF_PULSE seqcoil;
#if defined(HOST_TGT)
  int idx_seqcoil;   /* sequence entry index */
#endif

  WF_PULSE d3dpasscoil = INITPULSE;

  WF_PULSE pass_pulsecoil = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcoilpass;
  WF_PULSE seqcoilpass;
#if defined(HOST_TGT)
  int idx_seqcoilpass;   /* sequence entry index */
#endif

  WF_PULSE gycylra = INITPULSE;

  WF_PULSE gzcylra = INITPULSE;

  WF_PULSE rfcylr = INITPULSE;

  WF_PULSE thcylr = INITPULSE;

  WF_PULSE gycylr = INITPULSE;

  WF_PULSE gzcylr = INITPULSE;

  WF_PULSE gzrf1mona = INITPULSE;
  WF_PULSE gzrf1mon  = INITPULSE;
  WF_PULSE gzrf1mond = INITPULSE;
  WF_PULSE rf1mon = INITPULSE;

  WF_PULSE gyrf1mona = INITPULSE;
  WF_PULSE gyrf1mon = INITPULSE;
  WF_PULSE gyrf1mond = INITPULSE;

  WF_PULSE gz1mona = INITPULSE;
  WF_PULSE gz1mon = INITPULSE;
  WF_PULSE gz1mond = INITPULSE;

  WF_PULSE gy1mona = INITPULSE;
  WF_PULSE gy1mon = INITPULSE;
  WF_PULSE gy1mond = INITPULSE;

  WF_PULSE gyrf2mona = INITPULSE;
  WF_PULSE gyrf2mon  = INITPULSE;
  WF_PULSE gyrf2mond = INITPULSE;
  WF_PULSE rf2mon = INITPULSE;

  WF_PULSE gyrf2lmona = INITPULSE;
  WF_PULSE gyrf2lmon = INITPULSE;
  WF_PULSE gyrf2lmond = INITPULSE;

  WF_PULSE gyrf2rmona = INITPULSE;
  WF_PULSE gyrf2rmon = INITPULSE;
  WF_PULSE gyrf2rmond = INITPULSE;

  WF_PULSE gxwmona = INITPULSE;
  WF_PULSE gxwmon = INITPULSE;
  WF_PULSE gxwmond = INITPULSE;

  WF_PULSE gx1mona = INITPULSE;
  WF_PULSE gx1mon = INITPULSE;
  WF_PULSE gx1mond = INITPULSE;

  WF_PULSE gxfcmona = INITPULSE;
  WF_PULSE gxfcmon = INITPULSE;
  WF_PULSE gxfcmond = INITPULSE;

  WF_PULSE echo1mon = INITPULSE;

  WF_PULSE e1entnsmon = INITPULSE;
  short e1entnsmon_pack[4] = {0,SSPOC+DREG,SSPD+DCBL,SSPDS};

  WF_PULSE e1distnsmon = INITPULSE;
  short e1distnsmon_pack[4] = {0,SSPOC+DREG,SSPD,SSPDS};

  WF_PULSE gzkmona = INITPULSE;
  WF_PULSE gzkmon = INITPULSE;
  WF_PULSE gzkmond = INITPULSE;

  SEQUENCE_ENTRIES  off_seqmon;
  WF_PULSE seqmon;
#if defined(HOST_TGT)
  int idx_seqmon;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqmonwait;
  WF_PULSE seqmonwait;
#if defined(HOST_TGT)
  int idx_seqmonwait;   /* sequence entry index */
#endif

  WF_PULSE gycylratipup = INITPULSE;

  WF_PULSE gzcylratipup = INITPULSE;

  WF_PULSE rfcylrtipup = INITPULSE;

  WF_PULSE thcylrtipup = INITPULSE;

  WF_PULSE gycylrtipup = INITPULSE;

  WF_PULSE gzcylrtipup = INITPULSE;

  WF_PULSE gyrfmontipupa = INITPULSE;
  WF_PULSE gyrfmontipup  = INITPULSE;
  WF_PULSE gyrfmontipupd = INITPULSE;
  WF_PULSE rfmontipup = INITPULSE;

  WF_PULSE gzkmontipupa = INITPULSE;
  WF_PULSE gzkmontipup = INITPULSE;
  WF_PULSE gzkmontipupd = INITPULSE;

  SEQUENCE_ENTRIES  off_seqmontipup;
  WF_PULSE seqmontipup;
#if defined(HOST_TGT)
  int idx_seqmontipup;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqloopdelay;
  WF_PULSE seqloopdelay;
#if defined(HOST_TGT)
  int idx_seqloopdelay;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqloopdelay2;
  WF_PULSE seqloopdelay2;
#if defined(HOST_TGT)
  int idx_seqloopdelay2;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqsmartprepdelay;
  WF_PULSE seqsmartprepdelay;
#if defined(HOST_TGT)
  int idx_seqsmartprepdelay;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqnavend;
  WF_PULSE seqnavend;
#if defined(HOST_TGT)
  int idx_seqnavend;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqnavhistdelay;
  WF_PULSE seqnavhistdelay;
#if defined(HOST_TGT)
  int idx_seqnavhistdelay;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqrtpnav;
  WF_PULSE seqrtpnav;
#if defined(HOST_TGT)
  int idx_seqrtpnav;   /* sequence entry index */
#endif
/* Navigator specific */
float test_rtpoint;
float test_rtwin;
float dnav_win_factor = 1.0; /* DISCO region-dependent acceptance window control factor */
int num_trig;
int trigger_detected;    /* flag to indicate trigger detected. */
int trigger_count;       /* number of triggers detected */
int card_trig;
float max_navphase;
float min_navphase;
float ave_navphase;
float navphase_range;  /* NDG: For histogram analysis */
float ref_phase0;
float trig_phase;
float high_limit;
float low_limit;

int hbs_left;
int view_accepted = 0;
int view_rejected = 0;
int hbs_total;
int result=1;            /*nav is accepted*/
int in_limit = 0;        /*nav is within nav acceptance window*/
int nav_quiet_dda;
int nav_active = 1; /*whether to start scan if nav falls within the acceptance window or wait until the next resp cycle*/
int mon_deadtime;
int act_nav_time;

int navmph_cnt = 0;
float nav_currwindow;
float nav_currthresh;
float nav_currcoil;
float nav_prev_window = 0.2;
float nav_prev_thresh = 0.0;
int nav_rrmeas_end_flag = 0;
int nav_stable_flag = -1;
int phaseCompleted = 0; /* For rtp_mode_for_nav_dynaplan*/


#endif /* h_epi2_tgtdecl_h */

