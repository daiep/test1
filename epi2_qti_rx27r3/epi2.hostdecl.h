/*
 *  epi2.hostdecl.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Nov 24 2018
 *  Time : 13:36:59
 */

#ifndef h_epi2_hostdecl_h
#define h_epi2_hostdecl_h

int _cv_revision = 159;












_cvint  _psd_annefact_level = { &psd_annefact_level,  
    -1,    /* flag to ignore selectable reg positions for 3 Plane apps */
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annefact level to be used in auto coil selection algorithm", 
    0, ""
};

_cvint  _rhpsd_annefact_level = { &rhpsd_annefact_level,  
    -1, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annefact level to be used in auto coil selection algorithm", 
    0, ""
};

_cvfloat  _psd_relative_excited_volume_freq = { &psd_relative_excited_volume_freq,  
    -1.0, 
    10.00, 
    -1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative excited volume along frquency encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_excited_volume_phase = { &psd_relative_excited_volume_phase,  
    -1.0, 
    10.00, 
    -1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative excited volume along phase encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_excited_volume_slice = { &psd_relative_excited_volume_slice,  
    -1.0, 
    10.00, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative excited volume along slice comparing to reconstructed volume", 
    0, ""
};


_cvfloat  _psd_relative_encoded_volume_freq = { &psd_relative_encoded_volume_freq,  
    -1.0, 
    10.00, 
    -1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative encoded volume along frquency encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_encoded_volume_phase = { &psd_relative_encoded_volume_phase,  
    -1.0, 
    10.00, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative encoded volume along phase encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_encoded_volume_slice = { &psd_relative_encoded_volume_slice,  
    -1.0, 
    10.00, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative encoded volume along slice comparing to reconstructed volume", 
    0, ""
};

_cvint  _opresearch = { &opresearch,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Research Mode", 
    0, ""
};




_cvfloat  _opweight = { &opweight,  
    0, 
    250, 
    50,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Patient weight in Kg.", 
    0, ""
};





_cvint  _oplandmark = { &oplandmark,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "A valid landmark exists. 0=false, 1=true", 
    0, ""
};

_cvint  _optabent = { &optabent,  
    0, 
    6, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Table Entry:0=Signa System, 1=nMR left, 2=nMR center, 3=nMR right, 4=iMR front, 5=iMR side, 6=iMR vertical.", 
    0, ""
};

_cvint  _opentry = { &opentry,  
    1, 
    10, 
    1,  0, 0, 0, 1, 1, 
    VISONLY,  
    "Patient Entry: 1=Head First, 2=Feet First, 3=Axial Entry, 4=Side Entry, 5=Vertical Entry, 6=Reserved, 7=Head First (+25 degrees), 8=Head First (-25 degrees), 9=Feet First (+25 degrees), 10=Feet First (-25 degrees).", 
    0, ""
};

_cvint  _oppos = { &oppos,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Patient Position: 1=Supine, 2=Prone, 3=Left Decub, 4= Right Decub.", 
    0, ""
};

_cvint  _opplane = { &opplane,  
    1, 
    5, 
    PSD_AXIAL,  0, 0, 0, 1, 1, 
    VIS, 
    "Scan Plane: 1=axial, 2=sagittal, 3=coronal, 4=oblique, 5= 3plane .", 
    0, ""
};

_cvint  _opphysplane = { &opphysplane,  
    1, 
    4, 
    PSD_OBL,  0, 0, 0, 1, 1, 
    VIS, 
    "Physical Gradient Scan Plane: 1=axial, 2=sagittal, 3=coronal, 4=oblique.", 
    0, ""
};

_cvint  _opobplane = { &opobplane,  
    1, 
    3, 
    PSD_AXIAL,  0, 0, 0, 1, 1, 
    INVIS, 
    "Most like plane for obliques.", 
    0, ""
};

_cvint  _opimode = { &opimode,  
    1, 
    6, 
    PSD_2D,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Imaging Mode: 1=2D, 2= 3D, 3=CINE, 4=ANGIO, 5=SPECTRO, 6=3D MULTISLAB.", 
    0, ""
};

_cvint  _oppseq = { &oppseq,  
    1, 
    57, 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Pulse Sequence: SE GE IR SSFP SPGR TOF PC TOFSP PCSP PROBES PROBEP PRESSCSI STEAMCSI FIDCSI ECHOCSI SPINECHO 3PLANELOC.", 
    0, ""
};


_cvint  _opgradmode = { &opgradmode,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = BRM/CRM, 1 = Whole body, 2 = ZOOM", 
    0, "Unknown mode. Options are Whole, Zoom or BRM/CRM"
};


_cvint  _opanatomy = { &opanatomy,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enumerated anatomy selection key", 
0, "" };




_cvint  _piimgoptlist = { &piimgoptlist,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "", 
    0, ""
};

_cvint  _opcgate = { &opcgate,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Gating Flag: 0=No gating, 1=Gating ON, 2=Internally Gated.", 
    0, ""
};

_cvint  _opexor = { &opexor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Exorcist Flag", 
    0, ""
};

_cvint  _opcmon = { &opcmon,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Cardiac Compensation. 0=off, 1=on.", 
    EM_PSD_CMON_PSEQ_INCOMPATIBLE, ""
};

_cvint  _opfcomp = { &opfcomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow Comp Flag", 
    0, ""
};

_cvint  _opgrx = { &opgrx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Graphic Rx: 0=off, 1= on", 
    0, ""
};

_cvint  _opgrxroi = { &opgrxroi,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Graphic ROI: 0=off, 1=on", 
    EM_PSD_OPGRXROI_INCOMPATIBLE, ""
};

_cvint  _opnopwrap = { &opnopwrap,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "No Phase Wrap. 0=off, 1=on.", 
    0, ""
};

_cvint  _opptsize = { &opptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    VISONLY, 
    "2=16 bit data, 4=32 bit data.", 
    0, ""
};

_cvint  _oppomp = { &oppomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=no pomp, 1=pomp", 
    0, ""
};

_cvint  _opscic = { &opscic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "surface coil intensity correction: 1 if enabled.", 
    0, ""
};

_cvint  _oprect = { &oprect,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=No rect. scan, 1=rect. scan.", 
    0, ""
};

_cvint  _opsquare = { &opsquare,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=No square pixel scan, 1=square pixel scan", 
    0, ""
};

_cvint  _opvbw = { &opvbw,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Variable Bandwidth Option.", 
    0, ""
};

_cvint  _opblim = { &opblim,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=new memp,1=classic", 
    0, ""
};

_cvint  _opfast = { &opfast,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FAST sequence selection: 0=off, 1=on", 
    EM_PSD_OPFAST_INCOMPATIBLE, ""
};

_cvint  _opcs = { &opcs,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Improved RF pulse switch: 0=off, 1=on.", 
    EM_PSD_CS_2D_SPIN_ECHO_ONLY, ""
};

_cvint  _opdeprep = { &opdeprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "DE prep pulses: 0=off, 1=on", 
    EM_PSD_OPDEPREP_INCOMPATIBLE, ""
};

_cvint  _opirprep = { &opirprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "IR prep pulses: 0=off, 1=on", 
    EM_PSD_OPIRPREP_INCOMPATIBLE, ""
};

_cvint  _opsrprep = { &opsrprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Saturation prep pulse: 0=off, 1=on", 
    0, ""
};

_cvint  _opmph = { &opmph,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Multi-phase acq: 0=off, 1=on", 
    EM_PSD_OPMPH_INCOMPATIBLE, ""
};

_cvint  _opdynaplan = { &opdynaplan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: 0=off, 1=on", 
    0, "Dynamic Plan option is not available with this PSD."
};

_cvint  _opdynaplan_mask_phase = { &opdynaplan_mask_phase,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: Mask Phase Flag", 
0, "" };


_cvint  _opbsp = { &opbsp,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "2/3 IR Blood Suppression.", 
    EM_PSD_BSP_INCOMPATIBLE, ""
};

_cvint  _oprealtime = { &oprealtime,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Realtime Interactive Scanning Option.", 
    EM_PSD_RTIA_REALTIME_NOT_AVAILABLE, ""
};

_cvint  _opfluorotrigger = { &opfluorotrigger,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FTMRA Scanning Option.", 
    EM_PSD_FTMRA_NOT_AVAILABLE, ""
};

_cvint  _opET = { &opET,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Echotrain imaging Option.", 
    EM_PSD_ECHOTRAIN_NOT_AVAILABLE, ""
};

_cvint  _opmultistation = { &opmultistation,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The multi station button input from scan", 
    EM_PSD_MULTISTATION_INCOMPATIBLE, ""
};

_cvint  _opepi = { &opepi,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI flag: 0=off, 1=on.", 
    EM_PSD_EPI_INCOMPATIBLE, ""
};

_cvint  _opflair = { &opflair,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inversion Group Type, 0 = Single, 1 = Group, 2 = Interleaved", 
    0, ""
};

_cvint  _opt1flair = { &opt1flair,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "t1flair operatorIF flag, 0 = OFF, 1 = ON", 
    0, ""
};

_cvint  _opt2flair = { &opt2flair,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "t2flair operatorIF flag, 0 = OFF, 1 = ON", 
    0, ""
};

_cvint  _opdoubleir = { &opdoubleir,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Double Inversion Recovery flag, 0=Off, 1=On", 
    0, ""
};

_cvint  _optissuet1 = { &optissuet1,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tissue or T1 to suppress, otherwise valid T1 value", 
    0, ""
};

_cvint  _opautotissuet1 = { &opautotissuet1,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for auto tissue type to suppress in DIR", 
    0, ""
};

_cvint  _optlrdrf = { &optlrdrf,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tailored RF flag: 0=off, 1=on.", 
    EM_PSD_TLRDRF_INCOMPATIBLE, ""
};

_cvint  _opfulltrain = { &opfulltrain,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = split train, 1 = full train", 
    EM_PSD_FULL_ECHO_TRAIN_NOT_SUPPORTED, ""
};

_cvint  _opirmode = { &opirmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Type of IR or GRASS/MPGR", 
    0, ""
};

_cvint  _opmt = { &opmt,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Magnetization Transfer selection: 0=off, 1=on", 
    EM_PSD_MT_INCOMPATIBLE, ""
};

_cvint  _opzip512 = { &opzip512,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "512 In-plane Zero Interpolation Padding: 0=off, 1=on", 
    EM_PSD_NO_512_ZIP, ""
};

_cvint  _opzip1024 = { &opzip1024,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1024 In-plane Zero Interpolation Padding: 0=off, 1=on", 
    EM_PSD_NO_1024_ZIP, ""
};

_cvint  _opslzip2 = { &opslzip2,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Zero Interpolation Padding x 2: 0=off, 1=on", 
    EM_PSD_ZIP2_ONLY_3D_GE_ANDTOF_COMPATIBLE, ""
};

_cvint  _opslzip4 = { &opslzip4,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Zero Interpolation Padding x 4: 0=off, 1=on", 
    EM_PSD_ZIP4_ONLY_3D_GE_ANDTOF_COMPATIBLE, ""
};

_cvint  _opsmartprep = { &opsmartprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Smartprep. 0=off, 1=on.", 
    EM_PSD_SMARTPREP_ONLY_ONE_COMPATIBLE, ""
};

_cvint  _opssrf = { &opssrf,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spectral-spatial RF", 
    EM_PSD_SSRF_NOT_AVAILABLE, ""
};

_cvint  _opt2prep = { &opt2prep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2 Prep", 
    EM_PSD_T2PREP_NOT_AVAILABLE, ""
};

_cvint  _opspiral = { &opspiral,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spiral flag: 0=off, 1=on.", 
    EM_PSD_SPIRAL_INCOMPATIBLE, ""
};

_cvint  _opnav = { &opnav,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator flag: 0=off, 1=on", 
    EM_PSD_NAVS_INCOMPATIBLE, ""
};

_cvint  _opfmri = { &opfmri,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fMRI: 0=off, 1=on", 
    EM_PSD_FMRI_INCOMPATIBLE, ""
};


_cvint  _opectricks = { &opectricks,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ECTRICKS mode: 0=off,1=ON", 
    0, ""
};

_cvint  _optricksdel = { &optricksdel,  
    0000, 
    30000000, 
    1000000,  0, 0, 0, 1, 1, 
    VIS,  
    "Tricks Delay(ms) after Mask Acq.", 
0, "" };

_cvint  _optrickspause = { &optrickspause,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "TRICKS Pause after Mask: 0=off,1=ON", 
0, "" };

_cvint  _opfr = { &opfr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for Fast Recovery selection ", 
    0, ""
};

_cvint  _opcube = { &opcube,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for Cube", 
    0, ""
};

_cvint  _ophydro = { &ophydro,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for MRCP or Hydro Image Option", 
    0, ""
};


_cvint  _opphasecycle = { &opphasecycle,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for phase cycling selection ", 
    0, ""
};

_cvint  _oplava = { &oplava,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "LAVA App.", 
    0, "" 
};

_cvint  _op3dcine_fiesta = { &op3dcine_fiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fiesta 3dcine App.", 
    0, ""
};

_cvint  _op3dcine_spgr = { &op3dcine_spgr,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SPGR 3dcine App.", 
    0, ""
};

_cvint  _op4dflow = { &op4dflow,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "4dflow App.", 
    0, ""
};

_cvint  _opbrava = { &opbrava,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "BRAVA App.", 
    0, "" 
};

_cvint  _opcosmic = { &opcosmic,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "COSMIC App.", 
    0, ""
};

_cvint  _opvibrant = { &opvibrant,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT App.", 
    0, "" 
};


_cvint  _opbravo = { &opbravo,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "BRAVO App.", 
    0, ""
};

_cvint  _opdisco = { &opdisco,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "DISCO App.", 
    0, ""
};

_cvint  _opmprage = { &opmprage,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MP-RAGE App.", 
    0, ""
};


_cvint  _oppromo = { &oppromo,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PROMO App.", 
    0, "" 
};

_cvint  _opprop = { &opprop,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "On(=1) Flag for propeller scan", 
    0, ""
};

_cvint  _opdwprop = { &opdwprop,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "On(=1) Flag for dw-propeller scan", 
    0, ""
};

_cvint  _opdwpropduo = { &opdwpropduo,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "On(=1) Flag for dw-propeller DUO mode", 
    0, ""
};

_cvint  _opmuse = { &opmuse,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "MUSE App.", 
    0, ""
};

_cvint  _opallowedrescantime = { &opallowedrescantime,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PROMO rescan time in seconds", 
    0, "" 
};

_cvint  _opbreastmrs = { &opbreastmrs,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Breast MRS", 
    0, ""
};

_cvint  _opjrmode = { &opjrmode,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "J-Resolved Spectroscopy Mode", 
    0, ""
};

_cvint  _opssfse = { &opssfse,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Single Shot FSE flag, (0)off, (1)on", 
    EM_PSD_SINGLE_SHOT_INCOMPATIBLE, ""
};

_cvint  _t1flair_flag = { &t1flair_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "On(=1) Flag for t1flair scan", 
    0, ""
};







_cvint  _opphsen = { &opphsen,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Sensitive Image Reconstruction: 0 = Disable, 1 = Enable", 
    EM_PSD_PHASESENSITIVE_INCOMPATIBLE, ""
};

_cvint  _opbc = { &opbc,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Blurring cancellation", 
    0, "Blurring cancellation is available only with FSE, FIR or FLIAR."
};

_cvint  _opfatwater = { &opfatwater,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fat water imaging control flag.", 
    0, "Single Quadrature fat/water imaging is not available for this PSD."
};

_cvint  _oprtbc = { &oprtbc,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for real time blurring cancellation.", 
    0, "Real Time Blurring Cancellation is not available for this PSD."
};

_cvint  _opnseg = { &opnseg,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of segment for Rapid Frame Acquisition", 
    0, ""
};

_cvint  _opnnex = { &opnnex,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "option flag for new nex ordering", 
    0, "Advanced NEX is not available for this PSD."
};

_cvint  _opsilent = { &opsilent,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent Mode, 0 = Off, 1 = On", 
    0, ""
};

_cvint  _opsilentlevel = { &opsilentlevel,  
    1, 
    3, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent Level, 1 = Medium, 2 = High, 3 = Single Mode", 
    0, ""
};

_cvint  _opmerge = { &opmerge,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for 2D/3D MERGE", 
    0, ""
};

_cvint  _opswan = { &opswan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for 3D SWAN", 
    0, ""
};

_cvint  _opphaseimage = { &opphaseimage,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Image", 
    0, ""
};

_cvint  _opdixon = { &opdixon,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dixon imaging option", 
    0, ""
};













_cvint  _opdixproc = { &opdixproc,  
    0, 
    255, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for choice of images to be reconstructed by IDEAL processing", 
    0, ""
};

_cvint  _opmedal = { &opmedal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL App.", 
    0, ""
};

_cvint  _opquickstep = { &opquickstep,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "QuickSTEP App.", 
    0, ""
};

_cvint  _opidealiq = { &opidealiq,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "IDEAL IQ App.", 
    0, ""
};

_cvint  _opsilentmr = { &opsilentmr,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Silent MR Flag", 
    0, ""
};

_cvint  _opmagic = { &opmagic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAGiC App.", 
    0, ""
};




_cvfloat  _opzoom_fov_xy = { &opzoom_fov_xy,  
    240.0, 
    480.0, 
    440.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful FOV in XY (mm)", 
    0, ""
};

_cvfloat  _opzoom_fov_z = { &opzoom_fov_z,  
    240.0, 
    480.0, 
    350.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful FOV in Z (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_ax = { &opzoom_dist_ax,  
    0.0, 
    350.0, 
    120.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful axial off-center (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_cor = { &opzoom_dist_cor,  
    0.0, 
    350.0, 
    120.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful coronal off-center (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_sag = { &opzoom_dist_sag,  
    0.0, 
    350.0, 
    150.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful sagittal off-center (mm)", 
    0, ""
};

_cvint  _app_grad_type = { &app_grad_type,  
    0, 
    100, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = app. for WB and ZM grad, 1= for WB only, 2 = for ZM only", 
    0, ""
};

_cvint  _opzoom_coil_ind = { &opzoom_coil_ind,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0= coil may be used with any grad mode, 1= coil use with zoom grad mode is restricted", 
    0, ""
};

_cvint  _pizoom_index = { &pizoom_index,  
    -1, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "index for advisory message with ZM gradient", 
    0, ""
};





_cvint  _opsat = { &opsat,  0, 1, 0,  0, 0, 0, 1, 1,  VISONLY, 
		      "Saturation switch: 0=off, 1=on.", 0, "" };

_cvint  _opsatx = { &opsatx,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical X direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvint  _opsaty = { &opsaty,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical Y direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvint  _opsatz = { &opsatz,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical Z direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvfloat  _opsatxloc1 = { &opsatxloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified right sat location in mm.", 
    0, ""
};

_cvfloat  _opsatxloc2 = { &opsatxloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified left sat location in mm.", 
    0, ""
};

_cvfloat  _opsatyloc1 = { &opsatyloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified anterior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatyloc2 = { &opsatyloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified posterior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatzloc1 = { &opsatzloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified superior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatzloc2 = { &opsatzloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified inferior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatxthick = { &opsatxthick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical X Sat thickness.", 
    0, ""
};

_cvfloat  _opsatythick = { &opsatythick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical Y Sat thickness.", 
    0, ""
};

_cvfloat  _opsatzthick = { &opsatzthick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical Z Sat thickness.", 
    0, ""
};

_cvint  _opsatmask = { &opsatmask,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for SAT in the FOV.", 
    0, ""
};

_cvint  _opfat = { &opfat,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Fat pre-saturation: 0=off,1=on.", 
    0, ""
};

_cvint  _opwater = { &opwater,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Water pre-saturation: 0=off,1=on.", 
    0, ""
};

_cvint  _opccsat = { &opccsat,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if concat sat is on", 
    0, ""
};

_cvint  _opfatcl = { &opfatcl,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating classic Fat Sat selection.",  
0, "" };


_cvint  _opspecir = { &opspecir,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating SPECIAL technique selection.",  
0, "" };




_cvint  _opexsatmask = { &opexsatmask,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask, for explicit sat bands.", 
    0, ""
};

_cvfloat  _opexsathick1 = { &opexsathick1,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 1", 
    0, ""
};

_cvfloat  _opexsathick2 = { &opexsathick2,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 2", 
    0, ""
};

_cvfloat  _opexsathick3 = { &opexsathick3,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 3", 
    0, ""
};

_cvfloat  _opexsathick4 = { &opexsathick4,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 4", 
    0, ""
};

_cvfloat  _opexsathick5 = { &opexsathick5,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 5", 
    0, ""
};

_cvfloat  _opexsathick6 = { &opexsathick6,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 6", 
    0, ""
};

_cvfloat  _opexsatloc1 = { &opexsatloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 1", 
    0, ""
};

_cvfloat  _opexsatloc2 = { &opexsatloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 2", 
    0, ""
};

_cvfloat  _opexsatloc3 = { &opexsatloc3,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 3", 
    0, ""
};

_cvfloat  _opexsatloc4 = { &opexsatloc4,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 4", 
    0, ""
};

_cvfloat  _opexsatloc5 = { &opexsatloc5,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 5", 
    0, ""
};

_cvfloat  _opexsatloc6 = { &opexsatloc6,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 6", 
    0, ""
};

_cvint  _opexsatparal = { &opexsatparal,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask to communicate parallel explicit sat bands.", 
    0, ""
};





_cvint  _opexsatoff1 = { &opexsatoff1,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 1.", 
    0, ""
};

_cvint  _opexsatoff2 = { &opexsatoff2,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 2.", 
    0, ""
};

_cvint  _opexsatoff3 = { &opexsatoff3,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 3.", 
    0, ""
};

_cvint  _opexsatoff4 = { &opexsatoff4,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 4.", 
    0, ""
};

_cvint  _opexsatoff5 = { &opexsatoff5,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 5.", 
    0, ""
};

_cvint  _opexsatoff6 = { &opexsatoff6,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 6.", 
    0, ""
};

_cvint  _opexsatlen1 = { &opexsatlen1,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 1.", 
    0, ""
};

_cvint  _opexsatlen2 = { &opexsatlen2,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 2.", 
    0, ""
};

_cvint  _opexsatlen3 = { &opexsatlen3,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 3.", 
    0, ""
};

_cvint  _opexsatlen4 = { &opexsatlen4,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 4.", 
    0, ""
};

_cvint  _opexsatlen5 = { &opexsatlen5,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 5.", 
    0, ""
};

_cvint  _opexsatlen6 = { &opexsatlen6,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 6.", 
    0, ""
};



_cvfloat  _opdfsathick1 = { &opdfsathick1,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 1 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick2 = { &opdfsathick2,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 2 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick3 = { &opdfsathick3,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 3 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick4 = { &opdfsathick4,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 4 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick5 = { &opdfsathick5,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 5 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick6 = { &opdfsathick6,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 6 thickness in mm.", 
    0, ""
};













_cvfloat  _exsat1_normth_R = { &exsat1_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_normth_A = { &exsat1_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_normth_S = { &exsat1_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_R = { &exsat2_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_A = { &exsat2_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_S = { &exsat2_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_R = { &exsat3_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_A = { &exsat3_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_S = { &exsat3_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_R = { &exsat4_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_A = { &exsat4_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_S = { &exsat4_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_R = { &exsat5_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_A = { &exsat5_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_S = { &exsat5_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_R = { &exsat6_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_A = { &exsat6_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_S = { &exsat6_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_dist = { &exsat1_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_dist = { &exsat2_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_dist = { &exsat3_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_dist = { &exsat4_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_dist = { &exsat5_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_dist = { &exsat6_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pigirscrn = { &pigirscrn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piautoirbands = { &piautoirbands, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pigirdefthick = { &pigirdefthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pinumgir = { &pinumgir,  
    1, 
    MAX_NUM_GIR, 
    MAX_NUM_GIR,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Allowed Graphic IR Bands", 
0, "" };

_cvint  _opnumgir = { &opnumgir,  
    0, 
    MAX_NUM_GIR, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Graphic IR Bands", 
0, "" };

_cvint  _pigirmode = { &pigirmode,  
    1, 
    3, 
    3,  0, 0, 0, 1, 1, 
    INVIS, 
    "1:Manual IR Band Only, 2:Auto IR Band Only, 3: Both Manual and Auto IR Bands", 
0, "" };

_cvint  _opgirmode = { &opgirmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0:Manual IR Band, 1:Auto IR Band", 
0, "" };


_cvint  _optagging = { &optagging,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Tagging (0=None, 1=Stripe, 2=Grid)", 
    EM_PSD_TAG_INCOMPATIBLE, ""
};

_cvint  _optagspc = { &optagspc,  
    0, 
    1024, 
    7,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Tagging spacing/separation (pixels)", 
0, "" };







_cvfloat  _optagangle = { &optagangle,  
    -180.0, 
     180.0, 
     45.0,  0, 0, 0, 1, 1, 
     VIS, 
     "TAGGING orientation angle", 
0, "" };





_cvfloat  _opvenc = { &opvenc,  
    5.0, 
    5500, 
    50.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Velocity Encode in mm/sec", 
0, "" };

_cvint  _opflaxx = { &opflaxx,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "X grad flow encode", 
0, "" };

_cvint  _opflaxy = { &opflaxy,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Y grad flow encode", 
0, "" };

_cvint  _opflaxz = { &opflaxz,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Z grad flow encode", 
0, "" };

_cvint  _opflaxall = { &opflaxall,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "all axises encoded", 
0, "" };

_cvint  _opproject = { &opproject,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of projection image", 
0, "" };

_cvint  _opcollapse = { &opcollapse,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along slice axis, 0: Dont.", 
0, "" };

_cvint  _oprlflow = { &oprlflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Right-Left flow images, 0: Dont.", 
0, "" };

_cvint  _opapflow = { &opapflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Anterior-Posterior flow images, 0: Dont.", 
0, "" };

_cvint  _opsiflow = { &opsiflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Superior-Inferior flow images, 0: Dont.", 
0, "" };

_cvint  _opmagc = { &opmagc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of magnitude images, 0: Dont.", 
0, "" };

_cvint  _opflrecon = { &opflrecon,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flow recon type.", 
0, "" };

_cvint  _oprampdir = { &oprampdir,  
    -1, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Direction of the slab excitation ramp pulse. -1: negative ramp, 0: non-ramp, 1: positive ramp", 
0, "" };

_cvint  _project = { &project,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of projection image", 
0, "" };

_cvint  _vas_ovrhd = { &vas_ovrhd,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Vascular collapse memory overhead", 
0, "" };

_cvint  _slice_col = { &slice_col,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along slice axis, 0: Dont.", 
0, "" };

_cvint  _phase_col = { &phase_col,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along phase axis, 0: Dont.", 
0, "" };

_cvint  _read_col = { &read_col,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along readout axis, 0: Dont.", 
0, "" };

_cvint  _mag_mask = { &mag_mask,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Use magnitude weighting mask, 0: Dont use.", 
0, "" };

_cvint  _phase_cor = { &phase_cor,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Phase correction enabled 0: No phase correction.", 
0, "" };

_cvint  _extras = { &extras,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Enable mag. and indiv. axis images, 0: Dont.", 
0, "" };

_cvint  _mag_create = { &mag_create,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of magnitude images, 0: Dont.", 
0, "" };

_cvint  _rl_flow = { &rl_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Right-Left flow images, 0: Dont.", 
0, "" };

_cvint  _ap_flow = { &ap_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Anterior-Posterior flow images, 0: Dont.", 
0, "" };

_cvint  _si_flow = { &si_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Superior-Inferior flow images, 0: Dont.", 
0, "" };

_cvint  _imagenum = { &imagenum,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of images per slice", 
0, "" };

_cvint  _motsa_ovrhd = { &motsa_ovrhd,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "motsa memory overhead for intermediate storage of overlap images", 
0, "" };

_cvint  _opslinky = { &opslinky,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: SLINKY acquistion, 0: Non-SLINKY acq.", 
0, "" };

_cvint  _opinhance = { &opinhance,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for Inherence enhancement features", 
    0, ""
};

_cvint  _opmavric = { &opmavric,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for MAVRIC-SL features", 
    0, ""
};

_cvint  _opinhsflow = { &opinhsflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for Inhance Spinflow features", 
    0, ""
};

_cvint  _opmsde = { &opmsde,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MSDE Flag", 
0, "" };

_cvfloat  _opvest = { &opvest,  
    20.0, 
    100.0, 
    50.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Velocity Suppress Target in mm/sec", 
0, "" };

_cvint  _opmsdeaxx = { &opmsdeaxx,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X grad MSDE", 
0, "" };

_cvint  _opmsdeaxy = { &opmsdeaxy,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Y grad MSDE", 
0, "" };

_cvint  _opmsdeaxz = { &opmsdeaxz,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z grad MSDE", 
0, "" };


_cvint  _opbreathhold = { &opbreathhold,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Breath-hold input from scn: 0-None, 1-Expiration, 2-Inspiration, 3-Mid..", 
0, "" };





_cvint  _opautosubtract = { &opautosubtract,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to indicate if Auto Subtraction is on or off ", 
    0, ""
};

_cvint  _opsepseries = { &opsepseries,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to indicate if Separate Series is on or off ", 
    0, ""
};




_cvint  _pititle = { &pititle,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "User Page Title", 0, "" };
_cvfloat  _opuser0 = { &opuser0,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  0", 0, "" };
_cvfloat  _opuser1 = { &opuser1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  1", 0, "" };
_cvfloat  _opuser2 = { &opuser2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  2", 0, "" };
_cvfloat  _opuser3 = { &opuser3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  3", 0, "" };
_cvfloat  _opuser4 = { &opuser4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  4", 0, "" };
_cvfloat  _opuser5 = { &opuser5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  5", 0, "" };
_cvfloat  _opuser6 = { &opuser6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  6", 0, "" };
_cvfloat  _opuser7 = { &opuser7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  7", 0, "" };
_cvfloat  _opuser8 = { &opuser8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  8", 0, "" };
_cvfloat  _opuser9 = { &opuser9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  9", 0, "" };
_cvfloat  _opuser10 = { &opuser10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 10", 0, "" };
_cvfloat  _opuser11 = { &opuser11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 11", 0, "" };
_cvfloat  _opuser12 = { &opuser12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 12", 0, "" };
_cvfloat  _opuser13 = { &opuser13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 13", 0, "" };
_cvfloat  _opuser14 = { &opuser14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 14", 0, "" };
_cvfloat  _opuser15 = { &opuser15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 15", 0, "" };
_cvfloat  _opuser16 = { &opuser16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 16", 0, "" };
_cvfloat  _opuser17 = { &opuser17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 17", 0, "" };
_cvfloat  _opuser18 = { &opuser18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 18", 0, "" };
_cvfloat  _opuser19 = { &opuser19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 19", 0, "" };
_cvfloat  _opuser20 = { &opuser20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 20", 0, "" };
_cvfloat  _opuser21 = { &opuser21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 21", 0, "" };
_cvfloat  _opuser22 = { &opuser22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 22", 0, "" };
_cvfloat  _opuser23 = { &opuser23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 23", 0, "" };
_cvfloat  _opuser24 = { &opuser24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 24", 0, "" };
_cvfloat  _opuser25 = { &opuser25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 25", 0, "" };
_cvfloat  _opuser26 = { &opuser26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 26", 0, "" };
_cvfloat  _opuser27 = { &opuser27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 27", 0, "" };
_cvfloat  _opuser28 = { &opuser28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 28", 0, "" };
_cvfloat  _opuser29 = { &opuser29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 29", 0, "" };
_cvfloat  _opuser30 = { &opuser30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 30", 0, "" };
_cvfloat  _opuser31 = { &opuser31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 31", 0, "" };
_cvfloat  _opuser32 = { &opuser32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 32", 0, "" };
_cvfloat  _opuser33 = { &opuser33,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 33", 0, "" };
_cvfloat  _opuser34 = { &opuser34,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 34", 0, "" };
_cvfloat  _opuser35 = { &opuser35,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 35", 0, "" };

_cvfloat  _opuser36 = { &opuser36,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 36", 0, "" };
_cvfloat  _opuser37 = { &opuser37,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 37", 0, "" };
_cvfloat  _opuser38 = { &opuser38,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 38", 0, "" };
_cvfloat  _opuser39 = { &opuser39,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 39", 0, "" };
_cvfloat  _opuser40 = { &opuser40,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 40", 0, "" };
_cvfloat  _opuser41 = { &opuser41,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 41", 0, "" };
_cvfloat  _opuser42 = { &opuser42,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 42", 0, "" };
_cvfloat  _opuser43 = { &opuser43,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 43", 0, "" };
_cvfloat  _opuser44 = { &opuser44,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 44", 0, "" };
_cvfloat  _opuser45 = { &opuser45,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 45", 0, "" };
_cvfloat  _opuser46 = { &opuser46,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 46", 0, "" };
_cvfloat  _opuser47 = { &opuser47,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 47", 0, "" };
_cvfloat  _opuser48 = { &opuser48,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 48", 0, "" };





_cvint  _opnostations = { &opnostations,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "The total number of stations for the current meta-series", 
0, "" };

_cvint  _opstation = { &opstation,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "The current station number", 
0, "" };

_cvint  _oploadprotocol = { &oploadprotocol,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "This Multistation series is loaded from saved Protocol", 
0, "" };

_cvint  _opmask = { &opmask,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicated mask series", 
0, "" };

_cvint  _opvenous = { &opvenous,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicated venous series", 
0, "" };


_cvint  _opprotRxMode = { &opprotRxMode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Scan Mode, 1 = Protocol Mode", 
0, "" };





_cvint  _opacqo = { &opacqo,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Acq. mode: 0=interleaved, 1=sequential, 2=rapidframe", 
0, "" };

_cvint  _opfphases = { &opfphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Images per location in a FAST scan, range between 1 and 512", 
0, "" };

_cvint  _opsldelay = { &opsldelay,  
    50000, 
    20000000, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Delay(ms) after acq.", 
0, "" };

_cvint  _avminsldelay = { &avminsldelay,  
    0, 
    20000000, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum Delay after acq.", 
0, "" };


_cvint  _optphases = { &optphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Temporal Output Phases for Ectricks 1 and 512", 
0, "" };

_cvint  _opdynaplan_nphases = { &opdynaplan_nphases,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: number of temporal phases", 
0, "" };

_cvint  _opvsphases = { &opvsphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Wash-in Phases for DISCO with DynaPlan", 
0, "" };





_cvint  _opdiffuse = { &opdiffuse,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion,0=off,1=on", 
    EM_PSD_DIFF_INCOMPATIBLE, ""
};

_cvint  _opsavedf = { &opsavedf,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1=T2,Comb,2=T2,Diff,Comb", 
0, "" };

_cvint  _opmintedif = { &opmintedif,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimize Diffusion Timing", 
0, "" };

_cvint  _opseparatesynb = { &opseparatesynb,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Separate Series for Synthetic DWI", 
0, "" };

_cvint  _opdfaxx = { &opdfaxx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxy = { &opdfaxy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxz = { &opdfaxz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxall = { &opdfaxall, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxtetra = { &opdfaxtetra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfax3in1 = { &opdfax3in1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _opbval = { &opbval,  
    0, 
    1000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "B Value for Diffusion", 
0, "" };

_cvint  _opnumbvals = { &opnumbvals,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion b values", 
0, "" };

_cvint  _opautonumbvals = { &opautonumbvals,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto # b-values", 
0, "" };

_cvint  _opnumsynbvals = { &opnumsynbvals,  
    MIN_NUM_SYNBVALS, 
    MAX_NUM_SYNBVALS, 
    MIN_NUM_SYNBVALS,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Synthetic b values", 
0, "" };

_cvfloat  _opdifnext2 = { &opdifnext2,  
    0, 
    MAXFLOAT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of excitations for diffusion T2 image", 
0, "" };

_cvint  _opautodifnext2 = { &opautodifnext2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto NEX for T2", 
0, "" };

_cvint  _optensor = { &optensor,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TENSOR", 
0, "" };

_cvint  _opdifnumdirs = { &opdifnumdirs,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion directions", 
0, "" };

_cvint  _opdifnumt2 = { &opdifnumt2,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of T2 images", 
0, "" };

_cvint  _opautodifnumt2 = { &opautodifnumt2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto # of T2 Images", 
0, "" };

_cvint  _opdualspinecho = { &opdualspinecho,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Dual Spin Echo: Off=0, On=1", 
0, "" };

_cvint  _opdifproctype = { &opdifproctype,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion Tensor Automated Processing bitmask", 
0, "" };

_cvint  _opdifnumbvalues = { &opdifnumbvalues,  
    1, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of b values", 
0, "" };

_cvint  _dti_plus_flag = { &dti_plus_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "DTI+ Flag", 
0, "" };




_cvint  _optouch = { &optouch,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH App.", 
    0, ""
};

_cvint  _optouchfreq = { &optouchfreq,  
    20, 
    5000, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Frequency", 
0, "" };

_cvint  _optouchmegfreq = { &optouchmegfreq,  
    20, 
    5000, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Motion Encoding Gradient Frequency", 
0, "" };

_cvint  _optouchamp = { &optouchamp,  
    0, 
    100, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Amplitude", 
0, "" };

_cvint  _optouchtphases = { &optouchtphases,  
    4, 
    128, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Temporal Phases", 
0, "" };

_cvint  _optouchcyc = { &optouchcyc,  
    0, 
    5000, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Cycles per Trigger", 
0, "" };

_cvint  _optouchax = { &optouchax,  
    1, 
    7, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH MEG Direction: 1-X, 2-Y, 4-Z, 7-ALL", 
0, "" };




_cvint  _opaslprep = { &opaslprep,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASL Prep flag: 0=OFF, 1=ON.", 
    0, ""
};




_cvint  _opasl = { &opasl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3dASL flag: 0=off, 1=on.", 
    0, ""
};

_cvfloat  _oppostlabeldelay = { &oppostlabeldelay,  
    0.0, 
    5000.0, 
    1525.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Post label delay for ASL in msec", 
    0, ""
};

_cvint  _rhchannel_combine_method = { &rhchannel_combine_method,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Channel combination method",  
    0, ""
};

_cvint  _rhasl_perf_weighted_scale = { &rhasl_perf_weighted_scale,  
    1, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS,  
    "Scaling factor applied to ASL perfusion weighted images",  
    0, ""
};




_cvfloat  _cfslew_artmedium = { &cfslew_artmedium,  
    1.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium ART mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_artmedium = { &cfgmax_artmedium,  
    1.0, 
    5.0, 
    3.3,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium ART mode gmax in G/cm", 
0, "" };

_cvfloat  _cfslew_arthigh = { &cfslew_arthigh,  
    1.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "High ART  mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_arthigh = { &cfgmax_arthigh,  
    1.0, 
    5.0, 
    3.3,  0, 0, 0, 1, 1, 
    VIS, 
    "High ART  mode gmax in G/cm", 
0, "" };

_cvint  _cfnumartlevels = { &cfnumartlevels,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ART levels; 0-None; 1-One level; 2-Two levels", 
0, "" };

_cvint  _pinumartlevels = { &pinumartlevels,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UI control to support multiple ART levels ", 
0, "" };


_cvfloat  _cfslew_artmediumopt = { &cfslew_artmediumopt,  
    1.0, 
    20.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium optimal ART mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_artmediumopt = { &cfgmax_artmediumopt,  
    1.0, 
    5.0, 
    2.2,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium optimal ART mode gmax in G/cm", 
0, "" };




_cvint  _oprep_active = { &oprep_active,  
    1, 
    128, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Active Repetitions", 
0, "" };

_cvint  _oprep_rest = { &oprep_rest,  
    1, 
    128, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Rest Repetitions", 
0, "" };

_cvint  _opdda = { &opdda,  
    0, 
    50, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Dummy Acquisitions", 
0, "" };

_cvint  _opinit_state = { &opinit_state,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Initial State", 
0, "" };

_cvint  _opfMRIPDTYPE = { &opfMRIPDTYPE,  
    SIMPLE_BLOCK, 
    EVENT_RELATED, 
    SIMPLE_BLOCK,  0, 0, 0, 1, 1, 
    VIS, 
    "fMRI paradigm type", 
0, "" };

_cvint  _opview_order = { &opview_order,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "View Order 1=Bottom/Up 0=Top/Down", 
0, "" };

_cvint  _opslice_order = { &opslice_order,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Order 0=Sequential 1=Interleaved", 
0, "" };

_cvint  _oppsd_trig = { &oppsd_trig,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Trigger Type", 
0, "" };

_cvint  _oppdgm_str = { &oppdgm_str,  
    -1, 
    50, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Paradigm String", 
0, "" };

_cvint  _opbwrt = { &opbwrt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Brain Wave Real Time", 
0, "" };

_cvint  _cont_flag = { &cont_flag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Acq. mode, 0=normscan, 1=contscan.", 
0, "" };






_cvint  _opautonecho = { &opautonecho,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto No of Echoes", 
0, "" };

_cvint  _opnecho = { &opnecho,  
    NECHO_MIN, 
    PSD_NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of echoes", 
    0, "opnecho out of range"
};

_cvint  _opnshots = { &opnshots,  
    1, 
    1024, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of shots", 
0, "" };

_cvint  _opautote = { &opautote,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Min TE mode", 
0, "" };

_cvint  _opte = { &opte,  
    TE_MIN, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo time", 
0, "" };

_cvint  _opte2 = { &opte2,  
    TE2_MIN, 
    TE_MAX, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time for second echo", 
0, "" };


_cvint  _optefw = { &optefw,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "TE selection: 0 = Minimum TE, 1 = Fat/Water in phase, 2 = Fat/Water out of phase.", 
0, "" };

_cvint  _opti = { &opti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Inversion time", 
0, "" };

_cvint  _opbspti = { &opbspti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "2/3 IR Blood Suppression TI.", 
    EM_PSD_BSP_INCOMPATIBLE, ""
};

_cvint  _opautoti = { &opautoti,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto TI mode", 
0, "" };

_cvint  _opautobti = { &opautobti,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto BSP TI mode", 
0, "" };

_cvint  _optrecovery = { &optrecovery,  
    TRECOVERY_MIN, 
    TRECOVERY_MAX, 
    TRECOVERY_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Recovery time", 
0, "" };

_cvint  _optlabel = { &optlabel,  
    TLABEL_MIN, 
    TLABEL_MAX, 
    TLABEL_DEF,  0, 0, 0, 1, 1, 
    VIS, 
    "Labeling time", 
0, "" };

_cvint  _opt2prepte = { &opt2prepte,  
    TE_MIN, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "T2PREP Echo time", 
0, "" };

_cvint  _opautotr = { &opautotr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Min TR mode - 1:on, 0:off", 
0, "" };

_cvint  _opnspokes = { &opnspokes,  
    64, 
    512, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Spokes per Segment", 
0, "" };

_cvfloat  _opoversamplingfactor = { &opoversamplingfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Over sampling factor", 
0, "" };

_cvint  _opacs = { &opacs,  
    1, 
    12, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ACS lines", 
0, "" };

_cvint  _opharmonize = { &opharmonize,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Harmonize (0=Off, 1=On).", 
    0, ""
};

_cvint  _pieffbladewidth = { &pieffbladewidth,  
   1, 
   MAXINT, 
   1,  0, 0, 0, 1, 1, 
   VIS, 
   "Effective blade width", 
0, "" };

_cvint  _opinrangetr = { &opinrangetr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,     
    "Flag for In-Range TR mode - 1:on, 0:off", 
0, "" };

_cvint  _opinrangetrmin = { &opinrangetrmin,  
    -MAXINT, 
    MAXINT, 
    160000,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum TR for in-range auto TR", 
0, "" };

_cvint  _opinrangetrmax = { &opinrangetrmax,  
    -MAXINT, 
    MAXINT, 
    10000000,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum TR for in-range auto TR", 
0, "" };

_cvint  _optr = { &optr,  
    TR_MIN, 
    TR_MAX, 
    400000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time of repetition", 
0, "" };

_cvfloat  _opflip = { &opflip,  
    1, 
    180, 
    90,  0, 0, 0, 1, 1, 
    VIS, 
    "Flip angle for RF1 slice.", 
0, "" };

_cvint  _opautoflip = { &opautoflip,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Flip Angle mode - 1:on, 0:off", 
0, "" };

_cvint  _opautoetl = { &opautoetl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto ETL calculation - 1:on, 0:off", 
0, "" };

_cvint  _opetl = { &opetl,  
    1, 
    256, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo Train Length in number of echoes", 
0, "" };

_cvint  _opautorbw = { &opautorbw,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto RBW calculation - 1:on, 0:off", 
0, "" };




_cvfloat  _oprbw = { &oprbw,  
    0, 
    MAXFLOAT, 
    16.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Receive BW in khz", 
0, "" };

_cvfloat  _oprbw2 = { &oprbw2,  
    0, 
    MAXFLOAT, 
    16.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Receive BW for echoes 2-4 in kHz", 
0, "" };





_cvfloat  _opfov = { &opfov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction", 
0, "" };

_cvfloat  _opphasefov = { &opphasefov,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of the field of view size in the phase direction, 1=full", 
0, "" };

_cvfloat  _opnpwfactor = { &opnpwfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "No Phase Wrap Factor", 
0, "" };

_cvfloat  _opfreqfov = { &opfreqfov,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of the field of view size in the frequency direction, 1=full", 
0, "" };

_cvint  _opautoslquant = { &opautoslquant,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Slquant calculation - 1:on, 0:off", 
0, "" };

_cvint  _opslquant = { &opslquant,  
    1, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice quantity", 
0, "" };

_cvint  _opsllocs = { &opsllocs,  
    1, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Locations", 
0, "" };

_cvfloat  _opslthick = { &opslthick,  
    MINTHICK, 
    MAXTHICK, 
    5,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice thickness in mm.", 
0, "" };

_cvfloat  _opslspace = { &opslspace,  
    -200, 
    200, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice gap in mm.", 
0, "" };

_cvint  _opileave = { &opileave,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "This CV is set to 1 for INTerleaved slices, 0 otherwise", 
0, "" };





_cvint  _opcoax = { &opcoax,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Used to determine FOV for CFH", 
0, "" };

_cvfloat  _opvthick = { &opvthick,  
    0, 
    MAXVTHICK, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Total slab thickness in mm.", 
0, "" };

_cvint  _opvquant = { &opvquant,  
    1, 
    MAXVQUANT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of slabs for 3D", 
0, "" };

_cvint  _opovl = { &opovl,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The number of overlapping locations in a multi-slab 3D prescription", 
0, "" };





_cvfloat  _oplenrl = { &oplenrl,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the RL direction in mm", 
0, "" };

_cvfloat  _oplenap = { &oplenap,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the AP direction in mm", 
0, "" };

_cvfloat  _oplensi = { &oplensi,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the SI direction in mm", 
0, "" };

_cvfloat  _oplocrl = { &oplocrl,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the RL direction in mm", 
0, "" };

_cvfloat  _oplocap = { &oplocap,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the AP direction in mm", 
0, "" };

_cvfloat  _oplocsi = { &oplocsi,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the SI direction in mm", 
0, "" };

_cvfloat  _oprlcsiis = { &oprlcsiis,  
    -PSD_COR, 
    PSD_COR, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is RL direction 1=X,2=Y,3=Z", 
0, "" };

_cvfloat  _opapcsiis = { &opapcsiis,  
    -PSD_COR, 
    PSD_COR, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is AP direction 1=X,2=Y,3=Z", 
0, "" };

_cvfloat  _opsicsiis = { &opsicsiis,  
    -PSD_COR, 
    PSD_COR, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is SI direction 1=X,2=Y,3=Z", 
0, "" };



_cvfloat  _opmonfov = { &opmonfov,  
    20, 
    FOV_MAX, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of monitor pulse in mm.", 
0, "" };

_cvfloat  _opmonthick = { &opmonthick,  
    5, 
    100, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "Monitor thickness in mm.", 
0, "" };

_cvfloat  _opinittrigdelay = { &opinittrigdelay,  
    0.0, 
    100000000, 
    1000000,  0, 0, 0, 1, 1, 
    VIS, 
    "Initial trigger delay(s) for auto voice on smartprep and fluorotrigger.", 
0, "" };





_cvint  _opxres = { &opxres,  
    256, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "X(frequency) resolution", 
0, "" };

_cvint  _opyres = { &opyres,  
    128, 
    2048, 
    128,  0, 0, 0, 1, 1, 
    VIS, 
    "Y(phase) resolution", 
0, "" };

_cvint  _opautonex = { &opautonex,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto NEX calculation - 1:on, 0:off", 
0, "" };

_cvfloat  _opnex = { &opnex,  
    0, 
    MAX_NEX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Excitations", 
0, "" };

_cvint  _opslicecnt = { &opslicecnt,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "Number of slices before pause.", 
0, "" };

_cvint  _opnbh = { &opnbh,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Breath Hold", 
    0, ""
};

_cvint  _opspf = { &opspf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Swap Phase and Frequency. 0 = no swap, 1 = swap", 
0, "" };

_cvint  _opcfsel = { &opcfsel,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=current, 1=mid, 2=water, 3=fat, 4=pk, 5=cent", 
0, "" };

_cvint  _opfcaxis = { &opfcaxis,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow comp axis: 1=freq, 2=slice.", 
0, "" };

_cvint  _opphcor = { &opphcor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Phase Correction - 1:on, 0:off", 
0, "" };

_cvfloat  _opdose = { &opdose,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gadolinium dose in ml.", 0, "Contrast dose must be between 0 and 100 ml."
};

_cvint  _opcontrast = { &opcontrast,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Contrast agent administered. 0=false, 2=true", 
    0, ""
};





_cvint  _opchrate = { &opchrate,  
    ECG_BPM_MIN, 
    ECG_BPM_MAX, 
    100,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartrate in beats/min.", 
    EM_PSD_HRATE_OUT_OF_RANGE, ""
};

_cvint  _opcphases = { &opcphases,  
    1, 
    MAX_CINE_PHASES, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of cardiac phases for cine.", 
    0, ""
};

_cvint  _opaphases = { &opaphases,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of average acquired cardiac phases for cine.", 
    0, ""
};

_cvint  _opclocs = { &opclocs,  
    1, 
    MAX_CINE_SLICES, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Locs/Acq for CINE", 
    0, ""
};





_cvint  _ophrate = { &ophrate,  
    ECG_BPM_MIN, 
    ECG_BPM_MAX, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartrate in beats/min.", 
    EM_PSD_HRATE_OUT_OF_RANGE, ""
};

_cvint  _oparr = { &oparr,  
    0, 
    50, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Arrythmia rejection ratio", 
0, "" };

_cvint  _ophrep = { &ophrep,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of heart beats per repetition", 
0, "" };

_cvint  _opautotdel1 = { &opautotdel1,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Auto Trigger Delay mode: 0=off, 1=minimum, 2=recommended, 3=systolic, 4=diastolic", 
0, "" };

_cvint  _optdel1 = { &optdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    20000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time of delay from trigger to center of first RF 90", 
0, "" };

_cvint  _optseq = { &optseq,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Inter-sequence time from scan", 
0, "" };

_cvint  _opphases = { &opphases,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of phases of the heart cycle to image", 
0, "" };

_cvint  _opcardseq = { &opcardseq,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = other, 1 = minimum, 2 = even", 
0, "" };

_cvint  _opmphases = { &opmphases,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=single phase, 1=multiple phase", 
0, "" };

_cvint  _oparrmon = { &oparrmon,  
    -10, 
    10, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Arrythmia rejection monitoring flag: 1 = yes, 0 = no", 
0, "" };

_cvint  _opvps = { &opvps,  
    -MAXINT, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Views per segment", 
0, "" };

_cvint  _opautovps = { &opautovps,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto VPS calculation - 1:on, 0:off", 
0, "" };

_cvint  _opcgatetype = { &opcgatetype,  
    CARDIAC_GATE_TYPE_MIN, 
    CARDIAC_GATE_TYPE_MAX, 
    CARDIAC_GATE_TYPE_NONE,  0, 0, 0, 1, 1, 
    VIS, 
    "0=OFF, 1=ECG, 2=PG", 
0, "" };

_cvint  _opadvgate = { &opadvgate,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable Advanced ECG Gating.", 
0, "" };


_cvint  _opfcine = { &opfcine,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fast CINE Mode.", 
    EM_PSD_FCINE_INCOMPATIBLE, ""
};




_cvint  _opcineir = { &opcineir,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CineIR feature.", 
0, "" };






_cvint  _opstress = { &opstress,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac RealTime Visualization/Acquisition Activation Flag.", 
0, "" };


_cvint  _opnrr = { &opnrr,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of R-R Intervals to Acquire for Monitor Mode.", 
0, "" };


_cvint  _opnrr_dda = { &opnrr_dda,  
    0, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of R-R Intervals to Acquire for Monitor Mode.", 
0, "" };





_cvint  _oprtcgate = { &oprtcgate,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Trigger flag", 
    EM_PSD_RESP_TRIG_NOT_SUPPORTED, ""
};

_cvint  _oprtrate = { &oprtrate,  
    3, 
    ECG_BPM_MAX, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory rate  in beats/min.", 
0, "" };

_cvint  _oprtrep = { &oprtrep,  
    1, 
    5, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of breaths per repetition", 
0, "" };

_cvint  _oprttdel1 = { &oprttdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    20000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Time of delay from trigger to center of first RF 90", 
0, "" };

_cvint  _oprttseq = { &oprttseq,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Inter-sequence time from scan", 
0, "" };

_cvint  _oprtcardseq = { &oprtcardseq,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = other, 1 = minimum, 2 = even", 
0, "" };

_cvint  _oprtarr = { &oprtarr,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Trigger window", 
0, "" };

_cvint  _oprtpoint = { &oprtpoint,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory trigger point", 
0, "" };





_cvint  _opnavrrmeas = { &opnavrrmeas,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Rate measurement: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavrrmeastime = { &opnavrrmeastime,  
    5, 
    300, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum Respiratory Rate measurement time in sec", 
0, "" };

_cvint  _opnavrrmeasrr = { &opnavrrmeasrr,  
    3, 
    ECG_BPM_MAX, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory rate in beats/min for pinavrrmeasmaxsl calculation", 
0, "" };

_cvint  _opnavsltrack = { &opnavsltrack,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator slab/slice tracking: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavautoaccwin = { &opnavautoaccwin,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator auto acceptance window: 0 = off, 1 = on", 
0, "" };

_cvfloat  _opnavaccwin = { &opnavaccwin,  
    0.0, 
    200.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator acceptance window in mm", 
0, "" };

_cvint  _opnavautotrigtime = { &opnavautotrigtime,  
    0, 
    600, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator auto trigger time in sec", 
0, "" };

_cvint  _opnavpsctime = { &opnavpsctime,  
    0, 
    600, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator prescan time in sec", 
0, "" };

_cvint  _opnavmaxinterval = { &opnavmaxinterval,  
    50, 
    1000, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum Navigator interval in navigator gating in msec", 
0, "" };

_cvint  _opnavtype = { &opnavtype,  
    PSD_NAV_TYPE_90_180, 
    PSD_NAV_TYPE_CYL, 
    PSD_NAV_TYPE_90_180,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator Type: 0 = 90-180, 1 = Cylindric)", 
0, "" };

_cvint  _opnavpscpause = { &opnavpscpause,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Pause After navigator prescan: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavsigenhance = { &opnavsigenhance,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator Signal Enhancement: 0 = off, 1 = on", 
0, "" };


_cvint  _opasset = { &opasset,  
    0, 
    6, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET mode: 0=off, 1=calibration, 2=phase asset scan, 3=slice asset scan, 5=T2Map, 6= Regularized calibration", 
0, "" };

_cvint  _opassetcal = { &opassetcal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET calibration mode: 0=off, 1=on", 
    EM_PSD_NO_ASSET_CAL, ""
};

_cvint  _opassetscan = { &opassetscan,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET scan mode: 0=off, 1=on", 
    EM_PSD_NO_ASSET_SCAN, ""
};

_cvint  _rhcoilno = { &rhcoilno,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number identifying currently selected coil", 
0, "" };










_cvint  _rhcal_options = { &rhcal_options,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon Calibration Strategy", 
0, "" };

_cvint  _rhasset = { &rhasset,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET mode: 0=off, 1=calib, 2=phase asset, 3=slice asset, 5=T2Map, 6=Regularized Calib, 7=Regularized Phase Asset, 8=Regularized Slice Asset, 11=ARC, 12=DVC ARC", 
0, "" };

_cvint  _rhasset_calthresh = { &rhasset_calthresh,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET background threshold (10^6 * percentage of volume peak)", 
0, "" };

_cvfloat  _rhasset_R = { &rhasset_R,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET phase encoding reduction factor", 
0, "" };

_cvint  _rhasset_phases = { &rhasset_phases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Images per location for ASSET", 
0, "" };

_cvfloat  _rhscancent = { &rhscancent,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Table position for ASSET scan", 
0, "" };

_cvint  _rhasset_alt_cal = { &rhasset_alt_cal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use alternate ASSET calibration (0-Normal, 1-Apodized for signal voids)", 
    0, ""
};

_cvint  _rhasset_torso = { &rhasset_torso,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tune ASSET recon for torso scanning", 
    0, ""
};

_cvint  _rhasset_localTx = { &rhasset_localTx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tune ASSET recon for local transmit scanning", 
    0, ""
};

_cvfloat  _rhasset_TuningFactor = { &rhasset_TuningFactor,  
    0.0, 
    100.0, 
    15.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET tuning factor for regularization", 
    0, ""
};

_cvfloat  _rhasset_SnrMin = { &rhasset_SnrMin,  
    0.0, 
    100.0, 
    15.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET SNR Min limitation for regularization", 
    0, ""
};

_cvfloat  _rhasset_SnrMax = { &rhasset_SnrMax,  
    0.0, 
    100.0, 
    75.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET SNR Max limitation for regularization", 
    0, ""
};

_cvfloat  _rhasset_SnrScalar = { &rhasset_SnrScalar,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET SNR Scaling factor", 
    0, ""
};




_cvint  _oppure = { &oppure,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE mode: 0==OFF, 1==OFF, 2==PURE 1, 3==PURE 2", 
    0, ""
};

_cvint  _rhpure = { &rhpure,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE mode: 0==OFF, 1==CAL, 2==PURE 1, 3==PURE 2", 
    0, ""
};

_cvint  _oppurecal = { &oppurecal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE calibration mode: 0=off, 1=on", 
    0, ""
};

_cvint  _rhpurechannel = { &rhpurechannel,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "receive channel for volume refscan in PURE", 
    0, ""
};


_cvint  _rhpurefilter = { &rhpurefilter,  
    0, 
    1,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "use advanced filter for PURE 1 == yes, 0 == no", 
    0, ""
};

_cvfloat  _rhpure_scale_factor = { &rhpure_scale_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "receiver scaling factor ratio between surface and volume coil for PURE", 
    0, ""
};

_cvint  _cfpure_filtering_mode = { &cfpure_filtering_mode,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE filtering mode", 
    0, ""
};

_cvint  _rhpure_filtering_mode = { &rhpure_filtering_mode,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE filtering mode", 
    0, ""
};

_cvfloat  _rhpure_lambda = { &rhpure_lambda,  
    1.0, 
    100.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE lambda", 
    0, ""
};

_cvfloat  _rhpure_tuning_factor_surface = { &rhpure_tuning_factor_surface,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE surface tuning factor", 
    0, ""
};

_cvfloat  _rhpure_tuning_factor_body = { &rhpure_tuning_factor_body,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE body tuning factor", 
    0, ""
};

_cvfloat  _rhpure_derived_cal_fraction = { &rhpure_derived_cal_fraction,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE derived calibration fraction", 
    0, ""
};

_cvfloat  _rhpure_cal_reapodization = { &rhpure_cal_reapodization,  
    0.0, 
    MAXFLOAT, 
    12.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE calibration reapodization window radius", 
    0, ""
};

_cvint  _opcalrequired = { &opcalrequired,  
    PSD_OFF, 
    2, 
    PSD_OFF ,  0, 0, 0, 1, 1, 
    VIS, 
    "Calibration needed: 0=Cal not needed, 1=valid Cal needed, 2=Cal required all the time", 
    0, ""
};

_cvint  _rhpure_blur_enable = { &rhpure_blur_enable,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE blur enable", 
    0, ""
};

_cvfloat  _rhpure_blur = { &rhpure_blur,  
    0.0, 
    100.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE blur", 
    0, ""
};

_cvfloat  _rhpure_mix_lambda = { &rhpure_mix_lambda,  
    1.0, 
    100.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix lambda", 
    0, ""
};

_cvfloat  _rhpure_mix_tuning_factor_surface = { &rhpure_mix_tuning_factor_surface,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix surface tuning factor", 
    0, ""
};

_cvfloat  _rhpure_mix_tuning_factor_body = { &rhpure_mix_tuning_factor_body,  
    0.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix body tuning factor", 
    0, ""
};

_cvint  _rhpure_mix_blur_enable = { &rhpure_mix_blur_enable,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix blur enable", 
    0, ""
};

_cvfloat  _rhpure_mix_blur = { &rhpure_mix_blur,  
    0.0, 
    100.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix blur", 
    0, ""
};

_cvfloat  _rhpure_mix_alpha = { &rhpure_mix_alpha,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix alpha", 
    0, ""
};

_cvint  _rhpure_mix_otsu_class_qty = { &rhpure_mix_otsu_class_qty,  
    2, 
    3, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix Otsu class quantity", 
    0, ""
};

_cvfloat  _rhpure_mix_exp_wt = { &rhpure_mix_exp_wt,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix exponential weight", 
    0, ""
};

_cvint  _rhpure_mix_erode_dist = { &rhpure_mix_erode_dist,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix erosion distance", 
    0, ""
};

_cvint  _rhpure_mix_dilate_dist = { &rhpure_mix_dilate_dist,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix dilation distance", 
    0, ""
};

_cvint  _rhpure_mix_aniso_blur = { &rhpure_mix_aniso_blur,  
    0, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix anisotropic blur", 
    0, ""
};

_cvint  _rhpure_mix_aniso_erode_dist = { &rhpure_mix_aniso_erode_dist,  
    0, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix anisotropic erosion distance", 
    0, ""
};

_cvint  _rhpure_mix_aniso_dilate_dist = { &rhpure_mix_aniso_dilate_dist,  
    0, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix anisotropic dilation distance", 
    0, ""
};

_cvint  _opcalmode = { &opcalmode,  
    CAL_MODE_MIN, 
    CAL_MODE_MAX, 
    CAL_MODE_STANDARD,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration mode: 0=standard, 1=breathhold/free-breathing, 2=free-breathing", 
    0, ""
};

_cvint  _rhcalmode = { &rhcalmode,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "calibration mode: 0=non-interleaved, 1=interleaved, 2=simultaneous", 
    0, ""
};

_cvint  _opcaldelay = { &opcaldelay,  
    0, 
    MAXINT, 
    5000000,  0, 0, 0, 1, 1, 
    VIS, 
    "delay time between breathhold and free-breathing passes of ASSET/PURE calibration scan", 
    0, ""
};

_cvint  _rhcal_pass_set_vector = { &rhcal_pass_set_vector,  
    11, 
    3222, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set vector", 
    0, ""
};

_cvint  _rhcal_nex_vector = { &rhcal_nex_vector,  
    101, 
    3999999, 
    101,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set NEX vector", 
    0, ""
};

_cvint  _rhcal_weight_vector = { &rhcal_weight_vector,  
    101, 
    3999999, 
    101,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set weight vector", 
    0, ""
};

_cvint  _sifsetwokey = { &sifsetwokey,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable fse-II options. 0=off, 1=on"
, 0, "" };

_cvint  _opautosldelay = { &opautosldelay,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for auto sldelay mode. 0=off, 1=on", 
0, "" };




_cvint  _specnuc = { &specnuc,  
    1, 
    129, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Current spectro nucleus.", 
    0, ""
};

_cvint  _specpts = { &specpts,  
    256, 
    MAX_FILTER_POINTS, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of points per frame for spectro.", 
    0, ""
};

_cvint  _specwidth = { &specwidth,  
    500, 
    32000, 
    2000,  0, 0, 0, 1, 1, 
    VIS, 
    "Spectral width.", 
    0, ""
};

_cvint  _specnavs = { &specnavs,  
    1, 
    2048, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of averages for spectro.", 
    0, ""
};

_cvint  _specnex = { &specnex,  
    1, 
    4096, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of excitations for spectro.", 
    0, ""
};

_cvint  _specdwells = { &specdwells,  
    0, 
    4096, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of dwell periods for spectro.", 
    0, ""
};

_cvint  _acquire_type = { &acquire_type,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of acq:0=MASTER_1H, 1=SLAVE_1H, 2=S_MNS, 3=M_MNS", 
    0, ""
};





_cvint  _pixmtband = { &pixmtband,  
    1, 
    3, 
    AMP_ERBTEC,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF amplifier specification", 
    0, ""
};

_cvint  _pibbandfilt = { &pibbandfilt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "o/p filter for broadband", 
    0, ""
};







_cvint  _opwarmup = { &opwarmup,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "warm up mode flag 0:no 1:yes", 
0, "" };

_cvint  _pscahead = { &pscahead,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable the Prescan Ahead option", 
0, "" };

_cvint  _opprescanopt = { &opprescanopt,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The option for skipping Prescan", 
0, "" };

_cvint  _autoadvtoscn = { &autoadvtoscn,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Automate the table movement", 
0, "" };

_cvint  _opapa = { &opapa,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "enable APA from scan", 
0, "" };

_cvint  _oppscapa = { &oppscapa,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "enable APA to prescan", 
0, "" };

_cvint  _PSslice_ind = { &PSslice_ind,   
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PS cfh/tg slice number",  
    0, ""
};

_cvint  _oppscshimtg = { &oppscshimtg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use shim volume for local TG : 0 = off, 1 = on", 
0, "" };

_cvint  _opdyntg = { &opdyntg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "control for Dynamic TG", 
0, "" };


_cvfloat  _dynTG_fov = { &dynTG_fov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    INVIS, 
    "dynTG acquisition field of view (square)", 
0, "" };

_cvint  _dynTG_slquant = { &dynTG_slquant,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in dynTG", 
0, "" };

_cvfloat  _dynTG_flipangle = { &dynTG_flipangle,  
    0, 
    360, 
    60.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for dynTG entrypoint", 
0, "" };

_cvfloat  _dynTG_slthick = { &dynTG_slthick,  
    0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for dynTG entry point", 
0, "" };

_cvint  _dynTG_xres = { &dynTG_xres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for dynTG entry point", 
0, "" };

_cvint  _dynTG_yres = { &dynTG_yres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for dynTG entry point", 
0, "" };

_cvint  _dynTG_baseline = { &dynTG_baseline,  
    0, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for dynTG", 
0, "" };

_cvint  _dynTG_ptsize = { &dynTG_ptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for dynTG", 
0, "" };

_cvfloat  _dynTG_b1factor = { &dynTG_b1factor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "b1map scale factor for dynTG", 
0, "" };


_cvfloat  _rfshim_fov = { &rfshim_fov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    INVIS, 
    "rfshim acquisition field of view (square)", 
0, "" };

_cvint  _rfshim_slquant = { &rfshim_slquant,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in rfshim", 
0, "" };

_cvfloat  _rfshim_flipangle = { &rfshim_flipangle,  
    0, 
    360, 
    60.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for rfshim entrypoint", 
0, "" };

_cvfloat  _rfshim_slthick = { &rfshim_slthick,  
    0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for rfshim entry point", 
0, "" };

_cvint  _rfshim_xres = { &rfshim_xres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for rfshim entry point", 
0, "" };

_cvint  _rfshim_yres = { &rfshim_yres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for rfshim entry point", 
0, "" };

_cvint  _rfshim_baseline = { &rfshim_baseline,  
    0, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for rfshim", 
0, "" };

_cvint  _rfshim_ptsize = { &rfshim_ptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for rfshim", 
0, "" };

_cvfloat  _rfshim_b1factor = { &rfshim_b1factor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "b1map scale factor for rfshim", 
0, "" };


_cvint  _cal_xres = { &cal_xres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for extcal entry point", 
0, "" };

_cvint  _cal_yres = { &cal_yres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for extcal entry point", 
0, "" };

_cvint  _cal_slq = { &cal_slq,  
    16, 
    64, 
    36,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of slices for extcal entry point", 
0, "" };

_cvint  _cal_nex = { &cal_nex,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of nex for each coil receiver in extcal entry point", 
0, "" };

_cvint  _cal_interleave = { &cal_interleave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "interleaving surface and volume coil in extcal entry point", 
0, "" };

_cvfloat  _cal_fov = { &cal_fov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction for extcal entry point", 
0, "" };

_cvfloat  _cal_slthick = { &cal_slthick,  
    5, 
    30, 
    15,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for extcal entry point", 
0, "" };

_cvint  _cal_pass = { &cal_pass,  
    1, 
    2, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of passes for extcal entry point. 1 means surface only; 2 means surface and volume", 
0, "" };


_cvint  _coil_xres = { &coil_xres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for autocoil entry point", 
0, "" };

_cvint  _coil_yres = { &coil_yres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for autocoil entry point", 
0, "" };

_cvint  _coil_slq = { &coil_slq,  
    16, 
    64, 
    36,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of slices for autocoil entry point", 
0, "" };

_cvint  _coil_nex = { &coil_nex,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of nex for each coil receiver in autocoil entry point", 
0, "" };

_cvfloat  _coil_fov = { &coil_fov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction for autocoil entry point", 
0, "" };

_cvfloat  _coil_slthick = { &coil_slthick,  
    5, 
    30, 
    15,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for autocoil entry point", 
0, "" };

_cvint  _coil_pass = { &coil_pass,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of passes for autocoil entry point", 
0, "" };

_cvint  _coil_interleave = { &coil_interleave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "interleaving surface and volume coil in autocoil entry point", 
0, "" };




_cvfloat  _asfov = { &asfov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Autoshim acquisition field of view (square)", 
0, "" };

_cvint  _asslquant = { &asslquant,  
    0, 
    3, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in autoshim", 
0, "" };

_cvfloat  _asflip = { &asflip,  
    0, 
    360, 
    90,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for autoshim entrypoint", 
0, "" };

_cvfloat  _asslthick = { &asslthick,  
    0, 
    MAXFLOAT, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for autoshim entry point", 
0, "" };

_cvint  _asxres = { &asxres,  
    0, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for autoshim entry point", 
0, "" };

_cvint  _asyres = { &asyres,  
    0, 
    MAXINT, 
    128,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for autoshim entry point", 
0, "" };

_cvint  _asbaseline = { &asbaseline,  
    0, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for autoshim", 
0, "" };

_cvint  _asrhblank = { &asrhblank,  
    0, 
    MAXINT, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "kissoff lines for autoshim", 
0, "" };

_cvint  _asptsize = { &asptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for autoshim", 
0, "" };

_cvint  _opascalcfov = { &opascalcfov,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FOV for Localized Shim Calc", 
0, "" };




_cvfloat  _tgfov = { &tgfov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Transmit Gain acquisition field of view (square)", 
0, "" };

_cvint  _tgcap = { &tgcap,  
    0, 
    MAX_SYS_TG, 
    MAX_SYS_TG,  0, 0, 0, 1, 1, 
    INVIS, 
    "TG Cap to prevent B1 field from exceeding coil limits", 
0, "" };

_cvint  _tgwindow = { &tgwindow,  
    0, 
    MAX_SYS_TG, 
    MAX_SYS_TG,  0, 0, 0, 1, 1, 
    INVIS, 
    "TG Window corresponding to difference between PSD B1 and system B1", 
0, "" };





_cvint  _oppscvquant = { &oppscvquant,  
     0, 
     MAX_PSC_VQUANT, 
     0,  0, 0, 0, 1, 1, 
     VIS, 
     "Number of Prescan Volumes", 
0, "" };




_cvint  _opdrivemode = { &opdrivemode,  
     0, 
     3, 
     1,  0, 0, 0, 1, 1, 
     VIS, 
     "Drive mode: 0-Single, 1-Quadrature, 2-Preset, 3-Optimized", 
0, "" };

_cvint  _pidrivemodenub = { &pidrivemodenub,  
     0, 
     7, 
     1,  0, 0, 0, 1, 1, 
     VIS, 
     "Bit mask for drive mode UI: 0-Hide UI, 1-Quadrature, 2-Preset, 4-Optimized", 
0, "" };


_cvint  _opexcitemode = { &opexcitemode,  
     0, 
     0, 
     0,  0, 0, 0, 1, 1, 
     VIS, 
     "Excitation Mode: 0-Selective, 1-Non-Selective, 2-Focus", 
0, "" };




_cvfloat  _lp_stretch = { &lp_stretch,  
    1.0, 
    10.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF stretch parameter (1 for no stretch)", 
    0, ""
};

_cvint  _lp_mode = { &lp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Low power mode (0:off  1:on)", 
    0, ""
};

_cvfloat  _derateb1_body_factor = { &derateb1_body_factor,  
    0.0, 
    2.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "derateb1_body_factor", 
    0, ""
};

_cvfloat  _SAR_bodyNV_weight_lim = { &SAR_bodyNV_weight_lim,  
    0.0, 
    225.0, 
    110.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SAR_bodyNV_weight_lim", 
    0, ""
};

_cvfloat  _derateb1_NV_factor = { &derateb1_NV_factor,  
    0.0, 
    2.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "derateb1_NV_factor", 
    0, ""
};

_cvfloat  _jstd_multiplier_body = { &jstd_multiplier_body,  
    0.0, 
    0.25, 
    0.145,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_multiplier_body", 
    0, ""
};

_cvfloat  _jstd_multiplier_NV = { &jstd_multiplier_NV,  
    0.0, 
    0.25, 
    0.0137,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_multiplier_NV", 
    0, ""
};

_cvfloat  _jstd_exponent_body = { &jstd_exponent_body,  
    0.0, 
    5.0, 
    0.763,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_exponent_body", 
    0, ""
};

_cvfloat  _jstd_exponent_NV = { &jstd_exponent_NV,  
    0.0, 
    5.0, 
    1.154,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_exponent_NV", 
    0, ""
};


_cvint  _pidiffmode = { &pidiffmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pifmriscrn = { &pifmriscrn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _piresol = { &piresol,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for resolution in mm field", 
0, "" };

_cvint  _pioverlap = { &pioverlap,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Will allow negative sl. spacing when 1", 
0, "" };

_cvint  _piforkvrgf = { &piforkvrgf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pinofreqoffset = { &pinofreqoffset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pirepactivenub = { &pirepactivenub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pireprestnub = { &pireprestnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piddanub = { &piddanub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piinitstatnub = { &piinitstatnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piviewordernub = { &piviewordernub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pisliceordnub = { &pisliceordnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pipsdtrignub = { &pipsdtrignub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pispssupnub = { &pispssupnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _pi_neg_sp = { &pi_neg_sp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = positive, 1 = negative slice spacing", 
0, "" };

_cvfloat  _piisvaldef = { &piisvaldef,  
    0.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "default value for the slice overlap", 
0, "" };


_cvint  _pi2dmde = { &pi2dmde,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicate 2DMDE sequence to scan", 
0, "" };




_cvint  _pidmode = { &pidmode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=cardiac, 2=pause, 3=fastcard", 
0, "" };

_cvint  _piviews = { &piviews,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of views or reps needed for cardiac scan", 
0, "" };

_cvint  _piclckcnt = { &piclckcnt,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of seqs needed before view counter is decremented.", 
0, "" };

_cvfloat  _avmintscan = { &avmintscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "scan time", 
0, "" };

_cvfloat  _pitslice = { &pitslice,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for each slice in us", 
0, "" };

_cvfloat  _pitscan = { &pitscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for console clock", 
0, "" };


_cvfloat  _pimscan = { &pimscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for mask acquisition in ectricks", 
0, "" };

_cvfloat  _pivsscan = { &pivsscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for wash-in acquisition in DISCO with DynaPlan", 
0, "" };


_cvfloat  _pireconlag = { &pireconlag,  
    -3.0, 
    MAXFLOAT, 
    -3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon Lag time in seconds ", 
0, "" };



_cvfloat  _pitres = { &pitres,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "temporal resolution time", 
0, "" };

_cvfloat  _pitres2 = { &pitres2,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Interp Temp time", 
0, "" };




_cvint  _pisaveinter = { &pisaveinter,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    " if 1 save intermediate images", 
0, "" };

_cvint  _pivextras = { &pivextras,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "number of extra (vascular) image files to create.", 
0, "" };

_cvint  _pinecho = { &pinecho,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Actual number of echoes for vascular image creation.", 
0, "" };




_cvfloat  _piscancenter = { &piscancenter,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " center of scan - used by HPC ", 
0, "" };

_cvfloat  _pilandmark = { &pilandmark,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " landmark position of scan", 
0, "" };

_cvfloat  _pitableposition = { &pitableposition,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " table position of scan", 
0, "" };




_cvint  _pismode = { &pismode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Service modes: 0=none,1=exciter,2=loopbk,3=exciter+loopbk", 
0, "" };

_cvint  _pishldctrl = { &pishldctrl,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Shield cooler control CV. 0=Turn off for scan", 
0, "" };

_cvint  _pinolr = { &pinolr,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn off left-right shading fix. 0=fix on, 1=no fix", 
0, "" };

_cvint  _pinoadc = { &pinoadc,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn off ADC correction. 0=correction on, 1=no fix", 
0, "" };

_cvint  _pimixtime = { &pimixtime,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "mixing time", 
0, "" };



_cvint  _pishim2 = { &pishim2,  
    HO_SHIM_NO, 
    HO_SHIM_YES, 
    HO_SHIM_NO,  0, 0, 0, 1, 1, 
    INVIS, 
    "High order shim psd", 
0, "" };

_cvint  _pi1stshimb = { &pi1stshimb,  
    HO_SHIM_1ST_BUTTON_ON, 
    HO_SHIM_1ST_BUTTON_OFF, 
    HO_SHIM_1ST_BUTTON_ON,  0, 0, 0, 1, 1, 
    INVIS, 
    "High order shim 1st button", 
0, "" };


_cvfloat  _pifractecho = { &pifractecho,  
    0.5, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Fractional echo ratio for SNR monitor", 
0, "" };

_cvint  _nope = { &nope,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for turning off phase encoding (1: turn off PE, 2: also display mag k-space and save raw data)", 
0, "" };




_cvint  _opuser_usage_tag = { &opuser_usage_tag,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq usage tag", 
0, "" };

_cvint  _rhuser_usage_tag = { &rhuser_usage_tag,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "rhuser CV and data acq usage tag", 
0, "" };

_cvint  _rhFillMapMSW = { &rhFillMapMSW,  
    0x00000000, 
    0x0001FFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq fillmap MSW", 
0, "" };

_cvint  _rhFillMapLSW = { &rhFillMapLSW,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq fillmap LSW", 
0, "" };




_cvint  _rhbline = { &rhbline,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of baseline pairs for NEX=1", 
0, "" };

_cvint  _rhblank = { &rhblank,  
    0, 
    MAXINT, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of blank pixel lines", 
0, "" };

_cvint  _rhnex = { &rhnex,  
    1, 
    150, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of excitations", 
0, "" };

_cvint  _rhnavs = { &rhnavs,  
    1, 
    32767, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of averages", 
0, "" };

_cvint  _rhnslices = { &rhnslices,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of slices*phases.", 
0, "" };

_cvint  _rhnrefslices = { &rhnrefslices,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of reference slices.", 
0, "" };

_cvint  _rhnframes = { &rhnframes,  
    1, 
    YRES_MAX, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of recon frames.", 
0, "" };

_cvint  _rhfrsize = { &rhfrsize,  
    1, 
    XRES_MAX, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of complex sample pairs per view", 
0, "" };

_cvint  _rhnecho = { &rhnecho,  
    1, 
    PSD_NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of echoes ", 
0, "" };

_cvint  _rhnphases = { &rhnphases,  
    1, 
    PHASES_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of phases.", 
0, "" };

_cvint  _rhmphasetype = { &rhmphasetype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Multiphase type: 0=Intleave 1=Seq.", 
0, "" };


_cvint  _rhtrickstype = { &rhtrickstype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TRICKS Recon Options: 0:Unsub,1:k-space Sub,2:Mag Image Sub,4:Cmplx Image Sub,8:Both Sub & Unsub", 
0, "" };


































_cvint  _rhtype = { &rhtype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Type of processing for recon.", 
0, "" };





















































_cvint  _rhtype1 = { &rhtype1,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Type of processing, 0=regular, 1=homodyne", 
0, "" };


























_cvint  _rhformat = { &rhformat,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Raw data format.", 
0, "" };

_cvint  _rhptsize = { &rhptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of bytes per I or Q data", 
0, "" };

_cvint  _rhnpomp = { &rhnpomp,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of regular slices/POMP group", 
0, "" };





















_cvint  _rhrcctrl = { &rhrcctrl,  
    0, 
    MAXINT, 
    17,  0, 0, 0, 1, 1, 
    INVIS,         /* 17 = RHRCMAG + RHRCCOMP */
    "Recon image control", 
0, "" };

















_cvint  _rhdacqctrl = { &rhdacqctrl,  
    0, 
    32767, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon data acquisition control", 
0, "" };























_cvint  _rhexecctrl = { &rhexecctrl,  
    0, 
    32767, 
    RHXC_AUTO_DISPLAY | RHXC_XFER_IM,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon exective control", 
0, "" };









_cvint  _rhfdctrl = { &rhfdctrl,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Feeder control bits", 
0, "" };

_cvfloat  _rhxoff = { &rhxoff,  
    -512.0, 
    512.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Frequency offset for this image", 
0, "" };

_cvfloat  _rhyoff = { &rhyoff,  
    -1024.0, 
    1024.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase offset for this image", 
0, "" };

_cvint  _rhrecon = { &rhrecon,  
    0, 
    30000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alternate recon word", 
0, "" };

_cvint  _rhdatacq = { &rhdatacq,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alternate data acquisition word", 
0, "" };

_cvint  _rhvquant = { &rhvquant,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of 3D slabs", 
0, "" };

_cvint  _rhslblank = { &rhslblank,  
    0, 
    256, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of kissoff slice pairs", 
0, "" };

_cvint  _rhhnover = { &rhhnover,  
    0, 
    1024, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half nex overscans", 
0, "" };


_cvint  _rhfeextra = { &rhfeextra,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of points before echo", 
0, "" };

_cvint  _rhheover = { &rhheover,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half echo oversamples", 
0, "" };

_cvint  _rhoscans = { &rhoscans,  
    0, 
    1024, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of overscans", 
0, "" };

_cvint  _rhddaover = { &rhddaover,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half-nex overscans to throw away", 
0, "" };

_cvfloat  _rhzeroph = { &rhzeroph,  
    0.0, 
    1025.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Zero phase point", 
0, "" };

_cvfloat  _rhalpha = { &rhalpha,  
    0.0, 
    1.0, 
    0.46,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alpha value for filter", 
0, "" };

_cvfloat  _rhnwin = { &rhnwin,  
    0.0, 
    256.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Window width", 
0, "" };

_cvfloat  _rhntran = { &rhntran,  
    0.0, 
    256.0, 
    2.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Transition width", 
0, "" };

_cvint  _rhherawflt = { &rhherawflt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Half echo recon mode: 0 = Homodyne II, 1 = Homodyne II + BEF, 2 = 0 fill with HPF + BEF"
, 0, "" };

_cvfloat  _rhherawflt_befnwin = { &rhherawflt_befnwin,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Window width of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_befntran = { &rhherawflt_befntran,  
    0.0, 
    MAXFLOAT, 
    2.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Transition width of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_befamp = { &rhherawflt_befamp,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Amplitude of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_hpfamp = { &rhherawflt_hpfamp,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Amplitude of high pass filter (HPF)"
, 0, "" };

_cvfloat  _rhfermw = { &rhfermw,  
    0.0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi width", 
0, "" };

_cvfloat  _rhfermr = { &rhfermr,  
    0.0, 
    MAXFLOAT, 
    128.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius", 
0, "" };

_cvfloat  _rhferme = { &rhferme,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi eccentricity", 
0, "" };

_cvfloat  _rhclipmin = { &rhclipmin,  
    -32767.0, 
    32767.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Minimum image value", 
0, "" };

_cvfloat  _rhclipmax = { &rhclipmax,  
    -32767.0, 
    32767.0, 
    16383.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Maximum image value", 
0, "" };

_cvfloat  _rhdoffset = { &rhdoffset,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Gain offset after reconstruction", 
0, "" };

_cvint  _rhudasave = { &rhudasave,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Size of save area in TPS", 
0, "" };

_cvint  _rhsspsave = { &rhsspsave,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Size of ssp save area in TPS", 
0, "" };

_cvfloat  _rh2dscale = { &rh2dscale,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon rational scaling adjustment", 
0, "" };

_cvfloat  _rh3dscale = { &rh3dscale,  
    1.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon scale factor for 3D acqusitions", 
0, "" };

_cvint  _rhnpasses = { &rhnpasses,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of passes in this scan", 
0, "" };

_cvint  _rhincrpass = { &rhincrpass,  
    1, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Xth pass to increment", 
0, "" };

_cvint  _rhinitpass = { &rhinitpass,  
    1, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Minimum # of passes in TPS", 
0, "" };

_cvint  _rhmethod = { &rhmethod,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon method", 
0, "" };

_cvint  _rhdaxres = { &rhdaxres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Points per frame collected", 
0, "" };

_cvint  _rhdayres = { &rhdayres,  
    0, 
    2049, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Frames per echo collected", 
0, "" };

_cvint  _rhrcxres = { &rhrcxres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "X transform size", 
0, "" };

_cvint  _rhrcyres = { &rhrcyres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Y transform size", 
0, "" };

_cvint  _rhimsize = { &rhimsize,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Image size", 
0, "" };

_cvint  _rhnoncart_dual_traj = { &rhnoncart_dual_traj,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual Trajectory Flag for 3D UTE", 
0, "" };

_cvint  _rhnoncart_traj_kmax_ratio = { &rhnoncart_traj_kmax_ratio,  

    2, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "Low resolution trajectory factor", 
0, "" };

_cvint  _rhnspokes_lowres = { &rhnspokes_lowres,  

    0, 
    MAXINT, 
    8192,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of spokes for low resolution trajectory", 
0, "" };

_cvint  _rhnspokes_highres = { &rhnspokes_highres,  

    1, 
    MAXINT, 
    65536,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of spokes for high resolution trajectory", 
0, "" };

_cvint  _rhnoncart_traj_merge_start = { &rhnoncart_traj_merge_start,  

    1, 
    128, 
    3,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual trajectory merge start point", 
0, "" };

_cvint  _rhnoncart_traj_merge_end = { &rhnoncart_traj_merge_end,  

    1, 
    128, 
    5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual trjaectory merge end point", 
0, "" };

_cvfloat  _rhoversamplingfactor = { &rhoversamplingfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Over sampling factor for recon", 
0, "" };

_cvfloat  _rhnoncart_grid_factor = { &rhnoncart_grid_factor,  
    1.0, 
    4.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "k-space regrid extension factor", 
0, "" };

_cvint  _rhnoncart_traj_mode = { &rhnoncart_traj_mode,  
    RADIAL3D_TRAJECTORY_MODE_MIN, 
    RADIAL3D_TRAJECTORY_MODE_MAX, 
    RADIAL3D_TRAJECTORY_MODE_MIN,  0, 0, 0, 1, 1, 
    INVIS, 
    "Trajectory Mode bit mask for 3D Radial", 
0, "" };

_cvint  _rhviewSharing3D = { &rhviewSharing3D,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "View sharing bitmask: 1 = view sharing, 2 = complex subtraction", 
0, "" };

_cvint  _rhdaviewsPerBlade = { &rhdaviewsPerBlade,  
    1, 
    10000, 
    24,  0, 0, 0, 1, 1, 
    VIS, 
    "acquired views per blade", 
0, "" };

_cvfloat  _rhrotationThreshold = { &rhrotationThreshold,  
    0.0, 
    180.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "rotation threshold in degrees", 
0, "" };

_cvfloat  _rhshiftThreshold = { &rhshiftThreshold,  
    0.0, 
    1.0, 
    0.01,  0, 0, 0, 1, 1, 
    VIS, 
    "shift threshold in fraction", 
0, "" };

_cvfloat  _rhcorrelationThreshold = { &rhcorrelationThreshold,  
    0.0, 
    1.0, 
    0.50,  0, 0, 0, 1, 1, 
    VIS, 
    "correlation threshold in fraction", 
0, "" };

_cvfloat  _rhphaseCorrFiltFreqRadius = { &rhphaseCorrFiltFreqRadius,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "radius of phase corr filter along freq dir", 
0, "" };

_cvfloat  _rhphaseCorrFiltPhaseRadius = { &rhphaseCorrFiltPhaseRadius,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "radius of phase corr filter along phase dir", 
0, "" };

_cvfloat  _rhnpwfactor = { &rhnpwfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "nophasewrap factor in fraction", 
0, "" };





_cvfloat  _rhuser0 = { &rhuser0,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  0", 0, "" };
_cvfloat  _rhuser1 = { &rhuser1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  1", 0, "" };
_cvfloat  _rhuser2 = { &rhuser2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  2", 0, "" };
_cvfloat  _rhuser3 = { &rhuser3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  3", 0, "" };
_cvfloat  _rhuser4 = { &rhuser4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  4", 0, "" };
_cvfloat  _rhuser5 = { &rhuser5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  5", 0, "" };
_cvfloat  _rhuser6 = { &rhuser6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  6", 0, "" };
_cvfloat  _rhuser7 = { &rhuser7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  7", 0, "" };
_cvfloat  _rhuser8 = { &rhuser8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  8", 0, "" };
_cvfloat  _rhuser9 = { &rhuser9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  9", 0, "" };
_cvfloat  _rhuser10 = { &rhuser10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 10", 0, "" };
_cvfloat  _rhuser11 = { &rhuser11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 11", 0, "" };
_cvfloat  _rhuser12 = { &rhuser12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 12", 0, "" };
_cvfloat  _rhuser13 = { &rhuser13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 13", 0, "" };
_cvfloat  _rhuser14 = { &rhuser14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 14", 0, "" };
_cvfloat  _rhuser15 = { &rhuser15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 15", 0, "" };
_cvfloat  _rhuser16 = { &rhuser16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 16", 0, "" };
_cvfloat  _rhuser17 = { &rhuser17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 17", 0, "" };
_cvfloat  _rhuser18 = { &rhuser18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 18", 0, "" };
_cvfloat  _rhuser19 = { &rhuser19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 19", 0, "" };
_cvfloat  _rhuser20 = { &rhuser20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 20", 0, "" };
_cvfloat  _rhuser21 = { &rhuser21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 21", 0, "" };
_cvfloat  _rhuser22 = { &rhuser22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 22", 0, "" };
_cvfloat  _rhuser23 = { &rhuser23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 23", 0, "" };
_cvfloat  _rhuser24 = { &rhuser24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 24", 0, "" };
_cvfloat  _rhuser25 = { &rhuser25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 25", 0, "" };
_cvfloat  _rhuser26 = { &rhuser26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 26", 0, "" };
_cvfloat  _rhuser27 = { &rhuser27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 27", 0, "" };
_cvfloat  _rhuser28 = { &rhuser28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 28", 0, "" };
_cvfloat  _rhuser29 = { &rhuser29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 29", 0, "" };
_cvfloat  _rhuser30 = { &rhuser30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 30", 0, "" };
_cvfloat  _rhuser31 = { &rhuser31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 31", 0, "" };
_cvfloat  _rhuser32 = { &rhuser32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 32", 0, "" };
_cvfloat  _rhuser33 = { &rhuser33,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 33", 0, "" };
_cvfloat  _rhuser34 = { &rhuser34,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 34", 0, "" };
_cvfloat  _rhuser35 = { &rhuser35,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 35", 0, "" };
_cvfloat  _rhuser36 = { &rhuser36,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 36", 0, "" };
_cvfloat  _rhuser37 = { &rhuser37,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 37", 0, "" };
_cvfloat  _rhuser38 = { &rhuser38,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 38", 0, "" };
_cvfloat  _rhuser39 = { &rhuser39,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 39", 0, "" };
_cvfloat  _rhuser40 = { &rhuser40,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 40", 0, "" };
_cvfloat  _rhuser41 = { &rhuser41,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 41", 0, "" };
_cvfloat  _rhuser42 = { &rhuser42,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 42", 0, "" };
_cvfloat  _rhuser43 = { &rhuser43,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 43", 0, "" };
_cvfloat  _rhuser44 = { &rhuser44,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 44", 0, "" };
_cvfloat  _rhuser45 = { &rhuser45,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 45", 0, "" };
_cvfloat  _rhuser46 = { &rhuser46,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 46", 0, "" };
_cvfloat  _rhuser47 = { &rhuser47,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 47", 0, "" };
_cvfloat  _rhuser48 = { &rhuser48,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 48", 0, "" };

_cvint  _rhdab0s = { &rhdab0s,  
    0, 
    MAX_NUM_RECEIVERS - 1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start receiver to poll", 
0, "" };

_cvint  _rhdab0e = { &rhdab0e,  
    0, 
    MAX_NUM_RECEIVERS - 1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "End receiver to poll", 
0, "" };

_cvfloat  _rhctr = { &rhctr,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cine TR in seconds", 
0, "" };

_cvfloat  _rhcrrtime = { &rhcrrtime,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cine R-R interval in seconds", 
0, "" };

_cvint  _rhcphases = { &rhcphases,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Cine cardiac phases", 
0, "" };

_cvint  _rhaphases = { &rhaphases,  
    0, 
    MAX_CINE_PHASES, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of average acquired Cine cardiac phases", 
0, "" };

_cvint  _rhovl = { &rhovl,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of overlap slices on each interior side of a slab", 
0, "" };


























_cvint  _rhvtype = { &rhvtype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Vascular recon type", 
0, "" };

_cvfloat  _rhvenc = { &rhvenc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon header value for velocity encoding.", 
0, "" };

_cvfloat  _rhvcoefxa = { &rhvcoefxa,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxb = { &rhvcoefxb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxc = { &rhvcoefxc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxd = { &rhvcoefxd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefya = { &rhvcoefya,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyb = { &rhvcoefyb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyc = { &rhvcoefyc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyd = { &rhvcoefyd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefza = { &rhvcoefza,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzb = { &rhvcoefzb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzc = { &rhvcoefzc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzd = { &rhvcoefzd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };





_cvfloat  _rhvmcoef1 = { &rhvmcoef1,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef2 = { &rhvmcoef2,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef3 = { &rhvmcoef3,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef4 = { &rhvmcoef4,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };




_cvfloat  _rhphasescale = { &rhphasescale,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon phase scale factor for Asymmetric FOV", 
0, "" };

_cvfloat  _rhfreqscale = { &rhfreqscale,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Future recon frequency scale factor for Asymmetric FOV", 
0, "" };


_cvint  _rawmode = { &rawmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Raw image reconstruction: 0=off, 1=on.", 
0, "" };





_cvint  _rhileaves = { &rhileaves,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of interleaves", 
0, "" };

_cvint  _rhkydir = { &rhkydir,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ky traversal direction:0=top-down,1=centric,2=bottom-up", 
0, "" };

_cvint  _rhalt = { &rhalt,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Alt read sign:0=no,1=odd/evn,2=halves,3=pairs", 
0, "" };

_cvint  _rhreps = { &rhreps,  
    1, 
    256, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of scan repetitions", 
0, "" };

_cvint  _rhref = { &rhref,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "0=use old phase corr, 1=use new phase corr", 
0, "" };





_cvint  _rhpcthrespts = { &rhpcthrespts,  
    2, 
    32, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Adj pts req'd for amp threshold calc", 
0, "" };

_cvint  _rhpcthrespct = { &rhpcthrespct,  
    0, 
    100, 
    15,  0, 0, 0, 1, 1, 
    VIS, 
    "% of projection's peak magnitude for threshold calc", 
0, "" };

_cvint  _rhpcdiscbeg = { &rhpcdiscbeg,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at beginning of post row FT array", 
0, "" };

_cvint  _rhpcdiscmid = { &rhpcdiscmid,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at middle of post row FT array", 
0, "" };

_cvint  _rhpcdiscend = { &rhpcdiscend,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at end of post row FT array", 
0, "" };

_cvint  _rhpcileave = { &rhpcileave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Interleaves to use for correction: 0=all, 1=1st, 2=1st interpolated", 
0, "" };

_cvint  _rhpcextcorr = { &rhpcextcorr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ext pc file /usr/g/bin/pc.dat: 0=don't use, 1=use", 
0, "" };

_cvint  _rhrefframes = { &rhrefframes,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of frames acquired for an entire REF scan", 
0, "" };


_cvint  _rhpcsnore = { &rhpcsnore,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SNORE processing switch for REF data: 0=off,1=on", 
0, "" };

_cvint  _rhpcspacial = { &rhpcspacial,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PC space specificity: 0=use all, >=1 for one slice", 
0, "" };

_cvint  _rhpctemporal = { &rhpctemporal,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PC temporal specificity: 0=use all, >=1 for one phase", 
0, "" };

_cvfloat  _rhpcbestky = { &rhpcbestky,  
    1.0, 
    1024.0, 
    64.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Best ky index for coefficient remap", 
0, "" };

_cvint  _rhhdbestky = { &rhhdbestky,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Homodyne best ky", 
0, "" };


_cvint  _rhpcinvft = { &rhpcinvft,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inverse row FT switch for post fix time domain image: 0=off, 1=on", 
0, "" };

_cvint  _rhpcctrl = { &rhpcctrl,  
    0, 
    32768, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Control for various phase correction tests", 
0, "" };


_cvint  _rhpctest = { &rhpctest,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Test mode control: 0=off, 1=msgs. to terminal/vectors to disk", 
0, "" };

_cvint  _rhpcgraph = { &rhpcgraph,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UNUSED", 
0, "" };

_cvint  _rhpclin = { &rhpclin,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear correction: 0=off,1=on", 
0, "" };

_cvint  _rhpclinnorm = { &rhpclinnorm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr norm. switch: 0=weight, 1=normalize", 
0, "" };

_cvint  _rhpclinnpts = { &rhpclinnpts,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear correction fit points (for ord>=2)", 
0, "" };

_cvint  _rhpclinorder = { &rhpclinorder,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear fit order: 0=Ky spcfc;1=Kybest;2=line;3,4=poly", 
0, "" };

_cvint  _rhpclinfitwt = { &rhpclinfitwt,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr fit weight: 0=equal,1=via kybest,2=via mag", 
0, "" };

_cvint  _rhpclinavg = { &rhpclinavg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr averaging for order=1: 0=off, 1=on", 
0, "" };

_cvint  _rhpccon = { &rhpccon,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr:0=off,1=on", 
0, "" };

_cvint  _rhpcconnorm = { &rhpcconnorm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr norm. switch: 0=weight, 1=normalize", 
0, "" };

_cvint  _rhpcconnpts = { &rhpcconnpts,  
    2, 
    256, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr fit points", 
0, "" };

_cvint  _rhpcconorder = { &rhpcconorder,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant fit order: 0=vu spcfc;1=Kybest;2=line;3,4=poly", 
0, "" };

_cvint  _rhpcconfitwt = { &rhpcconfitwt,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr fit weight: 0=equal,1=via kybest,2=via mag", 
0, "" };





_cvint  _rhvrgfxres = { &rhvrgfxres,  
    1, 
    XRES_MAX, 
    128,  0, 0, 0, 1, 1, 
    VIS, 
    "VRGF final xres.", 
0, "" };

_cvint  _rhvrgf = { &rhvrgf,   
    0, 
    16, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VRGF switch: 0=off, 1=on.", 
0, "" };





_cvint  _rhbp_corr = { &rhbp_corr,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI bandpass correction:0=off,1=on,2=magnitude only,3=phase only.", 
0, "" };

_cvfloat  _rhrecv_freq_s = { &rhrecv_freq_s,  
    -500.0e3, 
    500.0e3, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "bandpass correction interpolation range starting frequency (Hz).", 
0, "" };

_cvfloat  _rhrecv_freq_e = { &rhrecv_freq_e,  
    -500.0e3, 
    500.0e3, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "bandpass correction interpolation range ending frequency (Hz).", 
0, "" };

_cvint  _rhhniter = { &rhhniter,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "selects the type of homodyne 3reconstrution to be used: 0-I, 1-II.", 
0, "" };

_cvint  _rhfast_rec = { &rhfast_rec,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "tells if the fast receiver is being used and its lpf setting.", 
0, "" };





_cvint  _rhgridcontrol = { &rhgridcontrol,  
    0, 
    65536, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Mask for gridding related controls.", 
0, "" };

_cvint  _rhb0map = { &rhb0map,  
    0, 
    2049, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "B0 field inhomogeneity correction flag and B0 phase map size bitmask", 
0, "" };

_cvint  _rhtediff = { &rhtediff,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TE delay between the two arms for phase map.", 
0, "" };

_cvfloat  _rhradiusa = { &rhradiusa,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inner trajectory part of a variable trajectory.", 
0, "" };

_cvfloat  _rhradiusb = { &rhradiusb,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Outer trajectory part of a variable trajectory.", 
0, "" };

_cvfloat  _rhmaxgrad = { &rhmaxgrad,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum gradient based on FOV and BW.", 
0, "" };

_cvfloat  _rhslewmax = { &rhslewmax,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum slew rate used.", 
0, "" };

_cvfloat  _rhscanfov = { &rhscanfov,  
    0, 
    FOV_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Scan FOV.in mm", 
0, "" };

_cvfloat  _rhtsamp = { &rhtsamp,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sampling time.", 
0, "" };

_cvfloat  _rhdensityfactor = { &rhdensityfactor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Density factor.", 
0, "" };

_cvfloat  _rhdispfov = { &rhdispfov,  
    0.0, 
    FOV_MAX, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Display FOV.in mm", 
0, "" };

_cvint  _rhmotioncomp = { &rhmotioncomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for motion compensation (0=No, 1=Yes).", 
0, "" };

_cvint  _grid_fov_factor = { &grid_fov_factor,  
    1, 
    2, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "k-space oversampling factor for gridding (1 or 2)", 
0, "" };





_cvint  _rhte = { &rhte,  
    0, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for echo time", 
0, "" };

_cvint  _rhte2 = { &rhte2,  
    0, 
    TE_MAX, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for second echo time", 
0, "" };

_cvint  _rhdfm = { &rhdfm,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon CV to activate DFM reconstruction routine : 0=off, 1=on(least-squares method), 3=on(Ahn's method).", 
0, "" };

_cvint  _rhdfmnavsperpass = { &rhdfmnavsperpass,  
    1, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for Maximum number of DFM navigator frames per pass.", 
0, "" };

_cvint  _rhdfmnavsperview = { &rhdfmnavsperview,  
    1, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for number of DFM navigator frames per view.", 
0, "" };

_cvfloat  _rhdfmrbw = { &rhdfmrbw,  
    0, 
    MAXFLOAT, 
    31.25,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for RBW in khz for dfm navigator echo", 
0, "" };

_cvint  _rhdfmptsize = { &rhdfmptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon CV for DFM point size: 2=16 bit data, 4=32 bit data.", 
0, "" };

_cvint  _rhdfmxres = { &rhdfmxres,  
    16, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for DFM xres.", 
0, "" };

_cvint  _rhdfmdebug = { &rhdfmdebug,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DFM recon debug. 0=nothing, 1=write data, 2=read data, 3=2 pass with and without MMC recon.", 
0, "" };

_cvfloat  _rhdfmthreshold = { &rhdfmthreshold,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for DFM threshold.", 
0, "" };


_cvint  _rh_rc_enhance_enable = { &rh_rc_enhance_enable,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "SO TOOLS WORK IN ME2", 
0, "" };

_cvint  _rh_ime_scic_enable = { &rh_ime_scic_enable,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "surface coil intensity correction: 1 if enabled", 
0, "" };

_cvfloat  _rh_ime_scic_edge = { &rh_ime_scic_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _rh_ime_scic_smooth = { &rh_ime_scic_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _rh_ime_scic_focus = { &rh_ime_scic_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Enhanced Recon", 
0, "" };

_cvint  _rh_ime_clariview_type = { &rh_ime_clariview_type,  
    0, 
    256, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "Type ofClariview/Name of Filter", 
0, "" };

_cvfloat  _rh_ime_clariview_edge = { &rh_ime_clariview_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_clariview_smooth = { &rh_ime_clariview_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_clariview_focus = { &rh_ime_clariview_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Clariview", 
0, "" };

_cvint  _rh_ime_definefilter_nr = { &rh_ime_definefilter_nr,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Noise Reduction setting for Define Filter", 
0, "" };

_cvint  _rh_ime_definefilter_sh = { &rh_ime_definefilter_sh,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sharpening setting for Define Filter", 
0, "" };

_cvfloat  _rh_ime_scic_reduction = { &rh_ime_scic_reduction,  
    0.0, 
    2048.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Reduction Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_gauss = { &rh_ime_scic_gauss,  
    0.0, 
    128.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gauss Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_threshold = { &rh_ime_scic_threshold,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Threshold Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_contrast = { &rh_ime_scic_contrast,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Contrast Parameter for SCIC", 
0, "" };

_cvint  _cfscic_allowed = { &cfscic_allowed,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCIC compatibility", 
0, "" };

_cvfloat  _cfscic_edge = { &cfscic_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _cfscic_smooth = { &cfscic_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _cfscic_focus = { &cfscic_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _cfscic_reduction = { &cfscic_reduction,  
    0.0, 
    2048.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Reduction Parameter for SCIC", 
0, "" };

_cvfloat  _cfscic_gauss = { &cfscic_gauss,  
    0.0, 
    128.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gauss Parameter for SCIC", 
0, "" };

_cvfloat  _cfscic_threshold = { &cfscic_threshold,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Threshold Parameter for SCIC", 
0, "" };

_cvfloat  _cfscic_contrast = { &cfscic_contrast,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Contrast Parameter for SCIC", 
0, "" };

_cvint  _piscic = { &piscic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCIC enable", 
0, "" };


_cvint  _cfscenic = { &cfscenic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC support", 
0, "" };

_cvint  _piscenic = { &piscenic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC enable", 
0, "" };

_cvint  _opscenic = { &opscenic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC selected", 
0, "" };

_cvint  _rhscenic_type = { &rhscenic_type,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC type: 0=disable, 1=SCIC, 2=ITK N4, 3=PURE+ITK N4", 
0, "" };


_cvint  _cfn4_allowed = { &cfn4_allowed,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for ITK N4 compatibility", 
0, "" };

_cvfloat  _cfn4_slice_down_sample_rate = { &cfn4_slice_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice down sampling rate Parameter for ITK N4", 
0, "" };

_cvfloat  _cfn4_inplane_down_sample_rate = { &cfn4_inplane_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inplane down sampling rate Parameter for ITK N4", 
0, "" };

_cvint  _cfn4_num_levels_max = { &cfn4_num_levels_max,  
    0, 
    9, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of levels for ITK N4", 
0, "" };

_cvint  _cfn4_num_iterations_max = { &cfn4_num_iterations_max,  
    0, 
    200, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of iterations for ITK N4", 
0, "" };

_cvfloat  _cfn4_convergence_threshold = { &cfn4_convergence_threshold,  
    0.0, 
    1.0, 
    0.001,  0, 0, 0, 1, 1, 
    VIS, 
    "Convergence threshold of iterations for ITK N4", 
0, "" };

_cvint  _cfn4_gain_clamp_mode = { &cfn4_gain_clamp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gain clamp mode for ITK N4", 
0, "" };

_cvfloat  _cfn4_gain_clamp_value = { &cfn4_gain_clamp_value,  
    0.0, 
    5.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Intensity correction threshold for ITK N4", 
0, "" };


_cvfloat  _rhn4_slice_down_sample_rate = { &rhn4_slice_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice down sampling rate Parameter for ITK N4", 
0, "" };

_cvfloat  _rhn4_inplane_down_sample_rate = { &rhn4_inplane_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inplane down sampling rate Parameter for ITK N4", 
0, "" };

_cvint  _rhn4_num_levels_max = { &rhn4_num_levels_max,  
    0, 
    9, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of levels for ITK N4", 
0, "" };

_cvint  _rhn4_num_iterations_max = { &rhn4_num_iterations_max,  
    0, 
    200, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of iterations for ITK N4", 
0, "" };

_cvfloat  _rhn4_convergence_threshold = { &rhn4_convergence_threshold,  
    0.0, 
    1.0, 
    0.002,  0, 0, 0, 1, 1, 
    VIS, 
    "Convergence threshold of iterations for ITK N4", 
0, "" };

_cvint  _rhn4_gain_clamp_mode = { &rhn4_gain_clamp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gain clamp mode for ITK N4", 
0, "" };

_cvfloat  _rhn4_gain_clamp_value = { &rhn4_gain_clamp_value,  
    0.0, 
    5.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Intensity correction threshold for ITK N4", 
0, "" };


_cvint  _rhpure_gain_clamp_mode = { &rhpure_gain_clamp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gain clamp mode for PURE", 
0, "" };

_cvfloat  _rhpure_gain_clamp_value = { &rhpure_gain_clamp_value,  
    0.0, 
    5.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Intensity correction threshold for PURE", 
0, "" };


_cvint  _rhphsen_pixel_offset = { &rhphsen_pixel_offset,  
    -32768, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "pixel offset value for Phase sensitive images", 
0, "" };



_cvint  _rhapp = { &rhapp,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Automatic post processing technique", 
    0, ""
};

_cvint  _rhapp_option = { &rhapp_option,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Tensor Post processing options", 
    0, ""
};



_cvint  _rhncoilsel = { &rhncoilsel,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Auto N-Coil selection", 
    0, ""
};

_cvint  _rhncoillimit = { &rhncoillimit,  
    0, 
    100, 
    45,  0, 0, 0, 1, 1, 
    VIS, 
    "Coil Selection limit", 
    0, ""
};

_cvint  _rhrefframep = { &rhrefframep,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of frames per pass for a REF scan", 
    0, ""
};

_cvint  _rhscnframe = { &rhscnframe,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of frames acquired for an entire SCAN", 
    0, ""
};

_cvint  _rhpasframe = { &rhpasframe,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of frames per pass", 
    0, ""
};

_cvint  _rhpcfitorig = { &rhpcfitorig,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=adjust view indices so bestky view = 0", 
    0, ""
};

_cvint  _rhpcshotfirst = { &rhpcshotfirst,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "First view within an echo group", 
    0, ""
};

_cvint  _rhpcshotlast = { &rhpcshotlast,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Last view within an echo group", 
    0, ""
};

_cvint  _rhpcmultegrp = { &rhpcmultegrp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 = force pts from other echo groups to be used", 
    0, ""
};

_cvint  _rhpclinfix = { &rhpclinfix,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=force neg slope to pos,2=fix to rhpclinslope", 
    0, ""
};

_cvfloat  _rhpclinslope = { &rhpclinslope,  
    -6.28318, 
    6.28318, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value for linear correction slope if fixed", 
    0, ""
};

_cvint  _rhpcconfix = { &rhpcconfix,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=force neg slope to pos,2=fix to rhpcconslope", 
    0, ""
};

_cvfloat  _rhpcconslope = { &rhpcconslope,  
    -6.28318, 
    6.28318, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value for const correction slope if fixed", 
    0, ""
};

_cvint  _rhpccoil = { &rhpccoil,  
    0, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "0=coil specific, 1=use 1, 2=use 2, 3=use 3, 4=use 4", 
    0, ""
};

_cvfloat  _rhmaxcoef1a = { &rhmaxcoef1a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1b = { &rhmaxcoef1b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1c = { &rhmaxcoef1c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1d = { &rhmaxcoef1d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef2a = { &rhmaxcoef2a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2b = { &rhmaxcoef2b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2c = { &rhmaxcoef2c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2d = { &rhmaxcoef2d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef3a = { &rhmaxcoef3a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3b = { &rhmaxcoef3b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3c = { &rhmaxcoef3c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3d = { &rhmaxcoef3d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 3", 
    0, ""
};

_cvint  _rhdptype = { &rhdptype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion / Perfusion imaging option", 
    0, ""
};

_cvint  _rhnumbvals = { &rhnumbvals,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion b values", 
0, "" };

_cvint  _rhdifnext2 = { &rhdifnext2,   
    0,  
    MAXINT,  
    1,  0, 0, 0, 1, 1,  
    VIS,  
    "Number of NEX for diffusion T2 image", 
0, "" };

_cvint  _rhnumdifdirs = { &rhnumdifdirs,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of diffusion directions for DWI", 
0, "" };

_cvint  _rhutctrl = { &rhutctrl,  
    0, 
    MAXINT,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon utility control", 
    0, ""
};

_cvfloat  _rhzipfact = { &rhzipfact,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon slice ZIP factor.", 
    0, ""
};

_cvint  _rhfcinemode = { &rhfcinemode,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fast CINE mode bitmask.", 
    0, ""
};

_cvint  _rhfcinearw = { &rhfcinearw,  
    0, 
    100, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fast CINE Arrhythmia Rejection Window (ARW)", 
    0, ""
};

_cvint  _rhvps = { &rhvps,  
    1, 
    1024, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "Views per Segment (VPS)", 
    0, ""
};

_cvint  _rhvvsaimgs = { &rhvvsaimgs,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of original images.", 
    0, ""
};

_cvint  _rhvvstr = { &rhvvstr,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Variable-view sharing TR in us", 
    0, ""
};

_cvint  _rhvvsgender = { &rhvvsgender,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gender (0=Male, 1=Female)", 
    0, ""
};


_cvint  _rhgradmode = { &rhgradmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rhfatwater = { &rhfatwater,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fat water imaging control flag.", 
    0, ""
};

_cvint  _rhfiesta = { &rhfiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon type for FIESTA. 1:Averaging 2:Sum Square 3:MIP 256:DFT on/off 6:SOSOnMag+AvgOnPhase", 
    0, ""
};

_cvint  _rhlcfiesta = { &rhlcfiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon type for LCFIESTA. 0:off 1:water&both 2:fat&both 3:water&fat", 
    0, ""
};

_cvfloat  _rhlcfiesta_phase = { &rhlcfiesta_phase,  
    0.0, 
    0.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "LCFIESTA combine phase value[radian]", 
    0, ""
};




_cvint  _rhdwnavview = { &rhdwnavview,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of views for navigator echoes", 
    0, ""
};

_cvint  _rhdwnavcorecho = { &rhdwnavcorecho,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of echoes for actual navigator correction", 
    0, ""
};

_cvint  _rhdwnavsview = { &rhdwnavsview,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start view for phase connection process", 
    0, ""
};

_cvint  _rhdwnaveview = { &rhdwnaveview,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "End view for phase connection process", 
    0, ""
};

_cvint  _rhdwnavsshot = { &rhdwnavsshot,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start shot for delta phase estimation in navigator echoes", 
    0, ""
};

_cvint  _rhdwnaveshot = { &rhdwnaveshot,  
    1, 
    512, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "End shot for delta phase estimation in navigator echoes", 
    0, ""
};

_cvfloat  _rhdwnavcoeff = { &rhdwnavcoeff,  
    0.0, 
    1.0, 
    0.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Coefficient for amount of phase connection", 
    0, ""
};







_cvint  _rhdwnavcor = { &rhdwnavcor,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Navigator correction control for DW-EPI.", 
    0, ""
};


_cvfloat  _rhassetsl_R = { &rhassetsl_R,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice ASSET encoding reduction factor", 
    0, ""
};

_cvfloat  _rhasset_slwrap = { &rhasset_slwrap,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Oversampling factor as a fraction of Rxed slices", 
    0, ""
};



_cvint  _rh3dwintype = { &rh3dwintype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Modified Hanning window;  1 = Modified Tukey window", 
    0, ""
};

_cvfloat  _rh3dwina = { &rh3dwina,  
    0.0, 
    1.0, 
    0.1,  0, 0, 0, 1, 1, 
    VIS, 
    "Degree of  apodization; 0.0 = Boxcar; 1.0 = Hanning", 
    0, ""
};

_cvfloat  _rh3dwinq = { &rh3dwinq,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Apodization at ends, 0.0 = Max apodization; 1.0 = Boxcar", 
    0, ""
};


_cvint  _rhectricks_num_regions = { &rhectricks_num_regions, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rhectricks_input_regions = { &rhectricks_input_regions, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };













_cvint  _rhretro_control = { &rhretro_control,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RetroPC configuration control", 
    0, ""
};

_cvint  _rhetl = { &rhetl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RetroPC echo train length", 
    0, ""
};


_cvint  _rhleft_blank = { &rhleft_blank,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of data elements at start of frame to zero", 
    0, ""
};

_cvint  _rhright_blank = { &rhright_blank,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of data elements at end of frame to zero", 
    0, ""
};




_cvfloat  _rhspecwidth = { &rhspecwidth,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS,  
    "Recon spectral width", 
    0, ""
};

_cvint  _rhspeccsidims = { &rhspeccsidims,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "Recon number of CSI dimensions", 
    0, ""
};

_cvint  _rhspecrescsix = { &rhspecrescsix,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of X dimension", 
    0, ""
};

_cvint  _rhspecrescsiy = { &rhspecrescsiy,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of Y dimension", 
    0, ""
};

_cvint  _rhspecrescsiz = { &rhspecrescsiz,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of Z dimension", 
    0, ""
};

_cvfloat  _rhspecroilenx = { &rhspecroilenx,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in X dimension", 
    0, ""
};

_cvfloat  _rhspecroileny = { &rhspecroileny,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in Y dimension", 
    0, ""
};

_cvfloat  _rhspecroilenz = { &rhspecroilenz,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in Z dimension", 
    0, ""
};

_cvfloat  _rhspecroilocx = { &rhspecroilocx,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in X dimension", 
    0, ""
};

_cvfloat  _rhspecroilocy = { &rhspecroilocy,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in Y dimension", 
    0, ""
};

_cvfloat  _rhspecroilocz = { &rhspecroilocz,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in Z dimension", 
    0, ""
};

_cvint  _rhexciterusage = { &rhexciterusage,  
    0, 
    65535, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter usage bitmask: 1 activates SPS control", 
    0, ""
};

_cvint  _rhexciterfreqs = { &rhexciterfreqs,  
    0, 
    65535, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter freq. usage bitmask: 0 precludes broadband", 
    0, ""
};


_cvint  _rhwiener = { &rhwiener,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };

_cvfloat  _rhwienera = { &rhwienera,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Demodulation denoising", 
0, "" };

_cvfloat  _rhwienerb = { &rhwienerb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Demodulation gain", 
0, "" };

_cvfloat  _rhwienert2 = { &rhwienert2,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2 for demodulation", 
0, "" };

_cvfloat  _rhwieneresp = { &rhwieneresp,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo spacing in seconds", 
0, "" };

_cvint  _rhflipfilter = { &rhflipfilter,  
    0, 
    1000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for PSD generated filter", 
0, "" };

_cvint  _rhdbgrecon = { &rhdbgrecon,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };

_cvint  _rhech2skip = { &rhech2skip,  
    0, 
    2048, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };














_cvint  _rhrcideal = { &rhrcideal,  
    0, 
    255, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "IDEAL processing indicator", 
    0, ""
};





















_cvint  _rhrcdixproc = { &rhrcdixproc,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for choice of images to be reconstructed by IDEAL processing", 
    0, ""

};

























_cvint  _rhrcidealctrl = { &rhrcidealctrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "IDEAL processing control", 
    0, ""

};

_cvint  _rhdf = { &rhdf,  
    0, 
    MAXINT, 
    FATWATER_DIXFREQ_1_5T,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delta frequency(Hz) used in IDEAL", 
0, "" };

_cvint  _rhmedal_mode = { &rhmedal_mode,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL recon mode: 0=off, 1:PSIR, 2:MEDAL", 
    0, ""
};

_cvint  _rhmedal_nstack_size = { &rhmedal_nstack_size,  
    18, 
    255, 
    54,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL nstack", 
    0, ""
};

_cvint  _rhmedal_echo_order = { &rhmedal_echo_order,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL echo order: 0=OOP/IP, 1=IP/OOP", 
    0, ""
};

_cvint  _rhmedal_up_kernel_size = { &rhmedal_up_kernel_size,  
    4, 
    2048, 
    15,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL up kernel size", 
    0, ""
};

_cvint  _rhmedal_down_kernel_size = { &rhmedal_down_kernel_size,  
    4, 
    2048, 
    8,  0, 0, 0, 1, 1,  
    VIS, 
    "MEDAL down kernel size", 
    0, ""
};

_cvint  _rhmedal_smooth_kernel_size = { &rhmedal_smooth_kernel_size,  
    4, 
    2048, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL smooth kernel size", 
    0, ""
};

_cvint  _rhmedal_starting_slice = { &rhmedal_starting_slice,  
    0, 
    2048, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL starting slice", 
    0, ""
};

_cvint  _rhmedal_ending_slice = { &rhmedal_ending_slice,  
    0, 
    2048, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL ending slice", 
    0, ""
};

_cvfloat  _rhmedal_param = { &rhmedal_param,  
    0.1, 
    5.0, 
    3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "MEDAL parameter", 
    0, ""
};

_cvint  _rhvibrant = { &rhvibrant,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT/VIBRANT-FLEX recon flag", 
    0, ""
};

_cvint  _rhkacq_uid = { &rhkacq_uid,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Parallel Imaging kacq file unique ID", 
    0, ""
};


_cvint  _rhnex_unacquired = { &rhnex_unacquired,  
    1, 
    150, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "NEX for unacquired encodes", 
0, "" };





_cvint  _rhdiskacqctrl = { &rhdiskacqctrl,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Acquisition to Disk Control Variable", 
    0, ""	
};


_cvint  _rhechopc_extra_bot = { &rhechopc_extra_bot,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Ky data length of extra frame space for phase correction", 
    0, ""	
};

_cvint  _rhechopc_ylines = { &rhechopc_ylines,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Ky lines for primary/reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_primary_yfirst = { &rhechopc_primary_yfirst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Location of first line of primary reference data", 
    0, ""	
};

_cvint  _rhechopc_reverse_yfirst = { &rhechopc_reverse_yfirst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Location of first line of reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_zlines = { &rhechopc_zlines,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Kz lines for primary/reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_yxfitorder = { &rhechopc_yxfitorder,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "fitting order of phase correction", 
    0, ""	
};

_cvint  _rhechopc_ctrl = { &rhechopc_ctrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Control flag for phase correction", 
    0, ""	
};

_cvint  _rhchannel_combine_filter_type = { &rhchannel_combine_filter_type,  
    RHCHANNEL_COMBINE_FILTER_TYPE_NONE, 
    RHCHANNEL_COMBINE_FILTER_TYPE_HANNING, 
    RHCHANNEL_COMBINE_FILTER_TYPE_NONE,  0, 0, 0, 1, 1, 
    VIS, 
    "Filter type for phase filtering. 0- None, 1-Bessel, 2-Hanning", 
    0, ""
};

_cvfloat  _rhchannel_combine_filter_width = { &rhchannel_combine_filter_width,  
    0.05, 
    1.0, 
    0.3,  0, 0, 0, 1, 1, 
    VIS, 
    "Percentage of pixels under main lobe width", 
    0, ""
};

_cvfloat  _rhchannel_combine_filter_beta = { &rhchannel_combine_filter_beta,  
    0, 
    MAXFLOAT, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Beta value for the Modified Bessel Filter", 
    0, ""
};

_cvfloat  _rh_low_pass_nex_filter_width = { &rh_low_pass_nex_filter_width,  
    0.0, 
    MAXFLOAT, 
    8.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase correction filter width for Complex NEX", 
0, "" };

_cvint  _rh3dgw_interptype = { &rh3dgw_interptype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "3D GradWarp interpolation type", 
    0, ""
};


_cvint  _rhrc3dcinectrl = { &rhrc3dcinectrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "3dcine processing control", 
    0, ""		
};


_cvint  _rhncycles_cine = { &rhncycles_cine,  
    0, 
    18000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "total num of cardiac cycles in 3dcine", 
    0, ""
};


_cvint  _rhnvircchannel = { &rhnvircchannel,  
    0, 
    128, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "virtual coil channels with coil compression", 
    0, ""
};









_cvint  _rhrc_cardt1map_ctrl = { &rhrc_cardt1map_ctrl,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac T1 mapping recon control bitmask", 
    0, ""
};







_cvint  _rhrc_moco_ctrl = { &rhrc_moco_ctrl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Motion Correction recon control bitmask", 
    0, ""
};







_cvint  _rhrc_algorithm_ctrl = { &rhrc_algorithm_ctrl,  
    0, 
    65536, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon algorithm control bitmask", 
    0, ""
};




_cvint  _ihtr = { &ihtr,  
    TR_MIN, 
    TR_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TR annonation for current image.", 
0, "" };

_cvint  _ihti = { &ihti,  
    0, 
    TI_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TI annotation for current image.", 
0, "" };

_cvint  _ihtdel1 = { &ihtdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delay from trigger to center of RF1 pulse.", 
0, "" };

_cvfloat  _ihnex = { &ihnex,  
    0, 
    NEX_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of excitations for current image.", 
0, "" };

_cvfloat  _ihflip = { &ihflip,  
    0, 
    180, 
    90,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for the current image.", 
0, "" };

_cvint  _ihte1 = { &ihte1,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 1.", 
0, "" };

_cvint  _ihte2 = { &ihte2,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 2.", 
0, "" };

_cvint  _ihte3 = { &ihte3,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 3.", 
0, "" };

_cvint  _ihte4 = { &ihte4,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 4.", 
0, "" };

_cvint  _ihte5 = { &ihte5,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 5.", 
0, "" };

_cvint  _ihte6 = { &ihte6,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 6.", 
0, "" };

_cvint  _ihte7 = { &ihte7,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 7.", 
0, "" };

_cvint  _ihte8 = { &ihte8,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 8.", 
0, "" };

_cvint  _ihte9 = { &ihte9,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 9.", 
0, "" };

_cvint  _ihte10 = { &ihte10,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 10.", 
0, "" };

_cvint  _ihte11 = { &ihte11,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 11.", 
0, "" };

_cvint  _ihte12 = { &ihte12,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 12.", 
0, "" };

_cvint  _ihte13 = { &ihte13,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 13.", 
0, "" };

_cvint  _ihte14 = { &ihte14,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 14.", 
0, "" };

_cvint  _ihte15 = { &ihte15,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 15.", 
0, "" };

_cvint  _ihte16 = { &ihte16,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 16.", 
0, "" };

_cvint  _ihdixonte = { &ihdixonte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };

_cvint  _ihdixonipte = { &ihdixonipte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective IP TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };


_cvint  _ihdixonoopte = { &ihdixonoopte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective OOP TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };

_cvfloat  _ihvbw1 = { &ihvbw1,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 1.", 
0, "" };

_cvfloat  _ihvbw2 = { &ihvbw2,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 2.", 
0, "" };

_cvfloat  _ihvbw3 = { &ihvbw3,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 3.", 
0, "" };

_cvfloat  _ihvbw4 = { &ihvbw4,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 4.", 
0, "" };

_cvfloat  _ihvbw5 = { &ihvbw5,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 5.", 
0, "" };

_cvfloat  _ihvbw6 = { &ihvbw6,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 6.", 
0, "" };

_cvfloat  _ihvbw7 = { &ihvbw7,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 7.", 
0, "" };

_cvfloat  _ihvbw8 = { &ihvbw8,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 8.", 
0, "" };

_cvfloat  _ihvbw9 = { &ihvbw9,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 9.", 
0, "" };

_cvfloat  _ihvbw10 = { &ihvbw10,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 10.", 
0, "" };

_cvfloat  _ihvbw11 = { &ihvbw11,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 11.", 
0, "" };

_cvfloat  _ihvbw12 = { &ihvbw12,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 12.", 
0, "" };

_cvfloat  _ihvbw13 = { &ihvbw13,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 13.", 
0, "" };

_cvfloat  _ihvbw14 = { &ihvbw14,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 14.", 
0, "" };

_cvfloat  _ihvbw15 = { &ihvbw15,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 15.", 
0, "" };

_cvfloat  _ihvbw16 = { &ihvbw16,  
    0.0, 
    2000000, 
    16,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 16.", 
0, "" };

_cvint  _ihnegscanspacing = { &ihnegscanspacing,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = sp, 1 = ov for slice spacing", 
    0, ""
};

_cvint  _ihoffsetfreq = { &ihoffsetfreq,  
    400, 
    1600, 
    1200,  0, 0, 0, 1, 1, 
    INVIS, 
    "MT offset frequency (hz)", 
    0, ""
};

_cvint  _ihbsoffsetfreq = { &ihbsoffsetfreq,  
    -5000, 
    5000, 
    4000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bloch Siegert RF offset frequency (hz)", 
    0, ""
};

_cvint  _iheesp = { &iheesp,  
    0, 
    10000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annotation for effective echo spacing (usec)", 
    0, ""
};

_cvint  _ihfcineim = { &ihfcineim,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Fast CINE interpolation method (0=None, 1=Linear, 2=Nearest Neighbor)", 
    0, ""
};

_cvint  _ihfcinent = { &ihfcinent,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Fast CINE normalization type (0=None, 1=Systole-Diastole, 2=Uniform)", 
    0, ""
};

_cvint  _ihbspti = { &ihbspti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    INVIS, 
    "Blood Suppression TI annotation for current image.", 
    0, ""
};

_cvfloat  _ihtagfa = { &ihtagfa,  
    0.0, 
    180.0, 
    180.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Cardiac Tagging Flip Angle", 
    0, ""
};

_cvfloat  _ihtagor = { &ihtagor,  
    -180.0,  
    180.0, 
    45.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Cardiac Tagging Orientation", 
    0, ""
};


_cvfloat  _ih_idealdbg_cv1 = { &ih_idealdbg_cv1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 1", 0, "" };
_cvfloat  _ih_idealdbg_cv2 = { &ih_idealdbg_cv2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 2", 0, "" };
_cvfloat  _ih_idealdbg_cv3 = { &ih_idealdbg_cv3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 3", 0, "" };
_cvfloat  _ih_idealdbg_cv4 = { &ih_idealdbg_cv4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 4", 0, "" };
_cvfloat  _ih_idealdbg_cv5 = { &ih_idealdbg_cv5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 5", 0, "" };
_cvfloat  _ih_idealdbg_cv6 = { &ih_idealdbg_cv6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 6", 0, "" };
_cvfloat  _ih_idealdbg_cv7 = { &ih_idealdbg_cv7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 7", 0, "" };
_cvfloat  _ih_idealdbg_cv8 = { &ih_idealdbg_cv8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 8", 0, "" };
_cvfloat  _ih_idealdbg_cv9 = { &ih_idealdbg_cv9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 9", 0, "" };
_cvfloat  _ih_idealdbg_cv10 = { &ih_idealdbg_cv10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 10", 0, "" };
_cvfloat  _ih_idealdbg_cv11 = { &ih_idealdbg_cv11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 11", 0, "" };
_cvfloat  _ih_idealdbg_cv12 = { &ih_idealdbg_cv12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 12", 0, "" };
_cvfloat  _ih_idealdbg_cv13 = { &ih_idealdbg_cv13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 13", 0, "" };
_cvfloat  _ih_idealdbg_cv14 = { &ih_idealdbg_cv14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 14", 0, "" };
_cvfloat  _ih_idealdbg_cv15 = { &ih_idealdbg_cv15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 15", 0, "" };
_cvfloat  _ih_idealdbg_cv16 = { &ih_idealdbg_cv16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 16", 0, "" };
_cvfloat  _ih_idealdbg_cv17 = { &ih_idealdbg_cv17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 17", 0, "" };
_cvfloat  _ih_idealdbg_cv18 = { &ih_idealdbg_cv18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 18", 0, "" };
_cvfloat  _ih_idealdbg_cv19 = { &ih_idealdbg_cv19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 19", 0, "" };
_cvfloat  _ih_idealdbg_cv20 = { &ih_idealdbg_cv20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 20", 0, "" };
_cvfloat  _ih_idealdbg_cv21 = { &ih_idealdbg_cv21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 21", 0, "" };
_cvfloat  _ih_idealdbg_cv22 = { &ih_idealdbg_cv22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 22", 0, "" };
_cvfloat  _ih_idealdbg_cv23 = { &ih_idealdbg_cv23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 23", 0, "" };
_cvfloat  _ih_idealdbg_cv24 = { &ih_idealdbg_cv24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 24", 0, "" };
_cvfloat  _ih_idealdbg_cv25 = { &ih_idealdbg_cv25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 25", 0, "" };
_cvfloat  _ih_idealdbg_cv26 = { &ih_idealdbg_cv26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 26", 0, "" };
_cvfloat  _ih_idealdbg_cv27 = { &ih_idealdbg_cv27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 27", 0, "" };
_cvfloat  _ih_idealdbg_cv28 = { &ih_idealdbg_cv28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 28", 0, "" };
_cvfloat  _ih_idealdbg_cv29 = { &ih_idealdbg_cv29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 29", 0, "" };
_cvfloat  _ih_idealdbg_cv30 = { &ih_idealdbg_cv30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 30", 0, "" };
_cvfloat  _ih_idealdbg_cv31 = { &ih_idealdbg_cv31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 31", 0, "" };
_cvfloat  _ih_idealdbg_cv32 = { &ih_idealdbg_cv32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 32", 0, "" };


_cvint  _ihlabeltime = { &ihlabeltime,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D ASL labeling time (msec)", 
    0, ""
};

_cvint  _ihpostlabeldelay = { &ihpostlabeldelay,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D ASL post label delay time (usec)", 
    0, ""
};

_cvint  _ihnew_series = { &ihnew_series,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Put image type in a new series. Bit mask 1-Phase, 2-Real, 3-Imag", 
    0, ""
};


_cvint  _ihcardt1map_hb_pattern = { &ihcardt1map_hb_pattern,  
    0, 
    999999999, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartbeat pattern for cardiac T1 mapping", 
    0, ""
};



_cvint  _dbdt_option_key_status = { &dbdt_option_key_status,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "existence of dbdt option key", 
    0, ""
};

_cvint  _dbdt_mode = { &dbdt_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=first controlled dbdt mode", 
    0, ""
};

_cvint  _opsarmode = { &opsarmode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=first, 2=second, 3=low sar controlled sar mode", 
    0, ""
};

_cvint  _cfdbdttype = { &cfdbdttype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=duration dependent (cfdbdtper), 1=uniform limit (cfdbdtts)", 
    0, ""
};

_cvfloat  _cfrinf = { &cfrinf,  
    0.0, 
    200.0, 
    23.4,  0, 0, 0, 1, 1, 
    INVIS, 
    "new REILLYDBDTINF", 
    0, ""
};

_cvint  _cfrfact = { &cfrfact,  
    0, 
    10000, 
    334,  0, 0, 0, 1, 1, 
    INVIS, 
    "new REILLYDBDTFACTOR", 
    0, ""
};

_cvfloat  _cfdbdtper_norm = { &cfdbdtper_norm,  
    0.0, 
    100.0, 
    80.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new F - normal mode", 
    0, ""
};

_cvfloat  _cfdbdtper_cont = { &cfdbdtper_cont,  
    0.0, 
    100.0, 
    100.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new F - first controlled mode", 
    0, ""
};

_cvfloat  _cfdbdtper_max = { &cfdbdtper_max,  
    100.0, 
    1000.0, 
    200.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new max F - any mode", 
    0, ""
};




_cvint  _cfnumicn = { &cfnumicn,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of icn's ", 
    0, ""
};

_cvint  _cfdppericn = { &cfdppericn,  
    2, 
    32, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of dp per icn ", 
    0, ""
};





_cvint  _cfgradcoil = { &cfgradcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _cfswgut = { &cfswgut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfswrfut = { &cfswrfut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfswssput = { &cfswssput, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfhwgut = { &cfhwgut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhwrfut = { &cfhwrfut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhwssput = { &cfhwssput, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfoption = { &cfoption,  
    SEC_CODE_INIT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Code for coil option check", 
    0, ""
};







_cvint  _cfrfboardtype = { &cfrfboardtype,  
    RF_BOARD_RRF, 
    RF_BOARD_DCERD, 
    RF_BOARD_RRF,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF Board Type 0:RRF 1:DCERD", 
    0, ""
};




_cvint  _psd_board_type = { &psd_board_type,  
    PSDCERD, 
    PSDDVMR, 
    PSDDVMR,  0, 0, 0, 1, 1, 
    VIS, 
    "type of transceiver", 
    0, ""
};




_cvint  _opdfm = { &opdfm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Activate DFM : 0=off, 1=on.", 
    0, ""
};

_cvint  _opdfmprescan = { &opdfmprescan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Enable dfm Prescan : 0=off, 1=on.", 
    0, ""
};

_cvint  _cfdfm = { &cfdfm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DFM Available   : 0=off, 1=on.", 
    0, ""
};

_cvint  _cfdfmTG = { &cfdfmTG,  
    0, 
    200, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "TG for DFM Coil.", 
    0, ""
};

_cvint  _cfdfmR1 = { &cfdfmR1,  
    0, 
    13, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "R1 for DFM Coil.", 
    0, ""
};

_cvint  _cfdfmDX = { &cfdfmDX,  
    -1000000, 
    1000000, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DX for DFM Coil", 
    0, ""
};


_cvint  _derate_ACGD = { &derate_ACGD,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Derate ACGD to 2.2G/cm", 
    0, ""
};


_cvint  _rhextra_frames_top = { &rhextra_frames_top,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "top of EPI internal ref frames", 
    0, ""
};

_cvint  _rhextra_frames_bot = { &rhextra_frames_bot,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "bottom of EPI internal ref frames", 
    0, ""
};

_cvint  _rhpc_ref_start = { &rhpc_ref_start,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Start of ref phase correction", 
    0, ""
};
_cvint  _rhpc_ref_stop = { &rhpc_ref_stop,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "End of ref phase correction", 
    0, ""
};

_cvint  _rhpc_ref_skip = { &rhpc_ref_skip,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ref phase correction frames to skip", 
    0, ""
};

_cvint  _opaxial_slice = { &opaxial_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of axial slices in 3-Plane", 
    0, ""
};

_cvint  _opsagittal_slice = { &opsagittal_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of sagittal slices in 3-Plane", 
    0, ""
};

_cvint  _opcoronal_slice = { &opcoronal_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of coronal slices in 3-Plane", 
    0, ""
};

_cvint  _opvrg = { &opvrg,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VERSE: 0=off, 1=on", 
    0, "The VERSE imaging option is not supported in this scan."
};

_cvint  _opmart = { &opmart,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MART: 0=off, 1=on", 
    0, "The MART imaging option is not supported in this scan."
};

_cvint  _piassetscrn = { &piassetscrn,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET", 
    0, ""
};


_cvint  _opseriessave = { &opseriessave,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Save series pressed?: 0-No, 1-Yes", 
    0, ""
};


_cvint  _opt1map = { &opt1map,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T1Map CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _opt2map = { &opt2map,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2Map CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _opmer2 = { &opmer2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "R2* CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _rhnew_wnd_level_flag = { &rhnew_wnd_level_flag,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for New Window Width and Window Level Algorithm", 
    0, "This must be 0 or 1"
};

_cvint  _rhwnd_image_hist_area = { &rhwnd_image_hist_area,  
    10, 
    100, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of image (centered) which in included in the calculation", 
    0, "rhwnd_image_hist_area should be between 10 to 100"
};

_cvfloat  _rhwnd_high_hist = { &rhwnd_high_hist,  
    0.0, 
    100.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of pixels with highest values removed from calculation", 
    0, "rhwnd_high_hist should be between 0.0 and 100.0"
};

_cvfloat  _rhwnd_lower_hist = { &rhwnd_lower_hist,  
    0.0,  
    100.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of pixels with lowest values removed from the calculation", 
    0, "rhwnd_lower_hist should be between 0.0 and 100.0"
};


_cvint  _rhrcmavric_control = { &rhrcmavric_control,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Reconstruction Control", 
    0, ""
};





_cvint  _rhrcmavric_image = { &rhrcmavric_image,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Output Image", 
    0, ""
};











_cvint  _rhrcmavric_bin_separation = { &rhrcmavric_bin_separation,  
    0, 
    20000, 
    1000,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Bin Separation Frequency in Hz", 
    0, ""
};


_cvint  _cfrfupa = { &cfrfupa,  
    -MAXINT, 
    0, 
    -50,  0, 0, 0, 1, 1, 
    VIS, 
    "PRE-RF Unblank time (us)", 
    0, ""
};

_cvint  _cfrfupd = { &cfrfupd,  
    0, 
    MAXINT, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "POST-RF Unblank time (us) ", 
    0, ""
};

_cvint  _cfrfminblank = { &cfrfminblank,  
    -MAXINT, 
    MAXINT, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum blank time (us)", 
    0, ""
};

_cvint  _cfrfminunblk = { &cfrfminunblk,  
    -MAXINT, 
    MAXINT, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum un-blank time (us)", 
    0, ""
};

_cvint  _cfrfminblanktorcv = { &cfrfminblanktorcv,  
    -MAXINT, 
    MAXINT, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum blank to rcv time (us)", 
    0, ""
};

_cvfloat  _cfrfampftconst = { &cfrfampftconst,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.784,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability const term coefficient", 
    0, ""
};

_cvfloat  _cfrfampftlinear = { &cfrfampftlinear,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability linear term coefficient", 
    0, ""
};

_cvfloat  _cfrfampftquadratic = { &cfrfampftquadratic,  
    -MAXFLOAT, 
    MAXFLOAT, 
    15.125,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability quadratic term coefficient", 
    0, ""
};

_cvint  _opradialrx = { &opradialrx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The flag to indicate whether radial slices are prescribed", 
0, "" };

_cvint  _cfsupportreceivefreqbands = { &cfsupportreceivefreqbands,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The flag to indicate whether system support receive frequency bands to avoid CNT", 
    0, ""
};

_cvfloat  _cfcntfreefreqlow = { &cfcntfreefreqlow,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Coherent noise free frequency low bound", 
    0, ""
};

_cvfloat  _cfcntfreefreqhigh = { &cfcntfreefreqhigh,  
    -MAXFLOAT,    
    MAXFLOAT, 
    10000.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Coherent noise free frequency high bound", 
    0, ""  
};


_cvint  _optracq = { &optracq,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Acqs & TR for Fixed Acqs", 
    0, ""
};


_cvint  _opswift = { &opswift,   
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SWIFT Application on=1/off=0", 
    0, "opswift should be 0 or 1"
};

_cvint  _rhswiftenable = { &rhswiftenable,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Swift enable: bit 0, Rcvr noise switch: bit 1", 
0, "" };

_cvint  _rhnumCoilConfigs = { &rhnumCoilConfigs,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "How many different coils in the data acq table?", 
0, "" };

_cvint  _rhnumslabs = { &rhnumslabs,  
    1, 
    MAXVQUANT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of slabs for 3D for recon", 
0, "" };


_cvint  _opncoils = { &opncoils,  
    1, 
    (MAX_COIL_SETS), 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "The number of coil configurations in coilInfo and volRecCoilInfo", 
0, "" };




_cvint  _rtsar_first_series_flag = { &rtsar_first_series_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "First Series Flag for RT SAR feature. 0 = off, 1 = on", 
0, "" };

_cvint  _rtsar_enable_flag = { &rtsar_enable_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable flag for RT SAR feature. 0 = off, 1 = on", 
0, "" };

_cvint  _measured_TG = { &measured_TG,  
    -1, 
    400, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Measured TG for FTG/APS1 entry point from prescan", 
0, "" };

_cvint  _predicted_TG = { &predicted_TG,  
    -1, 
    400, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Predicted TG for FTG/APS1 entry point from PSD", 
0, "" };

_cvfloat  _sar_correction_factor = { &sar_correction_factor,  
    0.001, 
    1000.0, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "RT SAR feature - SAR correction factor from SCAN", 
0, "" };

_cvint  _gradHeatMethod = { &gradHeatMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Heating Method (0=Traditional, 1=Optimized).", 
    0, ""
};

_cvint  _gradHeatFile = { &gradHeatFile,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Write Corner Points Files (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _gradCoilMethod = { &gradCoilMethod,  
    GRADIENT_COIL_METHOD_AUTO, 
    GRADIENT_COIL_METHOD_QAC, 
    GRADIENT_COIL_METHOD_AUTO,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Coil Heating Model (-1=Auto, 0=DC model, 1=AC Model FFTW, 2=QAC Model).", 
    0, ""
};

_cvint  _gradHeatFlag = { &gradHeatFlag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Force to always run grad heating calculations (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _xgd_optimization = { &xgd_optimization,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Timing optimization for XGD thermal model (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _gradChokeFlag = { &gradChokeFlag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enables/Disables XGD Choke Model (0=Disable, 1=Use GradientConfig).", 
    0, ""
};


_cvint  _piburstmode = { &piburstmode,  
    PSD_OFF, 
    PSD_OFF, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to allow Burst Mode", 
    0, ""
};

_cvint  _opburstmode = { &opburstmode,  
    PSD_OFF, 
    PSD_OFF, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to enable Burst Mode", 
    0, ""
};

_cvint  _burstreps = { &burstreps,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of repetitions for Burst Mode", 
    0, ""
};

_cvfloat  _piburstcooltime = { &piburstcooltime,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Burst Mode cool time", 
    0, ""
};


_cvfloat  _opaccel_ph_stride = { &opaccel_ph_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected phase acceleration", 
    0, ""
};

_cvfloat  _opaccel_sl_stride = { &opaccel_sl_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected slice acceleration", 
    0, ""
};

_cvfloat  _opaccel_t_stride = { &opaccel_t_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected temporal acceleration", 
    0, ""
};

_cvint  _opaccel_mb_stride = { &opaccel_mb_stride,  
    1, 
    MAX_ACCEL, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected multiband factor", 
    0, ""
};


_cvint  _opmb = { &opmb,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable/disable Multiband", 
    0, ""
};


_cvint  _rhmb_factor = { &rhmb_factor,  
    1, 
    20, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Multiband slice acceleration factor", 
    0, ""
};



_cvint  _rhmb_slice_fov_shift_factor = { &rhmb_slice_fov_shift_factor,  
    1, 
    20, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Multiband Slice FOV shift factor", 
    0, ""
};


_cvint  _rhmb_slice_order_sign = { &rhmb_slice_order_sign,  
    -1, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Multiband Order Sign", 
    0, ""
};


_cvint  _rhmuse = { &rhmuse,  
    0, 
    MUSE_MAX_ACCEL, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "rhmuse=0: Muse recon disabled; rhmuse>0: Muse recon enabled and rhmuse provides the acceleration factor.", 
    0, ""
};


_cvint  _rhmuse_nav = { &rhmuse_nav,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "rhmuse_nav=PSD_OFF: Muse with navigator recon disabled; rhmuse_nav=PSD_ON: Muse with navigator enabled", 
    0, ""
};


_cvint  _rhmuse_nav_accel = { &rhmuse_nav_accel,  
    1, 
    MUSE_MAX_ACCEL, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Acceleration factor for Muse phase mapping readout", 
    0, ""
};


_cvint  _rhmuse_nav_hnover = { &rhmuse_nav_hnover,  
    0, 
    128, 
    16,  0, 0, 0, 1, 1, 
    VIS, 
    "Half-nex overscans for Muse phase mapping readout", 
    0, ""
};


_cvint  _rhmuse_nav_yres = { &rhmuse_nav_yres,  
    16, 
    256, 
    96,  0, 0, 0, 1, 1, 
    VIS, 
    "Muse phase mapping readout yres", 
    0, ""
};

_cvfloat  _opaccel_cs_stride = { &opaccel_cs_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected Compressed Sensing factor", 
    0, ""
};


_cvint  _opcompressedsensing = { &opcompressedsensing,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable/disable Compressed Sensing", 
    0, ""
};


_cvfloat  _rhcs_factor = { &rhcs_factor,  
    1.0, 
    10.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing acceleration factor", 
    0, ""
};


_cvint  _rhcs_flag = { &rhcs_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing flag", 
    0, ""
};


_cvint  _rhcs_maxiter = { &rhcs_maxiter,  
    0, 
    10000, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing max iteration", 
    0, ""
};


_cvfloat  _rhcs_consistency = { &rhcs_consistency,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing consistency ratio", 
    0, ""
};


_cvint  _rhcs_ph_stride = { &rhcs_ph_stride,  
    1, 
    MAX_ACCEL, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "ARC acceleration along phase direction", 
    0, ""
};


_cvint  _rhcs_sl_stride = { &rhcs_sl_stride,  
    1, 
    MAX_ACCEL, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "ARC acceleration along slice direction", 
    0, ""
};

_cvint  _oparc = { &oparc,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable ARC.", 
    0, ""
};

_cvint  _opaccel_kt_stride = { &opaccel_kt_stride,  
    1, 
    MAX_ACCEL, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected kt acceleration", 
    0, ""
};

_cvint  _rhkt_factor = { &rhkt_factor,  
    1, 
    12, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "kt acceleration factor", 
    0, ""
};


_cvint  _rhkt_cal_factor = { &rhkt_cal_factor,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "kt calibration acceleration factor", 
    0, ""
};


_cvint  _rhkt_calwidth_ph = { &rhkt_calwidth_ph,  
    0, 
    128, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "kt calibration size in ph", 
    0, ""
};


_cvint  _rhkt_calwidth_sl = { &rhkt_calwidth_sl,  
    0, 
    128, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "kt calibration size in sl", 
    0, ""
};





_cvint  _opab1 = { &opab1,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable Maximal RF.", 
    0, ""
};

_cvint  _op3dgradwarp = { &op3dgradwarp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D Gradwarp (0=Off, 1=On).", 
    0, ""
};

_cvint  _opauto3dgradwarp = { &opauto3dgradwarp,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for 3D Gradwarp (0=Off, 1=On) visibility", 
    0, ""
};

_cvint  _cfmaxtransmitoffsetfreq = { &cfmaxtransmitoffsetfreq,  
    -MAXINT, 
    MAXINT, 
    650000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Maximum Transmit offset frequency (Hz)", 
    0, ""
};


_cvint  _cfreceiveroffsetfreq = { &cfreceiveroffsetfreq,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver offset frequency (Hz)", 
    0, ""
};


_cvint  _cfcoilswitchmethod = { &cfcoilswitchmethod,  
    -MAXINT, 
    MAXINT, 
    COIL_SWITCH_SSP_HUB_INDEX,  0, 0, 0, 1, 1, 
    INVIS, 
    "Coil switch method bit-mask", 
    0, ""
};

_cvint  _TG_record = { &TG_record,  
    0, 
    200, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TG value generated by previous scan TG", 
0, "" };





_cvint  _ab1_enable = { &ab1_enable,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag indicates if the current TG_record may be used for adaptive B1 max calculation", 
0, "" };

_cvint  _cfreceivertype = { &cfreceivertype,  
    -MAXINT, 
    MAXINT, 
    CFG_VAL_RECEIVER_RRX,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver board type", 
    0, ""
};

_cvint  _cfreceiverswitchtype = { &cfreceiverswitchtype,  
    -MAXINT, 
    MAXINT, 
    CFG_VAL_RCV_SWITCH_RF_HUB,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver switch type", 
    0, ""
};

_cvint  _cfEllipticDriveEnable = { &cfEllipticDriveEnable,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Config Variable for Elliptic Drive", 
    0, ""
};

_cvint  _pi3dgradwarpnub = { &pi3dgradwarpnub,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "UI Control Variable for 3D gradwarp", 
    0, ""
};

_cvint  _cfDualDriveCapable = { &cfDualDriveCapable,  
    0, 
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Config Variable for Dual Drive Capable",  
    0, ""
};


_cvint  _optrip = { &optrip,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable TRIP (transducer tracking interleaved phase imaging)", 
    0, ""
};


_cvint  _oprtb0 = { &oprtb0,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Realtime B0 correction", 
    0, ""
};

_cvint  _pirtb0vis = { &pirtb0vis,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Realtime B0 correction visibility (0=Invisible, 1=Visible)", 
    0, ""
};

_cvint  _pirtb0nub = { &pirtb0nub,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UI control variable for Realtime B0 correction", 
    0, ""
};



_cvint  _ophoecc = { &ophoecc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for high-order eddy current correction", 
    0, ""
};


_cvint  _rhhoecc = { &rhhoecc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for high-order eddy current correction", 
    0, ""
};


_cvint  _rhhoec_fit_order = { &rhhoec_fit_order,  
    0, 
    HOEC_MAX_FIT_ORDER, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for HOEC fit order", 
    0, ""
};


_cvint  _opdistcorr = { &opdistcorr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction flag", 
    0, ""
};



_cvint  _pidistcorrnub = { &pidistcorrnub,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction UI control", 
    0, ""
};



_cvint  _pidistcorrdefval = { &pidistcorrdefval,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction default value", 
    0, ""
};


_cvint  _rhdistcorr_ctrl = { &rhdistcorr_ctrl,  
    0, 
    31, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction recon control variable", 
    0, ""
};


_cvint  _rhdistcorr_B0_filter_size = { &rhdistcorr_B0_filter_size,  
    1, 
    15, 
    5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Kernel size for Gaussian filter in B0-RPG correction", 
    0, ""
};


_cvfloat  _rhdistcorr_B0_filter_std_dev = { &rhdistcorr_B0_filter_std_dev,  
    0.5, 
    5.0, 
    1.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Std dev of kernel for Gaussian filter in B0-RPG correction", 
    0, ""
};



_cvint  _ihdistcorr = { &ihdistcorr,  
    0, 
    31, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Image header setting for Distortion Correction", 
    0, ""
};


_cvint  _rhtensor_file_number = { &rhtensor_file_number,  
    0, 
    9999, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Filename for diffusion vectors at tensorXXX.dat", 
    0, ""
};


_cvint  _ihpepolar = { &ihpepolar,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Image header setting for Phase Encoding Polarity", 
    0, ""
};


_cvint  _rhesp = { &rhesp,  
    0, 
    MAXINT, 
    500,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for echo spacing in us", 
    0, ""
};


_cvint  _viewshd_num = { &viewshd_num,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dual echo FSE view sharing k space lines number", 
    0, ""
};


_cvfloat  _grad_intensity_thres = { &grad_intensity_thres,  
    0.0, 
    100.0, 
    3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The threshold above which the pixel will be selected to be annefact region", 
    0, ""
};

_cvint  _anne_mask_dilation_length = { &anne_mask_dilation_length,  
    0, 
    100, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "The dilation kernel length of the annefact mask", 
    0, ""
};

_cvfloat  _anne_intensity_thres = { &anne_intensity_thres,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The threshold above which the channel will be marked as annefactive", 
    0, ""
};

_cvfloat  _anne_channel_percentage = { &anne_channel_percentage,  
    0.0, 
    1.0, 
    0.4,  0, 0, 0, 1, 1, 
    INVIS, 
    "The maximum percentage of channels that can be marked as annefactive", 
    0, ""
};

_cvint  _ec3_iterations = { &ec3_iterations,  
    0, 
    100, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of iterations that the combined coil map will be applied onto the selected annefactive channels", 
    0, ""
};

_cvfloat  _combined_coil_map_thres = { &combined_coil_map_thres,  
    0.0, 
    1.0, 
    0.15,  0, 0, 0, 1, 1, 
    INVIS, 
    "The threshold used to generate the combined coil map", 
    0, ""
};

_cvfloat  _coil_map_smooth_factor = { &coil_map_smooth_factor,  
    0.0, 
    1.0, 
    0.02,  0, 0, 0, 1, 1, 
    INVIS, 
    "The factor that controls the smoothing of coil map combination filter", 
    0, ""
};

_cvfloat  _coil_map_2_filter_width = { &coil_map_2_filter_width,  
    0.0, 
    1.0, 
    0.02,  0, 0, 0, 1, 1, 
    INVIS, 
    "The filter width for coil map 2", 
    0, ""
};

_cvint  _ec3_iteration_method = { &ec3_iteration_method,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Choose iteration method of eC3 (0:No Phase Preserving; 1:With Phase Preserving)", 
    0, ""
};


_cvint  _edr_support = { &edr_support,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for EDR support: 1-yes, 0-no", 
    0, ""
};

_cvfloat  _recon_bandwidth_factor = { &recon_bandwidth_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The factor that controls the recon downsampling factor for oversampled data in PRICE, which will be decided by host for Image-Cut Reduction", 
    0, ""
};



_cvint  _dacq_data_type = { &dacq_data_type,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The output data type of recon images ( 0: RDB_DATA_TYPE_UNKNOWN; 1: RDB_DATA_TYPE_SHORT; 2: RDB_DATA_TYPE_INT; 3: RDB_DATA_TYPE_FLOAT; 4: RDB_DATA_TYPE_DOUBLE )", 
    0, ""
};

_cvint  _rawmode_scaling = { &rawmode_scaling,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The scaling type of raw mode image (0: No scaling, 1: A/D peak scaling, 2: User defined)", 
    0, ""
};

_cvfloat  _rawmode_scaling_factor = { &rawmode_scaling_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "The scaling factor of raw mode image corresponding to rawmode_scaling ", 
    0, ""
};


_cvint  _oprgcalmode = { &oprgcalmode,  
    RG_CAL_MODE_MIN, 
    RG_CAL_MODE_MAX, 
    RG_CAL_MODE_MEASURED,  0, 0, 0, 1, 1, 
    VIS, 
    "RG Calibration Mode (0: Measured; 1: High Fixed; 2: Low Fixed; 3: Auto)", 
    0, ""
};


_cvint  _opnumgroups = { &opnumgroups,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of MSMA Groups", 
    0, ""
};


_cvint  _opsarburst = { &opsarburst,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SAR burst mode allowed flag", 
    0, ""
};

_cvint  _opheadscout = { &opheadscout,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Activate the head-scout acquisition feature", 
    0, ""
};

_cvint  _rhposition_detection = { &rhposition_detection,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Activate reconstruction including position detection", 
    0, ""
};


_cvint  _opfus = { &opfus,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focused Ultrasound Flag", 
    0, ""
};

_cvint  _opexamnum = { &opexamnum,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Current Exam Number", 
    0, ""
};

_cvint  _opseriesnum = { &opseriesnum,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Current Series Number", 
    0, ""
};



_cvint  _vol_shift_type = { &vol_shift_type,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask for volume shift (1: Freq dir, 2: Phase dir, 4: Slice dir)", 
    0, ""    
};

_cvint  _vol_shift_constraint_type = { &vol_shift_constraint_type,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Constraint type for volume shift (Common among all slices in all dir(=1) or in freq/phase dir(=2))", 
    0, ""    
};


_cvint  _vol_scale_type = { &vol_scale_type,  
    0,     
    7,     
    0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Bit mask for volume scaling (1: Freq dir, 2: Phase dir, 4: Slice dir)", 
    0, ""    
};

_cvint  _vol_scale_constraint_type = { &vol_scale_constraint_type,  
    0,     
    1,     
    0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Constraint type for volume scaling (0: None, 1: freq scale = phase scale)", 
    0, ""    
};


_cvint  _rhsnrnoise = { &rhsnrnoise,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Mix and/or scale channels for SNR (0: Balanced prescan, 1: Optimal prescan, 2: Unscaled)", 
    0, ""
};

_cvint  _rhvircpolicy = { &rhvircpolicy,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Policy of number of channels used in channel compression (0: Disable, 1: Auto, 2: use the value of rhvircoilchannels)", 
    0, ""
};

_cvint  _rhvirsenstype = { &rhvirsenstype,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "For computing the compression ranking coefficients (1: Cal scan, 2: Self sensitivity)", 
    0, ""
};

_cvint  _rhvircoiltype = { &rhvircoiltype,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Virtual channel apply type (1: Volume, 2: X enocde)", 
    0, ""
};

_cvint  _rhvircoilunif = { &rhvircoilunif,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Restore balanced uniformity profile (0: None, 1: Cal scan, 2: Self sensitivity, 3: Self sensitivity advanced)", 
    0, ""
};

_cvint  _rhvircoilchannels = { &rhvircoilchannels,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of channels used in channel compression when rhvircpolicy = 2", 
    0, ""
};

_cvint  _cffield = { &cffield,  
    0, 
    MAXINT, 
    B0_15000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Field strength", 
    0, ""
};

_cvfloat  _act_field_strength = { &act_field_strength,  
    0, 
    MAXFLOAT, 
    30000.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Acutal field strength in Gauss from last scan", 
    0, ""
};

_cvint  _enableReceiveFreqBands = { &enableReceiveFreqBands,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable receive frequency bands", 
    0, ""
};

_cvint  _offsetReceiveFreqLower = { &offsetReceiveFreqLower,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The receive frequency offset to the left relative to center frequency", 
    0, ""
};

_cvint  _offsetReceiveFreqHigher = { &offsetReceiveFreqHigher,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The receive frequency offset to the right relative to center frequency", 
    0, ""
};

_cvint  _cfrfamptyp = { &cfrfamptyp,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF Amplifier type", 
    0, ""
};

_cvint  _cfssctype = { &cfssctype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SSC type: 1-ICE, 0-non-ICE", 
    0, ""
};

_cvint  _cfbodycoiltype = { &cfbodycoiltype,  
    0, 
    MAXINT, 
    PSD_15_XRM_BODY_COIL,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF body-coil type", 
    0, ""
};

_cvint  _cfptxcapable = { &cfptxcapable,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Parallel transmit capable: 1-Yes, 0-No", 
    0, ""
};


_cvint  _cfbdcabletglimit = { &cfbdcabletglimit,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode TG limit: 1 = apply limit; 0 = don't apply", 
    0, ""
};


_cvint  _cfcablefreq = { &cfcablefreq,  
    10, 
    500, 
    226,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode delta freq, kHz", 
    0, ""
};


_cvint  _cfcabletg = { &cfcabletg,  
    1, 
    200, 
    175,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode on resonance TG limit", 
    0, ""
};


_cvint  _cfcablebw = { &cfcablebw,  
    10, 
    1000, 
    500,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode 3dB bw, kHz", 
    0, ""
};

_cvint  _opgradshim = { &opgradshim,  
    0, 
    2, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Shimming selection 0:OFF, 1:ON, 2:AUTO", 
    0, ""
};

_cvint  _track_flag = { &track_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable FUS Track PSD", 
    0, ""
};



/*
 * reqexport
 * common variables that do not fit the simple data model of a CV
 * but are used to transfer information between the PSD and host
 * processes (scn, ifcc, psc, etc.). The content is name and order-
 * sensitive so any change that are made to names or the order
 * including additions anywhere except the very end require a change
 * to the revision number; otherwise, unpredictable results may
 * occur.
 */ 

/* Scan info table holds information filled in by
 * scan in prescribed order. Each entry holds the slice
 * location in mm from isocenter, the receive location of
 * each slice in mm, and the rotation matrix */

SCAN_INFO scan_info[SLTAB_MAX] = {DEFAULT_AXIAL_SCAN_INFO};

/* Monitor location - returned by scan */
SCAN_INFO mon_loc;

/* Prescan Calibration and Auto Coil*/
SCAN_INFO calscan_info[CAL_SLTAB_MAX] = {DEFAULT_AXIAL_SCAN_INFO};
SCAN_INFO coilscan_info[CAL_SLTAB_MAX] = {DEFAULT_AXIAL_SCAN_INFO};

/* Data acquisition order table holds the pass and time order
 * within the pass of each phase. */

int DATA_ACQ_ORDER_ENTRIES = SLICE_FACTOR*DATA_ACQ_MAX;
DATA_ACQ_ORDER data_acq_order[SLICE_FACTOR*DATA_ACQ_MAX];

ENTRY_POINT_TABLE entry_point_table[ENTRY_POINT_MAX] = {
    {
        "", /* s8  epname[16]; name that entry point will be named */
        0,  /* n32 epamph;     power for the head coil*/
        0,  /* n32 epampb;     power for the body coil*/
        0,  /* n32 epamps;     peak power for the spectro coil */
        0,  /* n32 epampc;     peak power for the CW Amp */

        0,  /* n32 epwidthh;   max pulse width for the head coil */
        0,  /* n32 epwidthb;   max pulse width for the body coil */
        0,  /* n32 epwidths;   max pulse width for the spectro coil */
        0,  /* n32 epwidthc;   max pulse width for the CW amp */

        0,  /* n32 epdcycleh;  peak duty cycle for the head coil */
        0,  /* n32 epdcycleb;  peak duty cycle for the body coil */
        0,  /* n32 epdcycles;  peak duty cycle for the spectro coil */
        0,  /* n32 epdcyclec;  peak duty cycle for the CW amp */

        0,  /* n8  epsmode;    select exciter mode */
        0,  /* n8  epfilter;   initial filter to use */
        PSD_BROADBANDOFF, /* n8 eprcvrband; tells whether broadband is used */

        PSD_RP_BODY, /* n8 eprcvrinput; receiver port to use */
        PSD_RB_BODY, /* n8 eprcvrbias;  receiver to bias */
        PSD_RP_BODY, /* n8 eptrdriver;  tr driver control */
        0,           /* n8 epfastrec;   type of recevier 0=standard, 1=fast */

        0,   /* s16 epxmtadd;    additional transmit gain to add */
        256, /* s16 epprexres;   prescan xres */  
        0,   /* s16 epshldctrl;  expansion for shield cooler control */
        0,   /* s16 epgradcoil;  indicate gradient shield mode */
        0,   /* n32 eppkpower;   peak power */
        0,   /* n32 epseqtime;   seq time */
        0,   /* s16 epstartrec;  start receiver */
        0,   /* s16 ependrec;    end receiver */

        /* power_monitor_table_t eppmtable; */
        {
            0x7fff,/* s16  pmPredictSAR;   Predicted SAR for this scan */
            0      /* s16  pmContinuousUpdate; Mode for SAR de-rating based on temperature */
        },

        /* General and R1 indicies */
        0,  /* n8  epGeneralBankIndex; general bank index to use */
        0,  /* n8  epGeneralBankIndex2; second bank index for SwiFT on 16 Ch and Megaswitch */
        10, /* n8  epR1BankIndex;     R1 bank index to use */

        TRANSMIT_SELECT_NONE, /* n8 epNbTransmitSelect; narrowband transmit switch selection */
        TRANSMIT_SELECT_NONE, /* n8 epBbTransmitSelect; broadband transmit switch selection */

        MNS_CONVERTER_SELECT_NONE, /* n32 epMnsConverterSelect; MNS converter selection */

        RX_COIL_BODY,          /* n32 epRxCoilType; Receive coil type for primary selected coil */

        0.0, /* f32 epxgd_cableirmsmax; max of XGD cable RMS current for all axes */
        0.0, /* f32 epcoilAC_powersum;  sum of coil AC power for all axes */

        0, /* the flag to enable the receive frequency bands */
        0, /* receive frequency offset to the left relative to center frequency */
        0  /* receive frequency offset to the right relative to center frequency */
    }
};

PSD_FILTER_GEN psd_filt_spec[PSD_FILTER_MAX];

/* changed from short to int. YH */ /* changed to short again  2/16/95 YI */
float eg_sat_rot[6][9]; /* rotation matrices for sat */

/* Psc info table holds information filled in by
 * scan in multislab prescan. Each entry holds the slice
 * location in mm from the center of the prescan slab, the receive location
 * each slice in, the rotation matrix, and the lengths of the
 * prescribed volumes */

PSC_INFO psc_info[MAX_PSC_VQUANT];

/* Graphic IR Bands */
GIR_INFO gir_info[MAX_NUM_GIR];

/* HOEC calibration information */
HOEC_CAL_INFO hoec_cal_info =
{
    0,
    0,
    {{0}},
    {{{0}}},
    {{{0}}},
    {{0}},
    {{{0}}}
};

/* DW gradient vectors */
float rhdiffusion_grad_amp[HOEC_MAX_DIFFGRADAMP_SIZE][HOEC_TOTAL_NUM_AXES] = {{0}}; /* diffusion gradient amplitudes on logical axis */

/* HOEC bases for recon */
RDB_HOEC_BASES_TYPE rhhoec_bases =
{
    {{0}},
    {0},
    {0},
    {0}
};

/* Multi Slab Prescan */
int pipscvol = 2;

/* ***************************
   Image header array pointers
   *************************** */
int *ihtdeltab;
int *ihtrtab;
int ihmaxtdelphase; /* Max tdel value for the first phase */
int *ihtitab; 

/* *******************************
   Advisory Panel Export Variables
   ******************************* */

/* Scan Timing Advisory Variables */

int avminnecho;
int avmaxnecho;

int avminnshots;
int avmaxnshots;

int avminte;
int avmaxte;

int avminte2;
int avmaxte2;

int avmintissuet1;
int avmaxtissuet1;

int avminti;
int avmaxti;

int avminbspti;   /* Minimum Blood Suppression TI */
int avmaxbspti;   /* Maximum Blood Suppression TI */

int avmintrecovery;
int avmaxtrecovery;

int avmintlabel;
int avmaxtlabel;

int avmint2prepte;
int avmaxt2prepte;

int avminnspokes;
int avmaxnspokes;

float avminoversamplingfactor;
float avmaxoversamplingfactor;

int avmintr;
int avmaxtr;

float avminflip;
float avmaxflip;

int avminetl;
int avmaxetl;

float avminrbw;  /* minimum bw in KHz (echoes 2-4 for 1.5T, echo 1 for 0.5T */
float avmaxrbw;  /* maximum bandwith in KHz (echoes 2-4 for 1.5 T, echo
				  one for 0.5T */
float avminrbw2; /* minimum bw in KHz (echoes 2-4, for 0.5T only) */
float avmaxrbw2; /* maximum bandwith in KHz (echoes 2-4, for 0.5T only) */

/* Scanning Range Advisory Variables */

float avminfov;
float avmaxfov;

float avminphasefov;
float avmaxphasefov;

float avminnpwfactor;
float avmaxnpwfactor;

float avminslthick;
float avmaxslthick;

float avminslspace;
float avmaxslspace;

int avminslquant;
int avmaxslquant;

int avmaxvquant = MAXVQUANT;

int avmaxacqs;

/* Overlapping slices, in Motsa */
int avmaxovl; /* Maximum number of overlapping slices */


/* Acquisition time Advisory Variables */

int avminxres;
int avmaxyres;

int avminyres;
int avmaxxres;

float avminnex;
float avmaxnex;

int avminslicecnt;
int avmaxslicecnt;

/* Cardiac Gating Advisory Variables */

int avminphases;
int avmaxphases;

int avminaphases = 1;  /* Minimum Number of phases to acquire per location */
int avmaxaphases = 30; /* Maximum Number of phases to acquire per location */

int avmintdel1; /* min cardiac delay */
int avmaxtdel1; /* max cardiac delay */
int pisystdel1; /* systolic cardiac delay */
int pidiatdel1; /* diastolic cardiac delay */
int pitdel1;   /* recommended delay with SAT modules */

int avminrttseq; /* Advisory panel min sequence time */

/* Navigator Advisory Variables */
float avminnavaccwin;
float avmaxnavaccwin;
int avminnavautotrigtime;
int avmaxnavautotrigtime;
int avminnavpsctime;
int avmaxnavpsctime;
int avminnavrrmeastime;
int avmaxnavrrmeastime;
int avminnavmaxinterval;
int avmaxnavmaxinterval;

/* Auto Navigator Tracker */
int pibreathholdnub = 0;
int piautonavtracker = 0;

/* Vascular Velocity Encoding Advisory Panel Variables.
   Min and Max velocity encoding value in cm/sec */
float avminvenc;
float avmaxvenc;

/* MSDE TAB related variables */
int pimsdeaxnub = 0;
int pivestnub = 0;
float avminvest = 0.0;
float avmaxvest = 0.0;

/* Delay after acquisition.  Needed in cardiac routines */
int avmaxsldelay;		/* Maximum Delay after acquisition */

int avminfphases;		/* Minimum Number of phases per locations */
int avmaxfphases;		/* Maximum Number of phases per locations */

/* DISCO with DynaPlan */
int avminvsphases;		/* Minimum Number of wash-in phases */
int avmaxvsphases;		/* Maximum Number of wash-in phases */
int avmindphases = 1;		/* Minimum Number of phases per locations for DynaPlan */

/* ECTRICKS multiphases */
int avmintphases;
int avmaxtphases;
int avmintricksdel = 1;
int avmaxtricksdel = 30000000;


/* b-value from DWI screen */ /* HFO3 merge 02/18/2003 YI */
int avminbval;
int avmaxbval;

float avminrep_rest = 1;
float avmaxrep_rest = 128;

float avminrep_active = 1;
float avmaxrep_active = 128;

float avmin_dda = 0;
float avmax_dda = 50;

int avminnseg;
int avmaxnseg;

int avmintseq;
int avmaxtseq;

/* For cases when PSD can override the entries 
in the config file */
float avminslassetfac;
float avmaxslassetfac;
float avminphassetfac;
float avmaxphassetfac;

/* MR-TOUCH */
int avmintouchfreq = 20;
int avmaxtouchfreq = 5000;
int avmintouchmegfreq = 20;
int avmaxtouchmegfreq = 5000;
int avmintouchcyc = 0;
int avmaxtouchcyc = 5000;
int avmintouchamp = 0;
int avmaxtouchamp = 100;
int avmintouchtphases = 4;
int avmaxtouchtphases = 128;

int avminnumbvals; 
int avmaxnumbvals;

float avminbvalstab;
float avmaxbvalstab;

int avminnumsynbvals;
int avmaxnumsynbvals;

float avminsynbvalstab;
float avmaxsynbvalstab;

float avmindifnextab;
float avmaxdifnextab;

float avmindifnext2;
float avmaxdifnext2;

/* PROMO rescan time in seconds */
int avminallowedrescantime = 0;
int avmaxallowedrescantime = 3600;
int pidefallowedrescantime = 300;
int piallowedrescantimenub = 0;

/* **********************************
   Interface Control Export Variables
   ********************************** */

/* advisory panel */
int piadvise = 0;
/* *************************************************
 * The following variables are read by Scan Rx to 
 * determine which advisory panel entries should be 
 * displayed.  
 * piadvmin and piadvmax are the bitmasks for respectively
 * displaying the min and max values for echos, TE, TE2,
 * TI, TR, FOV, receive bandwidth, and velocity encoding.
 * piadvtime is the bitmask for selectively displaying
 * the scan time, max. Locs/Acq, minimum # of acqs, and the
 * acquisition matrix.
 * piadvcard is the bitmask for selectively displaying the
 * cardiac adv. panel entries.  These entries are inter-sequence
 * delay, # of phases, effective TR, max # of scan locs, and
 * available image time.  It should be noted that these 
 * entries will never be displayed if cardiac gating is not 
 * selected.  
 * The bitmask position for each of these parameters is 
 * listed up above in the global section.
 * ************************************************* */

/* bit mask for minimum adv. panel values */
int piadvmin = (1<<PSD_ADVECHO) +
  (1<<PSD_ADVTE) + (1<<PSD_ADVTE2) + (1<<PSD_ADVTI) + (1<<PSD_ADVTR) +
  (1<<PSD_ADVFOV) + (1<<PSD_ADVRCVBW) + (1<<PSD_ADVVENC) + (1<<PSD_ADVRCVBW2); 
int piadvmax = (1<<PSD_ADVECHO) +
  (1<<PSD_ADVTE) + (1<<PSD_ADVTE2) + (1<<PSD_ADVTI) + (1<<PSD_ADVTR) +
  (1<<PSD_ADVFOV) + (1<<PSD_ADVRCVBW) + (1<<PSD_ADVVENC) + (1<<PSD_ADVRCVBW2); 

/* bit mask for scan time adv. panel values */
int piadvtime = (1<<PSD_ADVMINTSCAN) + (1<<PSD_ADVMAXLOCSPERACQ) +
  (1<<PSD_ADVMINACQS) + (1<<PSD_ADVMAXYRES);

/* bit mask for cardiac adv. panel values */
int piadvcard = (1<<PSD_ADVISEQDELAY) 
   + (1<<PSD_ADVMAXPHASES) + (1<<PSD_ADVEFFTR)
   + (1<<PSD_ADVMAXSCANLOCS) + (1<<PSD_ADVAVAILIMGTIME);


/* buttons for opnseg pull down menu */
int pinsegnub = 0;
int pinsegval2 = 1;
int pinsegval3 = 2;
int pinsegval4 = 3;
int pinsegval5 = 4;

/* frame rate(sec/frame) for Rapid Frame Acquisition */
int piframeratenub = 0;
float piframerate = 0;

int piimages = 1;

/* scanning range */
/* RS/YV Sat default thickness changed from 80mm to 40mm */
int pisatthick = 40;
int pisatthickx = 40;
int pisatthicky = 40;
int pisatthickz = 40;

int pisatnub = 1; /* 1 if Sat buttons should appear */

/* *************************************************
   SmartPrep Required Exports
   ************************************************ */
int pimonitor = 0;  /* Enable monitor */

/* Monitor FOV */
int pimonfovnub=4;
float pimonfovval2=50.0;
float pimonfovval3=100.0;
float pimonfovval4=200.0;
float pidfmonfov=200.0;

/* Monitor Thickness */
int pimonthicknub=4;
float pimonthickval2=20.0;
float pimonthickval3=40.0;
float pimonthickval4=80.0;
float pidfmonthick=20.0;

int piccsat_obl = 0;	/* Concat sat capability for oblique scan in fse-xl. */

/* RJF - 11.0 SAT UI Enhancements. */
int pichemsatopt = 0;

int piccsatnub = 1; /* if 1, concatsat button should
		       appear */
int pisupnub = 1; /* if 1, chemsat buttons will appear */

int piautopause = 0;
int pislblank = 2;

int pislthicklabel = PSD_SLTHICK_LABEL_SLTHICK;
float pislthickstep = 1.0;

/* cardiac gating */
int pitseq;
int piait;
int pietr;

/* Graphic ROI inquiry CVs */
int picsifov;			/* Field of view for CSI phase encoding */
int pirlcsi;			/* Number of phase encodes in the RL dir */
int piapcsi;			/* Number of phase encodes in the AP dir */
int pisicsi;			/* Number of phase encodes in the SI dir */
int piroigrx=PSD_OFF;		/* Whether or not to do Grx ROI */

/* misc pi variables */
int pifilt4 = 0;
int pifilt5 = 0;
int pifilt6 = 0;
int pifilt7 = 0;

int pitfeextra= 0;

/* APS */
int pitr;
int pichop;
int pitsp1;
int pitsp2;
int picalmode;
int pislquant;
int pinex;

/* screen control */

int pimphscrn = 0;		/* controls the Multi-Phase screen,
				   0: no multi-phase,
				   1: multi-phase acq.*/

int pifphasenub = 0;	/* buttons for number of phases per location */
int pifphaseval2 = 1;
int pifphaseval3 = 2;
int pifphaseval4 = 4;
int pifphaseval5 = 8;
int pifphaseval6 = 16;

int pisldelnub = 6; 	/* buttons for delay after acquisition, value 0-6 */
int pisldelval3 = 500000;
int pisldelval4 = 1000000;
int pisldelval5 = 2000000;
int pisldelval6 = 5000000;

int piacqnub = 0;		/* buttons for phase acquisition order, value 0-2 */

/* ECTRICKS */
int pitphasenub = 6;
int pitphaseval2 = 5;
int pitphaseval3 = 9;
int pitphaseval4 = 13;
int pitphaseval5 = 17;
int pitphaseval6 = 21;

/* DISCO with DynaPlan */
int pivsphasenub = 0;
int pivsphaseval2 = 3;
int pivsphaseval3 = 4;
int pivsphaseval4 = 5;
int pivsphaseval5 = 8;
int pivsphaseval6 = 10;

int pitricksdelnub = 6;
int pitricksdelval3 = 3000000;
int pitricksdelval4 = 5000000;
int pitricksdelval5 = 10000000;
int pitricksdelval6 = 30000000;

/* user CV */
int piuset  = 0;
int piuset2 = 0;

/* Added for TENSOR ALP */
int pidualspinechonub = 0;       /* Bitmask for dualspinecho toggle button */

/* piechnub: No of Echoes/TEs
 * bitmask: 1 (allow type-in) + 2 (show 1st value) + 4 (show 2nd value)
 * + 8 ...
 *    1. Do not show number of echoes by default: piechnub=0 and opautonecho=0.
 *    2. if piechnub=0, opautonecho = 1, then the field will be read-only
 *    and will use opnecho as the value to display */

int piechnub = 0;
int piechdefval = 1;
int piechval2 = 1;
int piechval3 = 2;
int piechval4 = 4;
int piechval5 = 8;
int piechval6 = 16;

int pishotnub = 0;  /* number of buttons to display, not bit mask */
int pishotval2 = 1;
int pishotval3 = 2;
int pishotval4 = 4;
int pishotval5 = 8;
int pishotval6 = 16;

int picineiprot = 0;

int pitetype = PSD_LABEL_TE_NORM;  /* Flag for TE annotation */
int pite1nub = 63;
int pite1val2 = 10000;
int pite1val3 = 20000;
int pite1val4 = 25000;
int pite1val5 = 30000;
int pite1val6 = 35000;

int pite2type = PSD_LABEL_TE_NORM;  /* Flag for TE annotation */
int pite2nub = 0;
int pite2val2 = 40000;
int pite2val3 = 60000;
int pite2val4 = 80000;
int pite2val5 = 100000;
int pite2val6 = 120000;

int pitissuet1nub    = 0;
int pitissuet1defval = PSD_TISSUE_WM;    /* Default value for Tissue T1 */
int pitissuet1val2   = PSD_TISSUE_WM;
int pitissuet1val3   = PSD_TISSUE_GM;
int pitissuet1val4   = 900000;
int pitissuet1val5   = 1200000;

int pititype   = PSD_LABEL_TI_IR;  /*  Flag for TI annotation  */
int pitinub    = 0;
int pitidefval = 0;    /* Default value for TI */
int pitival2   = 50000;
int pitival3   = 130000;
int pitival4   = 200000;
int pitival5   = 300000;
int pitival6   = 400000;
int piautoti = 0; /* Flag to support Auto TI */

/* Black Blood Suppression buttons */
int pibsptinub    = 0;
int pibsptidefval = 0;
int pibsptival2   = 0;
int pibsptival3   = 0;
int pibsptival4   = 0;
int pibsptival5   = 0;
int pibsptival6   = 0;
int piautobspti   = 0; /* Flag to support Auto BSP TI */

int pitrecoverynub    = 0;
int pitrecoverystep   = 200000;
char pitrecoverylabel[32] = "Recovery Time";
int pitrecoverydefval = TRECOVERY_MIN;
int pitrecoveryval2   = 300000;
int pitrecoveryval3   = 600000;
int pitrecoveryval4   = 1000000;
int pitrecoveryval5   = 1500000;
int pitrecoveryval6   = 2000000;

int pitlabelnub    = 0;
int pitlabelstep   = 500000;
int pitlabeldefval = TLABEL_DEF;
int pitlabelval2   = 1500000;
int pitlabelval3   = 2000000;
int pitlabelval4   = 2500000;

int pit2preptenub    = 0;
int pit2preptedefval = 80000;
int pit2prepteval2   = 30000;
int pit2prepteval3   = 40000;
int pit2prepteval4   = 60000;
int pit2prepteval5   = 80000;
int pit2prepteval6   = 100000;

int pinspokesnub    = 0;
int pinspokesstep    = 32;
int pinspokesdefval = 128;
int pinspokesval2   = 128;
int pinspokesval3   = 192;
int pinspokesval4   = 256;
int pinspokesval5   = 384;
int pinspokesval6   = 512;

int pioversamplingfactornub  = 0;
float pioversamplingfactordefval = 1.0;
float pioversamplingfactorval2   = 1.0;
float pioversamplingfactorval3   = 1.5;
float pioversamplingfactorval4   = 2.0;
float pioversamplingfactorval5   = 2.5;
float pioversamplingfactorval6   = 3.0;

int piacsnub = 0;
int piacsdefval = 4;
int piacsval2 = 2;
int piacsval3 = 3;
int piacsval4 = 4;
int piacsval5 = 5;
int piacsval6 = 6;

int piharmonizenub = 0;

int pieffbladewidthnub = 0;
int pieffbladewidthdefval = 1;

int pisilentmr = 0;
int pinslices;

int pitrnub = 6;
int pitrval2 = 300000;
int pitrval3 = 500000;
int pitrval4 = 800000;
int pitrval5 = 1000000;
int pitrval6 = 2000000;
int piinrangetrmin = 0;
int piinrangetrmax = 0;
int piautotrmode = 0; /* Flag for Auto TR mode - 0:Manual TR, 1:In-Range TR, 2:Advancd In-Range TR */

int pifanub = 0;
int pifaval2 = 10;
int pifaval3 = 20;
int pifaval4 = 30;
int pifaval5 = 40;
int pifaval6 = 50;
int piautofa = 0;  /* Flag to support Auto Flip Angle */
int pifamode = 0;  /* Flag to display Flip Angle on UI - 0:"Flip Angle", 1:"Refocus Flip Angle" */

int pietlnub = 0;		/* Number of ETL buttons */
int pietlval2 = 2;
int pietlval3 = 4;
int pietlval4 = 8;
int pietlval5 = 16;
int pietlval6 = 32;
int piautoetl = 0; /* Flag to support Auto ETL */

/*
 * "pi" CV control to override the Asset screen
 * 0: do not override,Scan will populate the Asset screen based on 
 * the values in the Asset config file
 * 1: PSD will be able to pass values for Asset related parameters
 * which can be used to populate the Asset screen (override)
 */
int piassetoverride = 0; 

/*
 * "pi" CV to control the Asset screen
 * 0: hide the Asset screen,
 * 1: display the Asset screen
 * When PSD override is enabled, the title of the ASSET screen
 * can be customized by specifying the title in the description
 * field of the "pi" CV piassetscrn which has been defined in the
 * reqcv section.
 */
int piphassetnub = 0;
float piphassetval1 = 1.0;
float piphassetval2 = 1.0;
float piphassetval3 = 1.0;
float piphassetval4 = 1.0;
float pidefphasset = 1.0;

int pislassetnub = 0;
float pislassetval1 = 1.0;
float pislassetval2 = 1.0; 
float pislassetval3 = 1.0;
float pislassetval4 = 1.0;
float pidefslasset = 1.0; 

int picalmodenub = 0; /* flag for visibility of ASSET/PURE calibration mode menu */
int pidefcaldelay = 5000000; /* default delay time between breathhold and free-breathing passes of ASSET/PURE calibration scan */

int pipure = PSD_PURE_COMPATIBLE_1; /* PURE version compatibility bitmask */

int pirbwpage = PSD_BW_SCREEN_SET;  /*  Flag for RBW screen  */
float pidefrbw = 15.63;
int pircbnub = 6; /* number of variable bandwidth buttons */
float pircbval2 = 2.0;
float pircbval3 = 4.0;
float pircbval4 = 8.0;
float pircbval5 = 12.80;
float pircbval6 = 16.0;

int pircb2nub = 6; /* number of variable bandwidth buttons */
float pircb2val2 = 2.0;
float pircb2val3 = 4.0;
float pircb2val4 = 8.0;
float pircb2val5 = 12.80;
float pircb2val6 = 16.0;

/* piflosup has become obsolete but can't be changed. Now its pivascop */
int piflosup = 0; /* Set to 1 if flow suppression screen
		     required (i.e. phase contrast) */
int piflanub = 0; /* if 1, flow axis buttons will appear */
int pivelnub = 0; /* if 1, velocity encoding prompt will appear */
int piprojnub = 0; /* bitmask for num of projetion buttons */
int piaddinub = 0; /* bitmask for num of additional image buttons */
int piflrcnub = 0; /* bit mask for the flow recon type */
/* Ramp direction buttons */
int pirampnub = 0; /* Bitmask for Ramp Pulse buttons */
int pideframp = 0; /* Default value for Ramp Pulse direction, 0: nonramp pulses, 1: positive ramp pulse */


/* scanning range */
int piscran = 1;

int pifovnub = 6;
float pifovval2 = 80.0;
float pifovval3 = 120.0;
float pifovval4 = 160.0;
float pifovval5 = 200.0;
float pifovval6 = 240.0;

int piphasfovnub = 0; /* bitmap for variable fov buttons to appear of
                         Aquisition Timing page, 0=off, 7=on */
int pifreqfovnub = 0; /* bitmap for future frequency fov buttons */

int piphasfovnub2= 0; /* Used to select the "other" button in phase fov */

float piphasfovval1 = 1.0;
float piphasfovval2 = .75;    /* 5.5-QT */
float piphasfovval3 = 0.5;
float piphasfovval4;  /* not used - only 3 buttons are visible */
float piphasfovval5;  /* not used - only 3 buttons are visible */
float piphasfovval6;  /* not used - only 3 buttons are visible */

/* No Phase Wrap Factor */
int pinpwfactornub  = 0;
float pinpwfactordefval = 1.00;
float pinpwfactorval2   = 1.25;
float pinpwfactorval3   = 1.50;
float pinpwfactorval4   = 2.00;
float pinpwfactorval5   = 3.00;
float pinpwfactorval6   = 4.00;

int pistnub = 6;
float pistval2 = 3;
float pistval3 = 4;
float pistval4 = 5;
float pistval5 = 7;
float pistval6 = 10;

int piisnub = 5;
int piisil = 1;
float piisval2 = 1.5;
float piisval3 = 2.5;
float piisval4 = 5;
float piisval5 = 10;
float piisval6 = 15;

/* Overlap slices */
int pipctovl = 25; /* Percentage of overlapping region thickness over whole slab thickness. */
int pidefovl = 1; /* Indicate default button for overlap slices; 0: "Other" button, 1: "Recommended" button. */
int piovlnub = 0;  /* overlap locations on 3D MS scanning range (bitmap) */

int pilocnub = 0;
int pilocval2 = 28;
int pilocval3 = 60;
int pilocval4 = 124;
int pilocval5 = 252;
int pilocval6 = 508;

/* Number of locations per slab buttons */
int pislqnub = 15;  /* Bitmask for Number of locations per slab button */
int pislqval2 = 16; /* Button 2 value */
int pislqval3 = 32; /* Button 3 value */
int pislqval4 = 64; /* Button 4 value */
int pidefslq = 32;  /* Default value for Number of loc.s per slab */
int pislqval5 = 128; /* add a button when combining 3d-multi and 3d */

/* acquisition timing */
int piactim = 1;

/* piamnub is now a bitmap */
int piamnub = 7;
char piamval1[8] = "256x128";
char piamval2[8] = "256x192";
char piamval3[8] = "256x256";
char piamval4[8] = "512x256";
char piamval5[8] = "512x384";
char piamval6[8] = "512x512";

int pitresnub = 0;  /* Display pitres or temporal resolution on UI*/
int pitres2nub = 0; /* Display Interp. Temp value on UI*/

int pixresnub = 2; /* bitmask */
int pixresval2 = 256;
int pixresval3 = 512;
int pixresval4 = 256;
int pixresval5 = 256;
int pixresval6 = 256;

int piyresnub = 15;  /* bitmask */
int piyresval2 = 160;
int piyresval3 = 192;
int piyresval4 = 224;
int piyresval5 = 256;
int piyresval6 = 512;

int pinexnub = 63;
float pinexval2 = 0.5;
float pinexval3 = 0.75;
float pinexval4 = 1;
float pinexval5 = 2;
float pinexval6 = 4; 

/* pisctim */
int pisctim = 1;
float pisctim1 = 0;
float pisctim2 = 0;
float pisctim3 = 0;
float pisctim4 = 0;
float pisctim5 = 0;
float pisctim6 = 0;

int pipautype = PSD_LABEL_PAU_LOC;  /*  Flag for Pause annotation  */
int pipaunub = 0;
int pipauval2 = 0;
int pipauval3 = 1;
int pipauval4 = 2;
int pipauval5 = 3;
int pipauval6 = 4;

int piswapfc = 0;/* Used to change the default (highlighted) opspf value */
int pipscoptnub = 1; /* Bit map of number of Prescan option buttons 
                        0=none, 1=autoshim, 2=phase corr */
int pidoshim = 0;    /* Flag to force autoshim */
int pidotg = 0;    /* Flag to force TG PSC entry point */
int xtg_disabled = 0;    /* Flag to disable XTG */

int pipscshimtgnub = 0; /* UI control to enable shim volume for local TG */

int pidyntgnub = 0; /* UI control to enable Dynamic TG */

/* Flow comp axis buttons */
int pifsefcnub = 0;  /* bitmask - buttons for flow comp axis selection */
int pideffcaxis = 0; /* Default value for flow comp direction */


int pidltime = 100000000; /* Time in us that scan allows for wave form 
                             download in TGT before time out error */

/* Cardiac heart rate buttons */
int pihrepnub=30;		/* Bitmask for hrep buttons */
int pihrepval2=4;		/* Button 2 value */
int pihrepval3=3;		/* Button 3 value */
int pihrepval4=2;		/* Button 4 value */
int pihrepval5=1;		/* Button 5 value */
int pihrepval6=9;		/* Button 6 value */

/* default arrhythmia rejection window */
int pidefarr = 20;

/* FastCINE number of phases buttons */
int pifcinenub    = 0; 
int pifcinedefval = 0;
int pifcineval2   = 0;
int pifcineval3	  = 0;
int pifcineval4	  = 0;

int piaphasenub    = 0;
int piaphasdefval  = 16;
int piaphaseval2   = 10;
int piaphaseval3   = 16;
int piaphaseval4   = 20;

/*  Cardiac Auto phase button */
int piautophasenub = 1; 

/* Cardiac Tagging buttons */
int pitagging      = 0; /* Cardiac Tagging Selection */
int pitagspcdefval = 0;
int pitagspcval2   = 0;
int pitagspcval3   = 0;
int pitagspcval4   = 0;

/* Pull-down values for Tagging angle */
int pitaganglenub      = 0; /* bitmask: 0=OFF, 1=Type-In, 2=Val1, 4=Val2, 8=Val3 */
float pitagangledefval = 45.0;
float pitagangleval2   = 0.0;
float pitagangleval3   = 45.0;
float pitagangleval4   = 90.0;
float pitagangleval5   = 0.0; /* not currently used */
float pitagangleval6   = 0.0; /* not currently used */

/* Screen control for cardiac gating */
int pitdel1nub = 7; /* Bitmask for Trigger Delay buttons */
int pitdel1type = PSD_LABEL_TD_DEFAULT;  /* text label for Trigger Delay button */
int pitrigwinnub = 63; /* Bitmask for Trigger Window buttons */
int pitseqnub = 7; /* Bitmask for Inter-Sequence Delay buttons */
int pitseqtype = PSD_LABEL_INTERSEQDELAY_DEFAULT;  /* text label for inter- sequence delay button */
int piphasenub = 3; /* Bitmask for Phase buttons */
int piphslnub = 2; /* Bitmask for Phases/Slices feedback fields */
int piviewseg = 0;  /* Field to prompt for views per segment field */
int pivpsdef=8;		/* default number of views per seg for fastcard */

int pitetr = 0;  /* Effective TR determined by PSD, used by resp trig screen */

int piautovoice = 1; /* flag for autovoice compatibility */

int pirtrigwinnub = 5; /* number of trigger window buttons */
int pirtwindefval = 30;
int pirtwinval2 = 10;
int pirtwinval3 = 20;
int pirtwinval4 = 30;
int pirtwinval5 = 40;
int pirtwinval6 = 50;

int pirtseqnub = 7;    /* inter-seq delay buttons (bitmap) */ 
int pirttseq;/* pi inter sequence delay time for resp trig */
int pirtait; /* pi avaiable imaging time for resp trig */
int pirtetr; /* pi effective tr for resp trig */
 
int pirtrepnub = 63; /* bit mask for resp rep buttons */
int pirtrepval2 = 5;
int pirtrepval3 = 4;
int pirtrepval4 = 3;
int pirtrepval5 = 2;
int pirtrepval6 = 1;
int pidefrtrep = 1;

int pirtpointnub = 30;
int pirtpointval2 = 10;
int pirtpointval3 = 20;
int pirtpointval4 = 30;
int pirtpointval5 = 40;
int pirtpointval6 = 50;

int pirtratenub = 1;

int pinavsltracknub = 0; /* Navigator slab/slice tracking support:    0 = off, 1 = on */
int pidefnavsltrack = 0;

int pinavautoaccwinnub = 0; /* Navigator auto acceptance window support: 0 = off, 1 = on */
int pidefnavautoaccwin = 1;

int pinavrrmeasnub = 0;  /* Navigator Resp Rate measurement support:  0 = off, 1 = on */
int pidefnavrrmeas = 0;

int pinavaccwinnub = 0; /* Bit mask for Navigator acceptance window */
int pinavaccwinval2 = 2;
int pinavaccwinval3 = 4;
int pinavaccwinval4 = 6;
int pidefnavaccwin = 2;

int pinavautotrigtimenub = 0; /* Bit mask for Navigator auto tirgger time */
int pinavautotrigtimeval2 = 5;
int pinavautotrigtimeval3 = 10;
int pinavautotrigtimeval4 = 20;
int pidefnavautotrigtime = 5;

int pinavpsctimenub = 0; /* Bit mask for Navigator prescan time */
int pinavpsctimeval2 = 5;
int pinavpsctimeval3 = 10;
int pinavpsctimeval4 = 20;
int pidefnavpsctime = 10;

int pinavrrmeastimenub = 0; /* Bit mask for Max RR Measurement time */
int pinavrrmeastimeval2 = 20;
int pinavrrmeastimeval3 = 40;
int pinavrrmeastimeval4 = 60;
int pidefnavrrmeastime = 20;

int pinavmaxintervalnub = 0; /* Bit mask for Max Navigator interval in Navigator gating*/
int pinavmaxintervalval2 = 100;
int pinavmaxintervalval3 = 200;
int pinavmaxintervalval4 = 500;
int pidefnavmaxinterval = 200;

int pinavtypenub = 0; /* Bit mask for Navigator type */
int pidefnavtype = 1;

int pinavpscpausenub = 1; /* Check box for pause after navigator prescan */
int pidefnavpscpause = 0;

int pinavsigenhancenub = 0; /* Check box for Navigator signal enhancement */
int pidefnavsigenhance = 1;

float pinavmaxrr = 20.0;  /* Maximum RR value for same #slices, #acqs, # of resp interval for RR measurement */
int pinavrrmeasmaxsl = 1; /* Max #slices available with measured resp rate */
int pinavrrmeasrtrep = 1; /* Min # Resp Intervals available with measured resp rate */
int pinavrradjust = 0; /* bit for parameter optimization selection for RR measurement*/
                       /* bit0-thickness, bit1-spacing, bit2-# of resp interval, bit3-manual selection */

int pivascop = 0; /* Set to 1 if flow suppression screen
		     required (i.e. phase contrast) */

int pizmult = 0;	/* Multi group capability for scan in fse-xl. */
int pimultigroup = 1; /* Multi group capability for scan. 1=on, 0 = off */
int pimultislab  = 0; /* Multi slab capability for scan. 1=on, 0=off */

/* bit maps for default selection on vascular enhancement screens */
int pidefproj = 5;     /* projections */
int pidefflax = 8;     /* flow axes selection */
int pidefaddimg = 8;   /* additional images */
int pidefflrc = 1;     /* flow recon type */

int pigradcoil = 1;          /* gradient shield mode: 0 = unshielded gradient
			  coil, 1 = shielded gradient coil */
float dfscale = 1.0;   /* Digital Filter Scale Factor */

/* Prescan button defaults */
int pipscdef = 1;  /* bitmask control for default backlighting of prescan
                      buttons */
 
/********************************************************/
/*   EPI DWI-TENSOR pi variables		        */
/********************************************************/
int pidifpage = 0; 	        /* Control of diffusion page and diffusion option */

int pidifaxnub = 31;	         /* diffusion direction variables */
char pidifaxval1[7] = "L/R";
char pidifaxval2[7] = "A/P";
char pidifaxval3[7] = "S/I";
char pidifaxval4[7] = "ALL";
char pidifaxval5[7] = "SLICE";
char pidifaxval6[7] = "TENSOR";

int pidiffproctype = 0;          /* Bitmask to show/hide automated DTI processing buttons */
int pidifnumdirsnub = 15;        /* Bitmask to show/hide DTI directions that can be chosen */
int pidifnumdirsdefval = 6;       
int pidifnumdirsval2 = 6;
int pidifnumdirsval3 = 15;
int pidifnumdirsval4 = 55;
int pidifnumt2nub = 15;          /* Bitmask to show/hide # of T2 images menu for DTI */
int pidifnumt2defval = 1;          
int pidifnumt2val2 = 1;
int pidifnumt2val3 = 2;
int pidifnumt2val4 = 4;

int pidefbval = 1000;		 /* b value variables       */
int pibvnub = 15;
int pibval2 = 500;
int pibval3 = 750;
int pibval4 = 1000;
 
int pidifrecnub = 1;		 /* recon option variables       */

char pidifrecval1[30] = "SAVE DIFFUSION IMAGES";
char pidfirecval2[30];
char pidfirecval3[30];
char pidfirecval4[30];
char pidfirecval5[30];

int pimintediflabel = 0; /* Label indicator: 0 - Optimize TE, 1 - Super G */
int pimintedifvis = 1;   /* Visibility of the "Optimize TE"/"Super G" button : 0 - invisible, 1 - visible */

int pimintedifnub = 1; /* Optimize TE button control in diffusion screen */
int pimintedifdef = 1; /* Default Optimize TE button control */

int piseparatesynbnub = 0; /* Separate Series for Synthetic DWI button control */

/* Number of b-values UI */
int pinumbnub = 63;
int pinumbval2 = 1;
int pinumbval3 = 5;
int pinumbval4 = 10;
int pinumbval5 = 20;
int pinumbval6 = 40;

/* Number of synthetic b-values UI */
int pinumsynbnub = 63;
int pinumsynbval2 = 0;
int pinumsynbval3 = 1;
int pinumsynbval4 = 2;
int pinumsynbval5 = 3;
int pinumsynbval6 = 4;

/* Number of NEX for T2 images UI */
int pidifnext2nub = 63;
float pidifnext2val2 = 1;
float pidifnext2val3 = 2;
float pidifnext2val4 = 4;
float pidifnext2val5 = 8;
float pidifnext2val6 = 16;

int pibvalstab = 1; /* control to turn on/off bval input table for diffusion */
int pisynbvalstab = 1; /* control to turn on/off syn bval input table for diffusion */
int pidifnextab = 1; /* control to turn on/off nex input table for diffusion */
float pidifavgnex = 1; /* Average number of NEX across b-values */

/* Bolus Chasing CVs - CMC */
int pimultistation = 0; /* Doing MultiStation? */
int piautostep = 0;     /* Doing AutoStep? */
int pisioverlap = 0;    /* S/I Overlap in mm. (percent from FOV) */

/* scan setup */
int pisetup = 1;

/* SAR reporting */
float picasar; /* coil specific */
float pipsar;  /* coil peak */
float piasar;  /* whole body */
float pihsar;  /* head */
float pitsar;  /* torso */
float piesar;  /* extremity */

/* B1 RMS reporting */
float pib1rms;

/* All img opts are ON by default.  Note that piimgoptval4
   has to be updated every time a new imaging option is added. */
int piimgoptval2 = 1073741823;
int piimgoptval3 = 1073741823;
int piimgoptval4 = 15; 

int pidixproc = 0; 

/* T2Map Advisory */
int piadvt2map = 0;

/* Table movement control variables
   0 uses default hardware settings */
int pitablemaxspeed = 0; /* um/sec   */
int pitablemaxaccel = 0; /* um/sec^2 */
int pitablemaxdecel = 0; /* um/sec^2 */

/********************************************************/
/*   MR-TOUCH pi variables		        */
/********************************************************/
int pitouch = 0;     /* Control of MR-Touch tab*/
int pitouchfreq = 0; /* MR-TOUCH Driver Freq */
int pitouchamp = 0; /* MR-TOUCH Driver Amplitude */
int pitouchcyc = 0; /* MR-TOUCH Driver Cycle per Trigger */
int pitouchtphases = 0; /* MR-TOUCH Temporal Phases */

int pitouchfreqnub = 7; /* MR-TOUCH Driver Freq */
int pitouchfreqval2 = 40;
int pitouchfreqval3 = 60;
int pitouchfreqval4 = 80;
int pideftouchfreq = 60;

int pitouchmegfreqnub = 7; /* MR-Touch Motion Encoding Gradient Freq */
int pitouchmegfreqval2 = 60;
int pitouchmegfreqval3 = 120;
int pitouchmegfreqval4 = 150;
int pideftouchmegfreq = 60;

int pitouchampnub = 7; /* MR-TOUCH Driver Amplitude */
int pitouchampval2 = 30;
int pitouchampval3 = 50;
int pitouchampval4 = 80;
int pideftouchamp = 50;

int pitouchcycnub = 7; /* MR-TOUCH Driver Cycle per Trigger */
int pitouchcycval2 = 3;
int pitouchcycval3 = 60;
int pitouchcycval4 = 120;
int pideftouchcyc = 60;

int pitouchtphasesnub = 7; /* MR-TOUCH Temporal Phases */
int pitouchtphasesval2 = 4;
int pitouchtphasesval3 = 6;
int pitouchtphasesval4 = 8;
int pideftouchtphases = 4;

int pitouchaxnub = 15; /* MR-TOUCH MEG direction */
int pitouchaxval2 = 1;
int pitouchaxval3 = 2;
int pitouchaxval4 = 4;
int pitouchaxval5 = 7;
int pideftouchax = 4; /*only X/Y/Z displayed in default*/

float pitouchmenc = 0.0; /* MR-Touch MENC factor */

/* 3D ASL post label delay UI */
int pipostlabeldelaynub = 0;
float pipostlabeldelay2 = 1025.0;
float pipostlabeldelay3 = 1525.0;
float pipostlabeldelay4 = 2025.0;
float pipostlabeldelay5 = 2525.0;
float pipostlabeldelay6 = 3025.0;
float pidefpostlabeldelay = 1525.0;

/* For Phase Image UI element */
int piphaseimagenub = 0;
int piphaseimageval2 = PSD_PHASEIMAGE_NORMAL; 
int piphaseimageval3 = PSD_PHASEIMAGE_INVERT;
int piphaseimageval4 = PSD_PHASEIMAGE_OFF;

/* In-Plane Res advisory field support */
int piinplaneres = 0;
float ihinplanexres = 1.0;
float ihinplaneyres = 1.0;

/* RBW per pixel advisory field support */
int pirbwperpix = 0;
float ihrbwperpix = 1.0;

/* ESP advisory field support */
int piesp = 0;
float ihesp = 1.0;

/* Enable series per phase for multi-phase */
int piserperph = 0;

/* Auto Protocol Optimization UI */
int piapx = 0;
float pitbh = 0.0;
float pitbhlast = 0.0;
int pinbh = 0;
int pinbhnub = 0;
int pidefnbh = 0;
int piapxprfstepnub = 0;
int piapxprfstepval1 = 2000000; /* us */
int piapxprfstepval2 = 5000000; /* us */
int piapxprfres = 0;
int piapxprfacc = 0;

/* config file variables */
/* ------------------------------ */

/* Table Movement hardware capabilities
   Use to limit pitablemax* variables
   Initialize to zero to use default hardware settings */
int cftablemaxspeed = 0; /* um/sec   */
int cftablemaxaccel = 0; /* um/sec^2 */
int cftablemaxdecel = 0; /* um/sec^2 */

float cflinfrq = 60.0;
float cfhpdl = 800.0;
float cfbpdl = 5000.0;
float cfhpsl = 350.0;
float cfbpsl = 4000.0;
float cfhpv = 3000.0;
float cfbpv = 6000.0;
float cfhqpc = 0.15;
float cfbqpc = 0.7;
float cfhllr = 857.0;
float cfbllr = 394.0;
float cfloss = 1.0715;

int cfbwmin = 2;
int cfbwmin1 = 2;		/* First echo minimum bw for 0.5 T (in kHz) */

/* SAR Limits */
float cfmaxave = 2.0;        /* Operational whole body average SAR limit */
float discretionaryave = 2.0;  /* Discretionary whole body average SAR limit */
float cfmaxavepm = 2.0;      /* Regulatory whole body average SAR limit */
float cfmaxhave = 3.2;       /* Regulatory head average SAR limit */
float discretionaryhave = 3.2; /* Discretionary head average SAR limit */
float cfmaxextremity = 10.0; /* Extremity infinitesmial mass SAR limit */
float cfmaxcave = 3.2;       /* Coil average SAR limit */
float cfmaxpeak = 10.0;      /* Head/Body spatial peak-average SAR limit */
float cfmaxepeak = 20.0;     /* Spatial peak-average extremity SAR limit */
float cfmaxcpeak = 10.0;     /* Coil spatial peak-average SAR limit */

/* Derating factor for SAR limit in Burst Mode */
float cfderatingFactorRTSAR = 1.0;

float discretionaryPeakB1 = 30.0; /* Discretionary Peak B1 Limit */
float discretionaryB1rms = 3.2;   /* Discretionary B1 RMS Limit */

float   maxSeriesTime = 6E9;/* Maximum series time */ 

/* Available BAM
   Initialize to 1 ICN BAM (7476 MiB) rounded down to the nearest MB
   Actual value populated by scn during prescription */
float cftpssize = 7.839E9;

int cftpsnproc = 4;
/* Deprecated */
int cftpsproctype = 1;

/* Pass size in bytes for a single receiver */
n64 rhrawsize = 10000ULL;

/* Available disk space in bytes for Acquisition to Disk Feature */
n64 cfacqtodisksize = 75161927680ULL; /* 75161927680  = 70 GB, ~ size of disk */

/* Maximum exciter hardware attenuation value */
int cfrfMaxAttenuation = 400;

int cfdbmax = 100;
int cfbbmod = 0;
int cftrnew = 0;
int cfrecvst = 0;
int cfrecvend = 0;

/* Gradient amplifiers
 * 8603
 * 8604
 * 8607
 * 8645
 * 8250 - Analogic single for VMX 
 * 8251 - Analogic twin for VMX SR40
 * 9090 - YMS HDU for Profile system
 * 8651 - Analogic SGD Hi Slew
 * 8280 - Analogic SGD Base
 * 8915 - ACGD Hi Slew
 * 8905 - ACGD Lite 
 * 8925 - ACGD Pro
 * 8290 - MFO, Analogic SGD Base
 * 8916 - HFD
 * 8917 - HFD-S
 * 8295 - MFO4, Profile5  Analogic
 * 8918 - Dual HFD
 * 8919 - XFD
 * 8920 - XGD
 * 8921 - XG2
 * 5550 - SSSD
 */
int cfgradamp = 8920;   /* Indicate gradient amplifier type */

int cfhtdel = 10000;    /* Fixed hardware trigger delay in us */
int cfcftdel = 28000;   /* cine filter trigger delay in us */
float cfcgain = 1;      /* coil recon gain */

/* config CVs for new 0.5T RF amp/Power mon, 5/18/93 */
int cfrfrapb = 16000;   /* Rated Output Power(body), in unit of Watt */
int cfrfraph = 2000;    /* Rated Output Power(head), in unit of Watt */
int cfrfraps = 2000;    /* Rated Output Power(spectro), in unit of Watt */
int cfrfrapcw = 100;    /* Rated Output Power(CW), in unit of Watt */
int cfrfmapb = 1000;    /* Maximum Average Power(body), in unit of Watt */
int cfrfmaph = 100;     /* Maximum Average Power(head), in unit of Watt */
int cfrfmaps = 100;     /* Maximum Average Power(spectro), in unit of Watt */
float cfrfmpeb = 60.0;  /* Maximum Pulse Energy(body), in unit of J */
float cfrfmpeh = 6.0;   /* Maximum Pulse Energy(head), in unit of J */
float cfrfmpes = 6.0;   /* Maximum Pulse Energy(spectro), in unit of J */
int cfrfmpwb = 20000;   /* Maximum Pulse Width(body), in unit of us */
int cfrfmpwh = 20000;   /* Maximum Pulse Width(head), in unit of us */
int cfrfmpws = 20000;   /* Maximum Pulse Width(spectro), in unit of us */
float cfrfmdcb = 0.60;  /* Maximum Duty Cycle(body) */
float cfrfmdch = 0.60;  /* Maximum Duty Cycle(head) */
float cfrfmdcs = 0.60;  /* Maximum Duty Cycle(spectro) */
int cfpwrmontyp = PMTYP_UPMAVERAGE; /* Power Monitor type */
int cfpwrmonreflmeas = 1;/* Power Monitor reflection: 0=PM does not measure refl power,
                                                        1=PM does measure refl power */
int cfpsdgraddly = 120; /* Gradient system delay: default to 120us for 0.5T*/
int cfpsdrfdly = 56;    /* rf system delay: default to 56us */
int cfpsdrfdlyx = 56;   /* rf system delay in x dir */
int cfpsdrfdlyy = 56;   /* rf system delay in y dir */
int cfpsdrfdlyz = 56;   /* rf system delay in z dir */
int cfxrdelay = 180;    /* group delay in x dir for spiral */
int cfyrdelay = 180;    /* group delay in y dir for spiral */
int cfzrdelay = 180;    /* group delay in z dir for spiral */

/*more config file CVs to support vmx/vectra electronics */
int cfcoilshld = 0;  /* Indicates if a system has switchable grad shield:
			0=Not switchable, 1=switchable */
int cfrfunblank;     /* unblank time for rf amplifier */


/************************************
following parameters are new for 5.5
************************************/

float cfxfa = 194.0;
float cfxcc = 100.0;

float cfyfa = 194.0;
float cfycc = 100.0;

float cfzfa = 194.0;
float cfzcc = 100.0;

int cfxgram = PSD_GRAM1;    /* GRAM: 0 = no gram, 1 = gram-1 2 = gram-2 */
int cfygram = PSD_GRAM1;
int cfzgram = PSD_GRAM1;
int cfxasm = YES;    /* ASM present */
int cfyasm = YES;
int cfzasm = YES;
int cfxgasm = NO;    /* GASM present */
int cfygasm = NO;
int cfzgasm = NO;
int cfxseries = NO;  /* Axis in series */
int cfyseries = NO;
int cfzseries = NO;
int cfxnumpower = 1; /* Number of power modules for gradient */
int cfynumpower = 1;
int cfznumpower = 1;

int cftuning = GRAM_TUNE_ANALOG;  /* GRAM tuning board type */
 
int cfrealtime = PSD_ON; /* real-time monitoring */
  
int cfcompress = 100;  /* compression factor from config file. If 100
                          then don't set RHRCCOMP in rhrcctrl */
/* Patient dB/dt exposure limitations */
float cfdbdtts = 0.0;    /* dB/dt limit (Tesla/sec) */

/* SAR/dbdt changes for E3 */

float cfdbdtper = 100.0;    /* dB/dt limit (percent of limit) */
float cfdbdtper2 = 100.0;   /* secondary dB/dt limit (percent of limit) */

float pidbdtts = 0.0;     /* dB/dt value (Tesla/sec) */
float pidbdtper = 0.0;    /* dB/dt value (percent of limit) */
int cfgovbody = IEC_BODY;  /* governing body, e.g., FDA, IEC, MHW */

/* ..... XRMB (start) */

int cfgcoiltype   = PSD_XRMB_COIL; /* change default coil to XRMB */
int cfsrmode      = PSD_SR200;     /* change default slew rate to 200 */

float cfgpeakirms = 620.0; /* Peak rms current for gradient coil (Amps) */
float cfgcontirms = 256.0; /* Continuous rms current for gradient coil (Amps) */
float cfgburstime = 2.0;   /* longest burst at peak rms current (minutes) */

float cfxirms = 256.0;    /* RMS current, X driver (Amps) */
float cfyirms = 256.0;    /* RMS current, Y driver (Amps) */
float cfzirms = 256.0;    /* RMS current, Z driver (Amps) */

float cfxipeak = 620.0;   /* Peak current ouput, X driver (Amps) */
float cfyipeak = 620.0;   /* Peak current ouput, Y driver (Amps) */
float cfzipeak = 620.0;   /* Peak current ouput, Z driver (Amps) */

int cfrmp2xfs = 248;
int cfrmp2yfs = 248;
int cfrmp2zfs = 248;

int cffall2x0 = 248;
int cffall2y0 = 248;
int cffall2z0 = 248;

float cfxfs = 5.0;
float cfyfs = 5.0;
float cfzfs = 5.0;

int cfxfull = 31000;   /* Default "full" values are changed to 31000 for XGD driver */
int cfyfull = 31000;   /* The default will be same for both 1.5T and 3.0T */
int cfzfull = 31000;

float cfxbeta = 1.0;
float cfybeta = 1.0;
float cfzbeta = 1.0;

/* ..... XRMB (end) */

/* Gradient peak capability start */
float cfpeakFSAmp = 3.3;  /* peak grdient amplitude in G/cm */
int cfpeakRiseTime = 276; /* gradient rise time to reach peak gradient amplitude in uS */
int cfpeakFallTime = 276; /* gradient fall time to reach 0 G/cm from peak gradient amplitude in uS */
int cfpeakSRMode = 120;   /* peak slew rate in T/m/sec */
/* Gradient peak capability end */

float cfxamptran = 100.0;  /* Amp transition current, X driver (kA/sec) */
float cfyamptran = 100.0;  /* Amp transition current, Y driver (kA/sec) */
float cfzamptran = 100.0;  /* Amp transition current, Z driver (kA/sec) */

float cfxiavrgabs = 100.0; /*Average absolute value current, X driver (Amps)*/
float cfyiavrgabs = 100.0; /*Average absolute value current, Y driver (Amps)*/
float cfziavrgabs = 100.0; /*Average absolute value current, Z driver (Amps)*/

float cfxirmspos = 100.0;  /* Positive RMS current, X driver (Amps) */
float cfyirmspos = 100.0;  /* Positive RMS current, Y driver (Amps) */
float cfzirmspos = 100.0;  /* Positive RMS current, Z driver (Amps) */

float cfxirmsneg = 100.0;  /* Negative RMS current, X driver (Amps) */
float cfyirmsneg = 100.0;  /* Negative RMS current, Y driver (Amps) */
float cfzirmsneg = 100.0;  /* Negative RMS current, Z driver (Amps) */

float cfxpwmdc = 0.2;      /* Pulse width modulation duty cycle, X driver */
float cfypwmdc = 0.2;      /* Pulse width modulation duty cycle, Y driver */
float cfzpwmdc = 0.2;      /* Pulse width modulation duty cycle, Z driver */

/* GRAM freewheel mode slew rates */
int cfrmp2xfsfw = 4200;
int cfrmp2yfsfw = 4200;
int cfrmp2zfsfw = 4200;
int cffall2x0fw = 4200;
int cffall2y0fw = 4200;
int cffall2z0fw = 4200;

/* Distances from isocenter where dB/dt in measured, physical X, Y, & Z axes */
float cfdbdtdx = 33.3;  /* centimeters */
float cfdbdtdy = 33.3;
float cfdbdtdz = 33.3;

/* keys to determine whether zoom gradient limitations will be applied (July 2001) */
int cfzoomlim_fov = 1;
int cfzoomlim_ofc = 1;
int cfzoomlim_ctl = 1;

/* bitmask filled in by scan: 0 = freewheel or no gram,
   1 = active gram.  Bit 0 = X, Bit 1 = Y, Bit 2 = Z */
int sigrammode = XGRAM + YGRAM + ZGRAM;

float cfsrmodeconv = 77.0; /* maximum slew rate limit for conventional scans */
float cfsrmodeact = 77.0;  /* actual slew rate limit to use for conventional scans */
int   cfopenmagnet = 0;    /* Open Magnet type: 0=standard, 1=iMri*/
float cftableanglex = 0.0; /* table angle in axis x - for iMR - nMR*/
float cftableangley = 0.0; /* table angle in axis y - for iMR - nMR*/
float cftableanglez = 0.0; /* table angle in axis z - for iMR - nMR*/
float cftableoffsetx = 0.0; /* table offset in axis x - for nMR */
float cftableoffsety = 0.0; /* table offset in axis y - for nMR */
float cftableoffsetz = 0.0; /* table offset in axis z - for nMR */

/* Configuration variables to support SGD gradient heating and
   increased CERD receiver bandwidth */
float cfxmgrampow = 1500.0;
float cfymgrampow = 1500.0;
float cfzmgrampow = 1500.0;
float cfsdlim = 0.60;
float cfxrsat = 0.022;
float cfyrsat = 0.022;
float cfzrsat = 0.022;
float cfxvsat = 4.8;
float cfyvsat = 4.8;
float cfzvsat = 4.8;
float cfgpmpow =18900;
float cfmgps = 9000.0;
float cfvhr = 17.0;
float cfrcoil = 0.35;
float cflcoil = 1.4;
float cfraccoil = 152.0;
float cfpmgs = 3000;
float cfrhr = 0.1;
float cfxvpwm = 35.0;
float cfyvpwm = 35.0;
float cfzvpwm = 35.0;
float cfmaxbw = 250.0;  /* Max RBW of the system */
int cfnumrcvrs = 4;     /* Max number of receivers for a system */

/* Faster prescan cv */
int cffastprescan = 1;

/* XRMB and XGD model parameters read from GradientConfig.cfg */

float cfcoilDC_gain = 124.0;
float cfcoilDC_Rx = 0.097;
float cfcoilDC_Ry = 0.097;
float cfcoilDC_Rz = 0.105;
float cfcoilDC_Lx = 0.000767;
float cfcoilDC_Ly = 0.000782;
float cfcoilDC_Lz = 0.000782;

float cfcoilAC_gain = 124.0;
float cfcoilAC_power = 18000.0;
float cfcoilAC_power_1axis = 10000.0;
float cfcoilAC_power_burst = 36000.0; /* Burst Mode */
float cfcoilAC_temp_base_burst = 20.0; /* Burst Mode */
float cfcoilAC_temp_limit_burst = 56.0; /* Burst Mode */
float cfcoilAC_timeconstant_burst = 240.0; /* Burst Mode */
float cfcoilAC_RxA = 0.097;
float cfcoilAC_RyA = 0.097;
float cfcoilAC_RzA = 0.105;
float cfcoilAC_RxB = 2.5;
float cfcoilAC_RyB = 2.5;
float cfcoilAC_RzB = 0.2;
float cfcoilAC_RxC = 8.5;
float cfcoilAC_RyC = 8.5;
float cfcoilAC_RzC = 10.15;

float cfcoilAC_lumpR1x = 0.140;
float cfcoilAC_lumpR1y = 0.139;  
float cfcoilAC_lumpR1z = 0.150;
float cfcoilAC_lumpR2x = 22.3;
float cfcoilAC_lumpR2y = 21.6;
float cfcoilAC_lumpR2z = 37.3;
float cfcoilAC_lumpR3x = 22.3;
float cfcoilAC_lumpR3y = 21.6;
float cfcoilAC_lumpR3z = 37.3;
float cfcoilAC_lumpR4x = 22.3;
float cfcoilAC_lumpR4y = 21.6;
float cfcoilAC_lumpR4z = 37.3;
float cfcoilAC_lumpR5x = 221.0;
float cfcoilAC_lumpR5y = 186.0;
float cfcoilAC_lumpR5z = 214.0;
float cfcoilAC_lumpL1x = 0.000528;
float cfcoilAC_lumpL1y = 0.000528;
float cfcoilAC_lumpL1z = 0.000496;
float cfcoilAC_lumpL2x = 0.000528;
float cfcoilAC_lumpL2y = 0.000528;
float cfcoilAC_lumpL2z = 0.000496;
float cfcoilAC_lumpL3x = 0.000528;
float cfcoilAC_lumpL3y = 0.000528;
float cfcoilAC_lumpL3z = 0.000496;
float cfcoilAC_lumpL4x = 0.00272;
float cfcoilAC_lumpL4y = 0.00297;
float cfcoilAC_lumpL4z = 0.00464;
float cfcoilAC_lumpCx = 0.00001;
float cfcoilAC_lumpCy = 0.0002;
float cfcoilAC_lumpCz = 0.0002;
float cfcoilAC_lumpRcable = 16.28;
float cfcoilAC_lumpRoutputFilter = 0.0048;
float cfcoilAC_lumpLoutputFilter = 0.00138;
float cfcoilAC_timeres = 48.0;
int cfcoilAC_fftpoints = 65536;
float cfcoilAC_xgain = 99.90;
float cfcoilAC_ygain = 99.40;
float cfcoilAC_zgain = 89.52;
float cfcoilQAC_A0 = 6.3623;
float cfcoilQAC_A1 = 11.310;
float cfcoilQAC_A2 = 7.8672;
float cfcoilQAC_A3 = 2.4153;
float cfcoilQAC_A4 = 0.2774;
float cfcoilQAC_A5 = 0.0;
float cfcoilQAC_A6 = 0.0;
float cfcoilQAC_Xcoef = 1.0;
float cfcoilQAC_Ycoef = 0.9303;
float cfcoilQAC_Zcoef = 0.8667;
float cfcoilQAC_maxtime = 20000.0;
float cfcoilQAC_const = 0.322064;
float cfcoilQAC_heat_maxtime = 4660.0;
float cfcoilQAC_heat_slope = 0.0321;
float cfcoilQAC_heat_const = 1.1441;
float cfcoil_irmslimit_total = 140.0;

float cfxgd_timeres = 128.0;
float cfxgd_cableirmslimit  = 270.0;
float cfxgd_cableirmslimit_burst = 340.0; /* Burst Mode */
float cfxgd_cabletimeconstant_burst = 100.0; /* Burst Mode */
float cfxgd_busbartemplimit = 91.0;
float cfxgd_chokepowerlimit = 0.0;

float cfxps_avglvpwrlimit = 18000.0;
float cfxps_avghvpwrlimit = 26000.0;
float cfxps_avgpdulimit = 50000.0;
float cfxgd_IGBTtemplimit = 125.0;
float cfxfd_power_limit = 8.5;
float cfxfd_temp_limit = 8.5;

int cfecc_modeling = 0; 
int cfeccupdatetime = 24.0;
float cfecc_xtau1 = 1.0;
float cfecc_xtau2 = 1.0;
float cfecc_xtau3 = 1.0;
float cfecc_ytau1 = 1.0;
float cfecc_ytau2 = 1.0;
float cfecc_ytau3 = 1.0;
float cfecc_ztau1 = 1.0;
float cfecc_ztau2 = 1.0;
float cfecc_ztau3 = 1.0;
float cfecc_xalpha1 = 0.0;
float cfecc_xalpha2 = 0.0;
float cfecc_xalpha3 = 0.0;
float cfecc_yalpha1 = 0.0;
float cfecc_yalpha2 = 0.0;
float cfecc_yalpha3 = 0.0;
float cfecc_zalpha1 = 0.0;
float cfecc_zalpha2 = 0.0;
float cfecc_zalpha3 = 0.0;

int cfps_avgpwrLimit = 1000;
int cfps_avgpwrLimit_total = 1000;
int cfps_pkpwrLimit = 1000;
int cfps_pkpwrLimit_total = 1000;
int cfpdu_avgpwrLimit = 1000;
int cfpdu_pkpwrLimit = 1000;
int cfpdu_breakercurrentLimit = 10;
int cfcooling_model = 0;
int cfcooling_sysLimit = 1;
int cfcooling_coilLimit = 1;
int cfcooling_ccuLimit = 1;
int cfxfmr_rmsLimit = 1;
int cfresist_wattLimit = 1;
int cfcoilACpower_axisPer = 80;
int cfcoil_vrmsLimit = 1000;

/* Maximum allowed system FOV from MRconfig */
float cfsystemmaxfov = 500.0;

/*
 * Added 'cfcerdtype' config variable to indicate type of CERD.
 * The value will be obtained from the MRconfig.cfg file which contains a
 * 'cerdType' entry.
 * 
 * cerdType = "n01" -> standard CERD in slot 1
 *            "n02" -> Universal CERD in slot 1
 *            "n21" -> standard CERD in slot 1, Universal CERD in slot 2
 *            "n22" -> Universal CERD in slots 1 and 2 (dual UCERD)
 *    where n = 0 for Milwaukee, 1 for YMS
 * 
 */
int cfcerdtype = 1;

/* define a cfpicture for "Picture This". */
int cfpicture = 0;

float cfspectroPMcal = 0.1;  /* spectro amp/power monitor coupling cal. */


int rec_mode = 0;

int opnewgeo = 1;

/* Used to create simulation matrices in obloptimize */
/* If set equal to 1 obloptimize will create rotation matrices */
/*                 0 the rotation matrices from scan will be used */
int simulation = 0;

/* Spectroscopy interface variables */
int csi_grid_on = 0;  /*csi grid 0=off, 1=probeSI, 2=research mode*/
int pispecprescan = 0; /*Spectro Prescan button 0=off or 1=on*/

/* *****************
   Definitions for picsimode
   -------------------------
   PICSI_CALC_3D          0
   PICSI_CALC_1SLICE      1
   PICSI_CALC_RXEXACT     2
   PICSI_CALC_3D1SLICE    3
   PICSI_FREEFORM_GRX     4
   PICSI_CALDATA_REQ      8
   **************************** */
int picsimode = PICSI_CALC_1SLICE;

int rhrlfov = 0;
int rhapfov = 0;
int rhsifov = 0;

int pitracqnub = 0;
int pitracqval2 = 0;
int pitracqval3 = 0;
int pitracqval4 = 0;
int pitracqval5 = 0;
int pitracqval6 = 0;

/* Current application will use fast (SSP-based) coil switching */
int picoilfastswitchrequired = 0;

/*************************************************************************
 * coilInfo structure filled by Scan with coil related information.      *
 * volRecCoilInfo structure filled by Scan with coil related information *
 *   for the volume receive coil related to each element of CoilInfo.    *
 * fullRecCoilInfo structure filled by Scan with full coil related       *
 *   information for full rec coil mode.                                 *
 * txCoilInfo structure filled by Scan with transmit coil related        *
 *   information.                                                        *
 * The COIL_INFO and TX_COIL_INFO is defined                             * 
 *   in /vobs/lx/include/CoilParameters.h                                *
 *                                                                       *
 * Initialize coil information to 1.5T XRMB BODY coil to allow PSDs      *
 *   to evalute until Scan sends the values for the current coil.        *
 *************************************************************************/

COIL_INFO coilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     0,             /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */
     0,             /* aps1ModPsTloc */
     0,             /* aps1ModPsRloc */
     FOV_MAX,       /* autoshimFov */
     FOV_MAX,       /* assetCalMaxFov */
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0,           /* pureTuningFactorBody */
     1,             /* numChannels */
     -1.0}          /* switchingSpeed */
};

COIL_INFO fullRecCoilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     0,             /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */
     0,             /* aps1ModPsTloc */
     0,             /* aps1ModPsRloc */
     FOV_MAX,       /* autoshimFov */
     FOV_MAX,       /* assetCalMaxFov */
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0,           /* pureTuningFactorBody */
     1,             /* numChannels */
     -1.0}          /* switchingSpeed */
};

COIL_INFO volRecCoilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     0,             /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */ 
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */                      
     0,             /* aps1ModPsTloc */                       
     0,             /* aps1ModPsRloc */                       
     FOV_MAX,       /* autoshimFov */                         
     FOV_MAX,       /* assetCalMaxFov */                      
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0,           /* pureTuningFactorBody */
     1,             /* numChannels */
     -1.0}          /* switchingSpeed */
};

TX_COIL_INFO txCoilInfo[MAX_TX_COIL_SETS] = {
    {0,                     /* coilAtten */
     TX_COIL_BODY,          /* txCoilType */
     TX_POS_BODY,           /* txPosition */
     PSD_PROTON,            /* txNucleus */
     TX_AMP_NB,             /* txAmp */
     25.0,                  /* maxB1Peak */
     8.0,                   /* maxB1Squared */
     1.23,                  /* cableLoss */
     0.954,                 /* coilLoss */
     {0.326, -6.05E-3, 4.05E-5, -1.11E-7, 1.08E-10, 0.0, 1.0, 2.0, 3.0, 4.0}, /* reflCoeffSquared */
     0.0,                   /* reflCoeffMassOffset */
     0.0,                   /* reflCoeffCurveType */
     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, /* exposedMass */
     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, /* lowSARexposedMass */
     {0.0026, 0.0, 0.0, 0.0, 0.0, 0.0, 1.48, 0.0, 0.0, 0.0, 0.0, 0.0}, /* jstd */
     {0.00124, 0.0, 0.0, 0.0, 0.0, 0.0, 1.48, 0.0, 0.0, 0.0, 0.0, 0.0}, /*  mean jstd */
     1.96}                   /* number of standard deviations */
};

/***************************************************************
 * Narrowband and broadband local transmit select switch setting.
 * CIM calculates setting, PSD sets in entry point table, and 
 * SCP applies the setting in the hardware.  The valid values
 * are defined in lx/include/coilIdDefs.h
 ***************************************************************/ 
int cfNbTransmitSelect = TRANSMIT_SELECT_NONE; 
int cfBbTransmitSelect = TRANSMIT_SELECT_NONE;
int cfMnsConverterSelect = MNS_CONVERTER_SELECT_NONE;

/* Multi-b-value: b-values and NEX for each T2 image */
float bvalstab[MAX_NUM_BVALS] = {
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};

float synbvalstab[MAX_NUM_SYNBVALS] = {
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};

float difnextab[MAX_NUM_BVALS] = {
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

float difnextab_opt[MAXOPTSET][MAX_NUM_BVALS] = {
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};

/* MAVRIC-SL Arrays*/
float rhrcmavric_b0_offset[MAVRIC_MAX_BINS] = {
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000};
/* End MAVRIC-SL*/


/* 3dASL arrays */
short aslnextab[MAX_ASL_PHASES] = {-1, -1, -1};  /* NEX table */
short aslimgtab[MAX_ASL_PHASES] = {-1, -1, -1}; /* Image type debale: 1 = PW, 2 = PD, 3 = T1 */

/* Parallel Imaging UI */
int   piaccelscrn = 0;                 /* For controlling acceleration tab */
float piaccel_total_stride = 1.0;      /* Total Acceleration - If needed */     

float cfaccel_ph_maxstride = 1.0;      /* Coil specified limit in phase direction.*/
float cfaccel_sl_maxstride = 1.0;      /* Coil specified limit in slice direction.*/
float cfaccel_cs_maxstride = 1.0;      /* Application specified limit for CS factor.*/

float accel_ph_stride = 1.0;           /* Actual ph outer acceleration factor (PSD)*/
float accel_sl_stride = 1.0;           /* Actual sl outer acceleration factor (PSD)*/
float accel_ph_defstride = 2.0;        /* Default (initial) phase acceleration.*/
float accel_sl_defstride = 1.0;        /* Default (initial) slice acceleration.*/

float piaccel_ph_stride = 1.0;         /* Displayed slice acceleration. */
int   piaccel_phnub = 0;               /* Bitmask for phase acceleration menu.*/
int   piaccel_phedit = 1;              /* Ph UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_phval2 = 1.0;            /* Phase acceleration menu item 2 */
float piaccel_phval3 = 1.0;            /* Phase acceleration menu item 3 */
float piaccel_phval4 = 1.0;            /* Phase acceleration menu item 4 */
float piaccel_phval5 = 1.0;            /* Phase acceleration menu item 5 */
float piaccel_phval6 = 1.0;            /* Phase acceleration menu item 6 */

float piaccel_sl_stride = 1.0;         /* Displayed slice acceleration */
int   piaccel_slnub = 0;               /* Bitmask for slice acceleration menu.*/
int   piaccel_sledit = 1;              /* Slice UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_slval2 = 1.0;            /* Slice acceleration menu item 2 */
float piaccel_slval3 = 1.0;            /* Slice acceleration menu item 3 */
float piaccel_slval4 = 1.0;            /* Slice acceleration menu item 4 */
float piaccel_slval5 = 1.0;            /* Slice acceleration menu item 5 */
float piaccel_slval6 = 1.0;            /* Slice acceleration menu item 6 */

float piaccel_t_stride = 1.0;          /* Displayed temporal acceleration */
int   piaccel_tnub = 0;                /* Bitmask for temporal acceleration menu.*/
int   piaccel_tedit = 1;               /* Temporal UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_tval2 = 1.0;             /* Temporal acceleration menu item 2 */
float piaccel_tval3 = 1.0;             /* Temporal acceleration menu item 3 */
float piaccel_tval4 = 1.0;             /* Temporal acceleration menu item 4 */
float piaccel_tval5 = 1.0;             /* Temporal acceleration menu item 5 */
float piaccel_tval6 = 1.0;             /* Temporal acceleration menu item 6 */

float avminaccel_ph_stride = 1.0;      /* Advisory min phase acceleration.*/
float avminaccel_sl_stride = 1.0;      /* Advisory min slice acceleration.*/
float avminaccel_t_stride = 1.0;       /* Advisory min temporal acceleration.*/
float avmaxaccel_ph_stride = 1.0;      /* Advisory max phase acceleration.*/
float avmaxaccel_sl_stride = 1.0;      /* Advisory max slice acceleration.*/
float avmaxaccel_t_stride = 1.0;       /* Advisory max temporal acceleration.*/

float avminaccel_mb_stride = 1.0;       /* Advisory min multiband acceleration.*/
float avmaxaccel_mb_stride = 1.0;      /* Advisory max multiband acceleration.*/

float avminaccel_cs_stride = 1.0;       /* Advisory min CS acceleration.*/
float avmaxaccel_cs_stride = 1.0;      /* Advisory max CS acceleration.*/

float avminaccel_kt_stride = 1.0;      /* Advisory min slice acceleration.*/     
float avmaxaccel_kt_stride = 9.0;      /* Advisory max temporal acceleration.*/

float piaccel_ph_step = 0.0;          /* Phase Acceleration Step Size */
float piaccel_sl_step = 0.0;          /* Slice Acceleration Step Size */
float piaccel_t_step = 0.0;           /* Temporal Acceleration Step Size */
int   piaccel_mb_step = 0;            /* Multiband Acceleration Step Size */
float piaccel_cs_step = 0.0;          /* Compressed Sensing Acceleration Step Size */
int   piaccel_kt_step = 1;            /* Temporal Acceleration Step Size */ 

int   pimb = 0;
int   piaccel_mb_stride = 1;          /* Displayed multiband acceleration */
int   piaccel_mbnub = 0;              /* Bitmask for multiband acceleration menu.*/
int   piaccel_mbedit = 1;             /* Multiband UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
int   piaccel_mbval2 = 1;             /* Multiband acceleration menu item 2 */
int   piaccel_mbval3 = 1;             /* Multiband acceleration menu item 3 */
int   piaccel_mbval4 = 1;             /* Multiband acceleration menu item 4 */
int   piaccel_mbval5 = 1;             /* Multiband acceleration menu item 5 */
int   piaccel_mbval6 = 1;             /* Multiband acceleration menu item 6 */

int   pics = 0;
float piaccel_cs_stride = 1.0;          /* Displayed Compressed Sensing acceleration */
int   piaccel_csnub = 0;                /* Displayed Compressed Sensing acceleration */
int   piaccel_csedit = 1;               /* Compressed Sensing UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_csval2 = 1.0;             /* Compressed Sensing acceleration menu item 2 */
float piaccel_csval3 = 1.0;             /* Compressed Sensing acceleration menu item 3 */
float piaccel_csval4 = 1.0;             /* Compressed Sensing acceleration menu item 4 */
float piaccel_csval5 = 1.0;             /* Compressed Sensing acceleration menu item 5 */
float piaccel_csval6 = 1.0;             /* Compressed Sensing acceleration menu item 6 */

int   pikt = 0; 
int   piaccel_kt_stride = 1;            /* Displayed temporal acceleration */
int   piaccel_ktnub = 0;                /* Bitmask for temporal acceleration menu.*/
int   piaccel_ktedit = 1;               /* Temporal UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
int   piaccel_ktval2 = 6;               /* Temporal acceleration menu item 2 */
int   piaccel_ktval3 = 7;               /* Temporal acceleration menu item 3 */
int   piaccel_ktval4 = 8;               /* Temporal acceleration menu item 4 */
int   piaccel_ktval5 = 9;               /* Temporal acceleration menu item 5 */
int   piaccel_ktval6 = 10;               /* Temporal acceleration menu item 6 */

/* Host control of ARC image option for different coils: 
 * 0: ARC image option is disabled for all coils that is not
 *      compatible for ARC based on definition of CoilDB.
 * 1: ARC image option is disabled only for single channel coil
 * 2: ARC image option is not disabled for any coil*/
int piarccoilrestrict = 0; 

/* SDLC Checksum Parameters */
n32 chksum_rhdacqctrl = 0;
n32 chksum_scaninfo;
int chksum_rampdir = 1447292810;

/* When value is non-zero, scn will display the ERMES message number in
 * picontrastwarning when the contrast button is pressed. Introduced
 * for 3DASL. This can be extended to any other applications as needed */

int picontrastwarning = 0;

int piexcitemodenub = 1; /* Bit Mask for Excitation Mode UI: 0-Hide UI, 1-Selective, 2-Non-Selective, 4-Focus */
int pidefexcitemode = 0; /* Default value of Excitation Mode: 0-Selective, 1-Non-Selective, 2-Focus */
int cframpdir = 1;      /* Magnet  Ramp direction : 1 - Forward , -1 - Reverse  */                   
	  
int pihoeccvis = 0;  /* Flag for HOEC correction visibility: 1 = visible, 0 = invisible */
int pihoeccnub = 0;  /* Flag to enable/gray out the HOEC correction checkbox */

/* Reference B1 definition for prescan TG normalization */
float cfmaxb1ref = 14.63199; /* uTesla */
float xmtaddRef = 0.0;

int piinvertfnub = 0;
int piinvertfvis = 0;

/* Additional-scan (e.g. head scout) activation button */
int piaddscannub = 0;
int piaddscantype = 0;
int cfscoutscanact = 0;

/* TR used by the PSD platform when estimating SAR */
float body_sar_table[PREDICTED_SAR_TABLE_ENTRIES];
float head_sar_table[PREDICTED_SAR_TABLE_ENTRIES];
float extremity_sar_table[PREDICTED_SAR_TABLE_ENTRIES];

/*
 * Top of Head structure is generic S/I location finding.
 * This instance is for location of the top of the head.
 */
POSITION_DETECTION_DONE_TYPE topofhead = EMPTY_POSITION_DETECTION_DONE_TYPE;
float piscan_distance_toh = POSITION_DETECTION_POSITION_FARAWAY;
int pipdhs_active = 0;

/* config CVs for Channel Compression and Optimal Recon from MRconfig.cfg */
int cfOptimalSnrRecon = 0;
int cfVirtualChannelRecon = 0;

/* pi variables for acoustic prediction */
float piavgSPL = -1; /* Average Sound Pressure Level */
float pipeakSPL = -1;/* Peak Sound Pressure Level */


/*
 * Copyright 2017 General Electric Company.  All rights reserved.
 */
 
/*
 * @cv
 * CVs common to a set of PSDs.
 * CVs defined in this section cannot be used for required communication
 * between host processes and PSDs but they can still be accessed by
 * name. Communication IDs are not created for these CVs so order
 * is not important. Names are only important insomuch as there are
 * likely to be extensive references to these CVs across many PSDs.
 *
 * This file is included in epic.h
 *
 */


_cvint  _prevent_scan_under_emul = { &prevent_scan_under_emul,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for preventing scan under emulation", 
    0, ""
};


_cvint  _acqs = { &acqs,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of acquisitions", 
    0, ""
};

_cvint  _avround = { &avround,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "if 1 advis routines round", 
    0, ""
};

_cvint  _baseline = { &baseline,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of baseline pairs.", 
    0, ""
};


_cvint  _nex = { &nex,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of excitations.", 
    0, ""
};

_cvfloat  _trunex = { &trunex,  
    1.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "true number of excitations.", 
    0, ""
};

_cvint  _isOddNexGreaterThanOne = { &isOddNexGreaterThanOne,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for odd nex except 1.0 Nex.", 
    0, ""
};

_cvint  _isNonIntNexGreaterThanOne = { &isNonIntNexGreaterThanOne,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for NON integer nex except less than 1.0 nex such as 1.5, 2.5, ....", 
    0, ""
};






_cvfloat  _fn = { &fn,  
    0.5, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fractional Nex Indicator", 
    0, ""
};

_cvint  _enablfracdec = { &enablfracdec,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Fractional decimation is disabled, 1 = Fractional decimation is enabled.", 
    0, ""
};

_cvint  _npw_flag = { &npw_flag,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "No Phase Wrap support flag. 0 = Not support, 1 = Limited support that only 1.0 and 2.0, 2 = Support flexible NPW", 
    0, ""
};

_cvfloat  _nop = { &nop,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "more than 1.0 if no phase wrap processing used", 
    0, ""
};

_cvint  _acq_type = { &acq_type,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Spin or grad recall", 
    0, ""
};

_cvint  _seq_type = { &seq_type,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "NCAT, CAT, MPMP...", 
    0, ""
};

_cvint  _num_images = { &num_images,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Total number of images acquired", 
    0, ""
};


_cvint  _recon_mag_image = { &recon_mag_image,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Magnitude Image if 1", 
    0, ""
};

_cvint  _recon_pha_image = { &recon_pha_image,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Image if 1 ", 
    0, ""
};

_cvint  _recon_imag_image = { &recon_imag_image,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Real image if 1 ", 
    0, ""
};

_cvint  _recon_qmag_image = { &recon_qmag_image,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Imag image if 1 ", 
    0, ""
};


_cvint  _slquant1 = { &slquant1,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of locs in first pass", 
    0, ""
};

_cvint  _psd_grd_wait = { &psd_grd_wait,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "data acquisition/gradient subsystem delay", 
    0, ""
};

_cvint  _psd_rf_wait = { &psd_rf_wait,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "delay between rf and gradient subsystems", 
    0, ""
};




_cvint  _pos_moment_start = { &pos_moment_start,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Testing CV for moments.", 
    0, ""
};






_cvint  _mps1rf1_inst = { &mps1rf1_inst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Instr. number for mps1 rf1 pulse", 
    0, ""
};

_cvint  _scanrf1_inst = { &scanrf1_inst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Instr. number for scan rf1 pulse", 
    0, ""
};


_cvint  _cfcarddelay = { &cfcarddelay,  
    0, 
    MAXINT, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delay of the cardiac hardware (ms)", 
    0, ""
};


_cvint  _psd_card_hdwr_delay = { &psd_card_hdwr_delay,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cardiac hardware trigger delay.", 
    0, ""
};


_cvfloat  _GAM = { &GAM,  
    0, 
    MAXFLOAT, 
    GAMMA_PROTON,  0, 0, 0, 1, 1, 
    INVIS, 
    "Gamma for current nucleus.", 
    0, ""
 };

_cvint  _off90 = { &off90,  
    0, 
    MAXINT, 
    80,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset to where real 90 occurs", 
    0, ""
};

_cvint  _TR_SLOP = { &TR_SLOP,  
    0, 
    MAXINT, 
    2000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Slack in TR for line gating", 
    0, ""
};

_cvint  _TR_PASS = { &TR_PASS,  
    0, 
    MAXINT, 
    50000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Repetition time for pass entry pt", 
    0, ""
};

_cvint  _TR_PASS3D = { &TR_PASS3D,  
    0, 
    MAXINT, 
    550000,  0, 0, 0, 1, 1, 
    INVIS, 
    "TR for pass entry pt in 3d scans", 
    0, ""
};

_cvint  _csweight = { &csweight,  
    0, 
    180, 
    100,  0, 0, 0, 1, 1, 
    INVIS, 
    "Patient weight threshold for CS pulse width switch", 
    0, ""
};



_cvint  _exnex = { &exnex,  
    0, 
    300, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "used for BAM considerations", 
    0, ""
};

_cvfloat  _truenex = { &truenex,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual nex for odd nex npw scans", 
    0, ""
};

_cvint  _eg_phaseres = { &eg_phaseres,  
    0, 
    MAXINT, 
    128,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase encode res after asym fov calcs", 
    0, ""
};

_cvint  _sp_satcard_loc = { &sp_satcard_loc,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Flag sat placement with cardiac", 
    0, ""
};

_cvint  _min_rfdycc = { &min_rfdycc, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_rfavgpow = { &min_rfavgpow, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_rfrmsb1 = { &min_rfrmsb1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _coll_prefls = { &coll_prefls,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "if 1, then adjust RBA to collect half the number of taps", 
    0, ""
};


_cvint  _maxGradRes = { &maxGradRes,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximize ramp resolution (0=no,1=yes)?", 
    0, ""
};

_cvfloat  _dfg = { &dfg,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Digital Filter Gain", 
    0, ""
};

_cvfloat  _pg_beta = { &pg_beta,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ramp transition time factor for pulsegen", 
    0, ""
};

_cvint  _split_dab = { &split_dab,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Split dab packets: 0=no, 1=yes", 
    0, ""
};

_cvfloat  _freq_scale = { &freq_scale,  
    0.0, 
    10.0, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "FOV scale factor in frequency y direction", 
    0, ""
};

_cvint  _numrecv = { &numrecv,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of receivers", 
    0, ""
};


_cvint  _pe_on = { &pe_on,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase encoding on/off (0=off, 1=on).", 
    0, ""
};

_cvfloat  _psd_targetscale = { &psd_targetscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _psd_zero = { &psd_zero,  
    0.0, 
    0.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Dummy address of start/end amplitude for bridged pulse.", 
    0, ""
};


_cvint  _lx_pwmtime = { &lx_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ly_pwmtime = { &ly_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _lz_pwmtime = { &lz_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _px_pwmtime = { &px_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _py_pwmtime = { &py_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pz_pwmtime = { &pz_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_seqgrad = { &min_seqgrad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_seqrfamp = { &min_seqrfamp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _xa2s = { &xa2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ya2s = { &ya2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _za2s = { &za2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _minseqcoil_t = { &minseqcoil_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilx_t = { &minseqcoilx_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoily_t = { &minseqcoily_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilz_t = { &minseqcoilz_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilburst_t = { &minseqcoilburst_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilvrms_t = { &minseqcoilvrms_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgram_t = { &minseqgram_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqchoke_t = { &minseqchoke_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcable_t = { &minseqcable_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcable_maxpow_t = { &minseqcable_maxpow_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcableburst_t = { &minseqcableburst_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqbusbar_t = { &minseqbusbar_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqps_t = { &minseqps_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpdu_t = { &minseqpdu_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpdubreaker_t = { &minseqpdubreaker_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilcool_t = { &minseqcoilcool_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqsyscool_t = { &minseqsyscool_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqccucool_t = { &minseqccucool_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqxfmr_t = { &minseqxfmr_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqresist_t = { &minseqresist_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _minseqgrddrv_t = { &minseqgrddrv_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrv_case_t = { &minseqgrddrv_case_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvx_t = { &minseqgrddrvx_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvy_t = { &minseqgrddrvy_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvz_t = { &minseqgrddrvz_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powerx = { &powerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powery = { &powery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powerz = { &powerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowerx = { &pospowerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowery = { &pospowery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowerz = { &pospowerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowerx = { &negpowerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowery = { &negpowery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowerz = { &negpowerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_lx = { &amptrans_lx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_ly = { &amptrans_ly, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_lz = { &amptrans_lz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_px = { &amptrans_px, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_py = { &amptrans_py, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_pz = { &amptrans_pz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_lx = { &abspower_lx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_ly = { &abspower_ly, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_lz = { &abspower_lz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_px = { &abspower_px, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_py = { &abspower_py, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_pz = { &abspower_pz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _minseqpwm_x = { &minseqpwm_x, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpwm_y = { &minseqpwm_y, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpwm_z = { &minseqpwm_z, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgpm_t = { &minseqgpm_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgpm_maxpow_t = { &minseqgpm_maxpow_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _vol_ratio_est_req = { &vol_ratio_est_req, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_waveform_rotmat_check = { &skip_waveform_rotmat_check, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _set_realtime_rotmat = { &set_realtime_rotmat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_rotmat_search = { &skip_rotmat_search, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _enforce_minseqseg = { &enforce_minseqseg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _enforce_dbdtopt = { &enforce_dbdtopt, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_minseqseg = { &skip_minseqseg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_initialize_dbdtopt = { &skip_initialize_dbdtopt, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _time_pgen = { &time_pgen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cont_debug = { &cont_debug,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug mode: 0=off, 1=plane, 2=sat, 3=slthk", 
    0, ""
};


_cvint  _maxpc_cor = { &maxpc_cor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Maxwell correction enabled.", 
    0, ""
};

_cvint  _maxpc_debug = { &maxpc_debug,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Print out Maxwell coefficients.", 
    0, ""
};

_cvint  _maxpc_points = { &maxpc_points,  
    100, 
    10000, 
    500,  0, 0, 0, 1, 1, 
    VIS,  
    "Number of points to use for Maxwell correction", 
    0, ""
};


_cvint  _pass_thru_mode = { &pass_thru_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn on or off pass thru filter mode for MGD", 
    0, ""
};


_cvint  _tmin = { &tmin,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Min time determined by waveforms", 
    0, ""
};

_cvint  _tmin_total = { &tmin_total,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Min time based on all constrants", 
    0, ""
};

_cvint  _psd_tol_value = { &psd_tol_value,  
     0, 
      MAXINT, 
     0,  0, 0, 0, 1, 1, 
     INVIS, 
     "Tolerance value from PSD", 
     0, ""
};


_cvint  _bd_index = { &bd_index,  
    PSD_XCVR1, 
    PSD_XCVR2, 
    PSD_XCVR2,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter board index", 
    0, ""
};


_cvint  _use_ermes = { &use_ermes,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Use error message database", 
    0, ""
};


_cvfloat  _fieldstrength = { &fieldstrength, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _asymmatrix = { &asymmatrix,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "if 1,Asymmetric Matrix is on", 
    0, ""
};

_cvint  _psddebugcode = { &psddebugcode,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "for support function debugging", 
    0, ""
};

_cvint  _psddebugcode2 = { &psddebugcode2,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "for support function debugging", 
    0, ""
};

_cvint  _serviceMode = { &serviceMode,   
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Service Mode flag for PSD internal use.",  
    0, ""
};


_cvint  _upmxdisable = { &upmxdisable,  
    0,  
    16,  
    16,  0, 0, 0, 1, 1,  
    INVIS, 
    "disable:1=body, 2=T/R, 4=spectro, 8=CW coil origin cross terms",  
    0, ""
};






_cvint  _tsamp = { &tsamp,  
    1, 
    256, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Sampling rate for waveform digitization (usec).", 
    0, ""
};

_cvint  _seg_debug = { &seg_debug,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Waveform segmentation debug level (0-10).", 
    0, ""
};

_cvint  _CompositeRMS_method = { &CompositeRMS_method,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Algorithm for coil power calculation (0=Traditional, 1=New).", 
    0, ""
};

_cvint  _gradDriverMethod = { &gradDriverMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Model for gradient driver heating calculation (0=Traditional, 1=New).", 
    0, ""
};



_cvint  _gradDCsafeMethod = { &gradDCsafeMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient coil heating method (0=DC model, 1=Safe DC Model).", 
    0, ""
};


_cvint  _stopwatchFlag = { &stopwatchFlag,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Start stopwatch for precise timing measurement.", 
    0, ""
};

_cvint  _seqEntryIndex = { &seqEntryIndex,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sequence Entry Index used for Heating Limits calculations.", 
    0, ""
};


_cvint  _dbdt_debug = { &dbdt_debug,  
    0, 
    32767,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug bitmask for dbdtOpt feature", 
    0, ""
};

_cvint  _reilly_mode = { &reilly_mode,   
    0,  
    1,  
    1,  0, 0, 0, 1, 1,  
    VIS,  
    "Reilly Fraction estimation model - 0: Rectangular 1: convolution integral", 
    0, ""
};



_cvint  _dbdt_disable = { &dbdt_disable,   
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Switch to disable SlewRate optimization based on actual dB/dt",  
    0, ""
};




_cvint  _use_dbdt_opt = { &use_dbdt_opt,   
    0,  
    1,  
    1,  0, 0, 0, 1, 1,  
    INVIS,  
    "PSD Internal Flag for dB/dt optimization ",  
    0, ""
};

_cvfloat  _srderate = { &srderate,   
    1.0,  
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Final Slew-rate derating factor ", 
    0, ""
};

_cvint  _config_update_mode = { &config_update_mode,  
    -1, 
    11, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Mode for deciding configuration updates: -1=skip, 0=default (ACGD+), 1=CRM TENSOR", 
    0, ""
};

_cvint  _phys_record_flag = { &phys_record_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Flag for recording Resp/Cardiac WF (0=off, 1=on)", 
    0, ""
};

_cvint  _phys_rec_resolution = { &phys_rec_resolution,  
    1,  
    100,  
    25,  0, 0, 0, 1, 1,  
    VIS,  
    "Resolution for Resp/Cardiac WF (ms, in steps of 1ms)", 
    0, ""
};













_cvint  _phys_record_channelsel = { &phys_record_channelsel,   
    0,  
    255,  
    15,  0, 0, 0, 1, 1,  
    VIS,  
    "Physiological Channel Selection(LSB-MSB): Trig and Data for Resp, PG, ECG3, ECG2", 
    0, ""
};


_cvint  _rotateflag = { &rotateflag,  
    0, 
    2,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for allowing arbitrary scan plane rotation, 1:on, 2:special (fse only)", 
    0, ""
};


_cvint  _rhpcspacial_dynamic = { &rhpcspacial_dynamic,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dyn PC space specificity: 0=use all, >=1 for one slice", 
    0, ""
};

_cvint  _rhpc_rationalscale = { &rhpc_rationalscale,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Scale Rational Scale Factor 0 = Off, 1 = ON", 
    0, ""
};

_cvint  _rhpcmag = { &rhpcmag,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI Even/Odd Magnitude Correction", 
    0, ""
};

_cvint  _mild_note_support = { &mild_note_support,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Mild Note supported flag on option UIF", 
    0, ""
};

_cvint  _save_grad_spec_flag = { &save_grad_spec_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Gradient config CVs saved flag for Gradient Spec Control", 
    0, ""
};

_cvint  _grad_spec_change_flag = { &grad_spec_change_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Gradient config CVs modified flag for Gradient Spec Control", 
    0, ""
};

_cvint  _value_system_flag = { &value_system_flag,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value 1.5T system flag", 
    0, ""
};

_cvint  _rectfov_npw_support = { &rectfov_npw_support,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Rect FOV and NPW support flag", 
    0, ""
};

_cvint  _pigeosrot = { &pigeosrot,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "psd sets up own rot matrices", 
    0, ""
};


_cvint  _minseqrf_cal = { &minseqrf_cal,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0: Leagy Cal 1: New f(t) Cal", 
    0, ""
};

_cvint  _min_rfampcpblty = { &min_rfampcpblty,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amplifier Capability factor ", 
    0, ""
};

_cvint  _b1derate_flag = { &b1derate_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0: Use default B1 derating  1: Use System B1 limit only (+10 safety margin)", 
    0, ""
};

_cvint  _oblmethod_dbdt_flag = { &oblmethod_dbdt_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0 : Do not scale the axes 1: Scale the axes", 
    0, "Non-pgen dBdt optimization by setting obl_method to zero"
};


_cvint  _minseqcoil_esp = { &minseqcoil_esp,  
    -MAXINT, 
    MAXINT, 
    1000,  0, 0, 0, 1, 1, 
    VIS, 
    "", 
    0, ""
};

_cvint  _aspir_flag = { &aspir_flag,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating ASPIR Fat Sat selection.",  
     0, ""
};

_cvint  _rhrawsizeview = { &rhrawsizeview,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "rhrawsize is 0 bytes/channel", 
    0, ""
};

_cvint  _chksum_scaninfo_view = { &chksum_scaninfo_view,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "chksum_scaninfo is 0", 
    0, ""
};

_cvint  _chksum_rhdacqctrl_view = { &chksum_rhdacqctrl_view,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "chksum_rhdacqctrl is 0", 
    0, ""
};

_cvfloat  _fnecho_lim = { &fnecho_lim,  
    0.5, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of read window.", 
    0, ""
};

_cvint  _psdcrucial_debug = { &psdcrucial_debug,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug flag for psdcrucial library functions", 
    0, ""
};

_cvfloat  _b1max_scale = { &b1max_scale,  
    0.0, 
    10.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF b1max scaling factor for adaptive B1max", 
    0, ""
};

_cvint  _disable_exciter_unblank = { &disable_exciter_unblank,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Disable adding exciter unblank in RF support routines", 
    0, ""
};

_cvint  _TGlimit = { &TGlimit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_TGlimit = { &sat_TGlimit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _autoparams_debug = { &autoparams_debug,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug bit mask flag for auto params, 1:In-range Auto TR, 2:Auto RBW, 4:APx", 
    0, ""
};

_cvint  _num_autotr_cveval_iter = { &num_autotr_cveval_iter,  
    1, 
    30, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of iterations of cveval in in-range auto TR processing", 
    0, ""
};

_cvint  _apx_cveval_counter = { &apx_cveval_counter,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "cveval counter for APx", 
    0, ""
};

_cvint  _enforce_inrangetr = { &enforce_inrangetr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "flag to enforce In-range Auto TR calculation", 
    0, ""
};

_cvint  _passtime = { &passtime,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "total time for pass packets", 
    0, ""
};

_cvint  _retropc_extra = { &retropc_extra,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "retroPC - number of extra non-PE reference views (refsets*etl)", 
0, "" };

_cvint  _esp = { &esp,  
    0, 
    1000000, 
    10000,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo Spacing", 
    0, ""
};

_cvint  _echoint = { &echoint,  
    1, 
    NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of interleaved echos in train", 
    0, ""
};

_cvint  _arc_flag = { &arc_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ARC flag", 
    0, ""
};

_cvint  _arc_ph_calwidth = { &arc_ph_calwidth,  
    0, 
    MAXINT, 
    24,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of fully sampled phase encoding lines for ARC", 
    0, ""
};

_cvint  _arc_sl_calwidth = { &arc_sl_calwidth,  
    0, 
    MAXINT, 
    24,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of fully sampled slice encoding lines for ARC", 
    0, ""
};

_cvint  _vrgfsamp = { &vrgfsamp,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0=std sampling,1=VRGF sampling.", 
    0, ""
};

_cvfloat  _srate_x = { &srate_x,  
    0.5, 
    120.0, 
    15.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slewrate for X axis", 
    0, ""
};

_cvfloat  _glimit_x = { &glimit_x,  
    0.5, 
    50.0, 
    3.3,  0, 0, 0, 1, 1, 
    INVIS, 
    "g-max for X axis", 
    0, ""
};

_cvfloat  _srate_y = { &srate_y,  
    0.5, 
    120.0, 
    15.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slewrate for Y axis", 
    0, ""
};

_cvfloat  _glimit_y = { &glimit_y,  
    0.5, 
    50.0, 
    3.3,  0, 0, 0, 1, 1, 
    INVIS, 
    "g-max for Y axis", 
    0, ""
};

_cvfloat  _srate_z = { &srate_z,  
    0.5, 
    120.0, 
    15.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slewrate for Z axis", 
    0, ""
};

_cvfloat  _glimit_z = { &glimit_z,  
    0.5, 
    50.0, 
    3.3,  0, 0, 0, 1, 1, 
    INVIS, 
    "g-max for Z axis", 
    0, ""
};

_cvfloat  _act_srate_x = { &act_srate_x,  
    0.5, 
    120.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual SR on X axis", 
    0, ""
};

_cvfloat  _act_srate_y = { &act_srate_y,  
    0.5, 
    120.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual SR on Y axis", 
    0, ""
};

_cvfloat  _act_srate_z = { &act_srate_z,  
    0.5, 
    120.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual SR on Z axis", 
    0, ""
};

_cvint  _mkgspec_x_sr_flag = { &mkgspec_x_sr_flag,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask flag for special handling of X SR, bit0: special handling, bit1: Off dB/dt limit", 
    0, ""
};
_cvint  _mkgspec_x_gmax_flag = { &mkgspec_x_gmax_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for special handling of X G-max 0:off 1:on", 
    0, ""
};

_cvint  _mkgspec_y_sr_flag = { &mkgspec_y_sr_flag,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask flag for special handling of Y SR, bit0: special handling, bit1: Off dB/dt limit", 
    0, ""
};

_cvint  _mkgspec_y_gmax_flag = { &mkgspec_y_gmax_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for special handling of Y G-max 0:off 1:on", 
    0, ""
};

_cvint  _mkgspec_z_sr_flag = { &mkgspec_z_sr_flag,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask flag for special handling of Z SR, bit0: special handling, bit1: Off dB/dt limit", 
    0, ""
};

_cvint  _mkgspec_z_gmax_flag = { &mkgspec_z_gmax_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for special handling of Z G-max 0:off 1:on", 
    0, ""
};

_cvint  _mkgspec_flag = { &mkgspec_flag,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for marketing gradient spec 0:off 1:Gmax 2:SR 3:Gmax and SR 4:Gmax and SR on 3 axes", 
    0, ""
};

_cvint  _mkgspec_epi2_flag = { &mkgspec_epi2_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for marketing gradient spec DWEPI PSD, 0:off 1:on", 
    0, ""
};

_cvint  _pfkz_total = { &pfkz_total,  
    0, 
    MAXINT, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of slice encodes after acceleration and pfkz", 
    0, ""
};


_cvfloat  _fov_freq_scale = { &fov_freq_scale,  
    0.0,     
    2.0, 
    1.0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Scaling along frequency directon", 
    0, ""    
};

_cvfloat  _fov_phase_scale = { &fov_phase_scale,  
    0.0,     
    2.0, 
    1.0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Scaling along phase directon", 
    0, ""    
};

_cvfloat  _slthick_scale = { &slthick_scale,  
    0.0,     
    2.0, 
    1.0,  0, 0, 0, 1, 1,     
    INVIS, 
    "Scaling of slice thickness", 
    0, ""
};

_cvint  _silent_mode = { &silent_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent mode for PSD sequences", 
    0, ""
};

_cvfloat  _silent_slew_rate = { &silent_slew_rate,  
    1.0,  
    200.0,  
    3.0,  0, 0, 0, 1, 1,  
    VIS,  
    "Slew rate for silent PSD gradients", 
    0, ""
};

_cvint  _rhpropellerCtrl = { &rhpropellerCtrl,  
    0,  
    1024,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "propeller reconstruction control", 
    0, ""
};

_cvfloat  _prop_act_npwfactor = { &prop_act_npwfactor,  
    1.0,  
    2.0,  
    1.0,  0, 0, 0, 1, 1,  
    INVIS, 
    "Actual propeller npw factor", 
    0, ""
};

_cvfloat  _prop_act_oversamplingfactor = { &prop_act_oversamplingfactor,  
    1.0, 
    MAX_PROP_SYMMETRIC_OSF, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual over sampling factor", 
    0, ""
};

_cvint  _navtrig_wait_before_imaging = { &navtrig_wait_before_imaging,  
    0, 
    1000000, 
    200000,  0, 0, 0, 1, 1, 
    VIS, 
    "wait time before imaging in navigator triggering", 
    0, ""
};

_cvint  _xtg_volRecCoil = { &xtg_volRecCoil,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "XTG coil 0=Rx'ed Coil; 1=vol. rec. coil", 
    0, ""
};

_cvint  _minseqseg_max_full = { &minseqseg_max_full,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for minseqseg to fully process the waveform with the MAXIMUM_POWER mode: 0 - OFF(legacy logic), 1 - ON", 
    0, ""
};

_cvint  _sphericalGradient = { &sphericalGradient,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to restrict composite gradient amplitude to a sphere: 1- restricted, 0 - not restricted", 
    0, ""
};

_cvint  _minseqcoil_option = { &minseqcoil_option,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Which set of results to set minseqcoil timing: 0 - AVERAGE_POWER mode, 1 - MAXIMUM_POWER mode", 
    0, ""
};

_cvint  _minseqgrad_option = { &minseqgrad_option,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Which set of results to set minseqgrad timing: 0 - AVERAGE_POWER mode, 1 - MAXIMUM_POWER mode", 
    0, ""
};

_cvint  _rtp_bodyCoilCombine = { &rtp_bodyCoilCombine,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Body coil RTP data channel combination: 1=Yes, 0=No ", 
    0, ""
};

_cvint  _ntxchannels = { &ntxchannels,  
    1, 
    32, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of transmit channels", 
    0, ""
};

_cvint  _napptxchannels = { &napptxchannels,  
    1, 
    32, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of application transmit channels", 
    0, ""
};

_cvint  _seqcfgdebug = { &seqcfgdebug,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Debug flag fo sequencer config", 
    0, ""
};

_cvint  _enable_acoustic_model = { &enable_acoustic_model,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable/disable acoustic model", 
    0, ""
};
_cvint  _acoustic_seq_repeat_time = { &acoustic_seq_repeat_time,  
    4, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Seq Repeat Rate for Acoustic Calculation in us", 
    0, ""
};
_cvfloat  _avgSPL_non_weighted = { &avgSPL_non_weighted,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Average non weighted sound pressure level (SPL) in dB", 
    0, ""
};
_cvint  _noisecal_in_scan_flag = { &noisecal_in_scan_flag,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to enable/disable noisecal in scan", 
    0, ""
};
























SCAN_INFO orth_info[1];
float gx_log,gy_log,gz_log,gx_phys,gy_phys,gz_phys;

/************************************************************************/

_cvint  _cs_sat = { &cs_sat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cs_satstart = { &cs_satstart, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cs_sattime = { &cs_sattime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfcssatcfh = { &a_rfcssatcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_flip_rfcssatcfh = { &flip_rfcssatcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfcssatcfh = { &pw_rfcssatcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_rfcssatcfh = { &ia_rfcssatcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ChemSatPulse = { &ChemSatPulse, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gxkcs = { &area_gxkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykcs = { &area_gykcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gyakcs = { &area_gyakcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkcs = { &area_gzkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _csk_derate_factor = { &csk_derate_factor,  1, 10, 1,  0, 0, 0, 1, 1, VIS, "ChemSat gradient derating factor", 0, "" };


_cvint  _pw_rfcssat = { &pw_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_omega_hs_rfcssat = { &pw_omega_hs_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfcssat = { &off_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfcssat = { &ia_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_omega_hs_rfcssat = { &ia_omega_hs_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfcssat = { &cyc_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfcssat = { &a_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_a_omega_hs_rfcssat = { &a_omega_hs_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfcssat = { &alpha_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfcssat = { &gscale_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfcssat = { &flip_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrfcssat = { &a_gzrfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfcssat = { &ia_gzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat = { &pw_gzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrfcssat = { &res_gzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzrfcssat_wrf = { &a_gzrfcssat_wrf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _a_thetarfcssat = { &a_thetarfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarfcssat = { &ia_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarfcssat = { &pw_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarfcssat = { &res_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarfcssat = { &off_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _bw_rfcssat = { &bw_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _selectiveChemsat = { &selectiveChemsat,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "selective ChemSat RF flag", 0, "" };
_cvfloat  _selectiveChemsatBWscaler = { &selectiveChemsatBWscaler,  0.0,  1.0,  1.0,  0, 0, 0, 1, 1,  INVIS,  "selective ChemSat gradient scale factor", 0, "" };
_cvint  _offset_rfchemsat = { &offset_rfchemsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _num_gzrfcssat_lobe = { &num_gzrfcssat_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_lobe = { &pw_gzrfcssat_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_constant = { &pw_gzrfcssat_constant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_rampz = { &pw_gzrfcssat_rampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _num_gzrfcssat_lobe_norf = { &num_gzrfcssat_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_lobe_norf = { &pw_gzrfcssat_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_constant_norf = { &pw_gzrfcssat_constant_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_rampz_norf = { &pw_gzrfcssat_rampz_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ext_pw_rfcssat = { &ext_pw_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_res_rfcssat = { &ext_res_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_isodelay = { &ext_isodelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_water_freq_flag = { &ext_water_freq_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe = { &ext_pw_grad_sub_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe_ramp = { &ext_pw_grad_sub_lobe_ramp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_num_grad_sub_lobe = { &ext_num_grad_sub_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe_norf = { &ext_pw_grad_sub_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe_ramp_norf = { &ext_pw_grad_sub_lobe_ramp_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_num_grad_sub_lobe_norf = { &ext_num_grad_sub_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_abswidth = { &ext_abswidth, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_effwidth = { &ext_effwidth, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_area = { &ext_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_dtycyc = { &ext_dtycyc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_maxpw = { &ext_maxpw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_max_b1 = { &ext_max_b1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_max_int_b1_sq = { &ext_max_int_b1_sq, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_max_rms_b1 = { &ext_max_rms_b1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_nom_fa = { &ext_nom_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_nom_pw = { &ext_nom_pw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_nom_bw = { &ext_nom_bw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_gzrfcssat_scale_fac = { &ext_gzrfcssat_scale_fac, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_fatsat_min_slthick = { &ext_fatsat_min_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


#define DUO_NUM_FLIP 90        /* number of flip angles for Duo Chem Sat search */
#define DUO_LIPID_COMP 9       /* number of lipid components for Duo Chem Sat calculation */
#define DUO_SPECPROF_RANGE 180 /* Spectral profile range */
#define DUO_START_FIRST_FA 1   /* flip angle at which Duo Chem Sat will start to search for first ChemSat pulse */
#define DUO_END_FIRST_FA 90    /* flip angle at which Duo Chem Sat will finish to search for first ChemSat pulse */
#define DUO_START_SECOND_FA 1  /* flip angle at which Duo Chem Sat will start to search for second ChemSat pulse */
#define DUO_END_SECOND_FA 180  /* flip angle at which Duo Chem Sat will finish to search for second ChemSat pulse */
_cvint  _duo_cs_flag = { &duo_cs_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _w_debug_flag = { &w_debug_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_cspulses = { &n_cspulses, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flip_final_1 = { &flip_final_1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flip_final_2 = { &flip_final_2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _killer_scale = { &killer_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _delay_time_bkp = { &delay_time_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tetime_bkp = { &tetime_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rc_time_bkp = { &rc_time_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _slquant_bkp = { &slquant_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_time_bkp = { &tr_time_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sattime_bkp = { &sattime_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flip_final_1_bkp = { &flip_final_1_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flip_final_2_bkp = { &flip_final_2_bkp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _fatsat_factor_bkp = { &fatsat_factor_bkp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _phantom_test_flag = { &phantom_test_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0= set default T1, 1= set manual T1(phantom_fat_T1)", 0, "" };
_cvfloat  _phantom_fat_T1 = { &phantom_fat_T1,  0.1, 10000.0, 300.0,  0, 0, 0, 1, 1, VIS, "T1 value for fatsat calculation(ms)", 0, "" };



#define DB_OFF 0		/* Multi-Band is off */
#define DB_DUO_CS 1		/* Multi_band is off, duo CS is on */
#define DB_FE 2                 /* bands in frequency encoding direction */
#define DB_PE 3                 /* bands in phase encoding direction */
#define DB_SS 4                 /* bands in slice selection direction */
_cvint  _DB_flag = { &DB_flag,  0,  4,  0,  0, 0, 0, 1, 1,  INVIS,  "Flag to control Multi-Band Fat Sat", 0, "" };
_cvfloat  _DB_shift_ratio = { &DB_shift_ratio,   -1.0,  1.0,  0,  0, 0, 0, 1, 1,  VIS,  "Shift Ratio for Multi-Band",  0, "" };
_cvfloat  _DB_ChemShift = { &DB_ChemShift,  -3,  3,  0.75,  0, 0, 0, 1, 1,  VIS,  "Chemical Shift Ratio for Multi-Band",  0, "" };
_cvint  _DBgrad_flag = { &DBgrad_flag,   PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Turn on/off gradients for Multi-Band FS",  0, "" };


_cvfloat  _DB_Buffer_X = { &DB_Buffer_X, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _DB_Buffer_Y = { &DB_Buffer_Y, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _DB_Chemical_Shift = { &DB_Chemical_Shift, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _dbcenterlocx1 = { &dbcenterlocx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbcenterlocx2 = { &dbcenterlocx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbcenterlocy1 = { &dbcenterlocy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbcenterlocy2 = { &dbcenterlocy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbcenterlocz1 = { &dbcenterlocz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbcenterlocz2 = { &dbcenterlocz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _dbsatthickx = { &dbsatthickx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbsatthicky = { &dbsatthicky, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbsatthickz = { &dbsatthickz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _dbbandlocx1 = { &dbbandlocx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbbandlocx2 = { &dbbandlocx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbbandlocy1 = { &dbbandlocy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbbandlocy2 = { &dbbandlocy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbbandlocz1 = { &dbbandlocz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_dbbandlocz2 = { &dbbandlocz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _off_rfcssat1 = { &off_rfcssat1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_off_rfcssat2 = { &off_rfcssat2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _bw_rfcssat_nom = { &bw_rfcssat_nom, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _bw_rfcssat_ramp = { &bw_rfcssat_ramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _bw_ramp = { &bw_ramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _fatsat_factor = { &fatsat_factor,  0.1, 1.0, 1.0,  0, 0, 0, 1, 1, INVIS, "Fatsat efficiency factor", 0, "" };


_cvint  _csat_rfupa = { &csat_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _csat_sys_type = { &csat_sys_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };




_cvint  _aspir_delay = { &aspir_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _aspir_cfoffset = { &aspir_cfoffset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _aspir_minti = { &aspir_minti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_T1 = { &aspir_T1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI = { &aspir_TI, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI_null = { &aspir_TI_null, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI_extra = { &aspir_TI_extra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI_min = { &aspir_TI_min, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_eff = { &aspir_eff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fatFlag = { &fatFlag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cs_isodelay = { &cs_isodelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cs_delay = { &cs_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _recovery_time = { &recovery_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_sat = { &flip_sat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_satcfh = { &flip_satcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _fStrength = { &fStrength, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _use_spsp_fatsat = { &use_spsp_fatsat,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Use spatial-spectral fatsat pulse: 1=on, 0=off", 0, "" };
_cvint  _debug_spsp_fatsat = { &debug_spsp_fatsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _spsp_fatsat_slthick = { &spsp_fatsat_slthick,  0.0, 1000.0, 30.0,  0, 0, 0, 1, 1, VIS, "SPSP fatsat pulse slice thickness", 0, "" };
_cvint  _spsp_fatsat_pulse_extra_time = { &spsp_fatsat_pulse_extra_time,  0, 30000, 0,  0, 0, 0, 1, 1, VIS,  "Extra time after SPSP fat sat pulse", 0, "" };
_cvint  _spsp_fatsat_spatial_mode = { &spsp_fatsat_spatial_mode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "spsp fatsat location: 0-slice dependent, 1-fixed to center slice", 0, "" };
_cvfloat  _spsp_fatsat_spatial_offset = { &spsp_fatsat_spatial_offset,  -2000.0,  2000.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "spatial location offset(mm)", 0, "" };
_cvint  _spsp_fatsat_pulse_override = { &spsp_fatsat_pulse_override,  0, 4, 0,  0, 0, 0, 1, 1, VIS, "spsp fatsat pulse selection: 0-auto selection, 1-high b1, 2-medium b1, 3-low b1, 4-ultra-low b1.", 0, "" };


_cvfloat  _spsp_fatsat_omega_scale = { &spsp_fatsat_omega_scale,  1.0, 4096, 256,  0, 0, 0, 1, 1, VIS,  "Instruction amplitude scaling", 0, "" };

_cvfloat  _max_aspir_fa = { &max_aspir_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fa_scale_debug = { &fa_scale_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cs_tr = { &cs_tr,  0, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "Time of repetition for chem sat calculation", 0, "" };
_cvint  _cs_slquant = { &cs_slquant,  0, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "number of locs for chem sat calculation", 0, "" };

_cvint  _cs_dda_per_trig_flag = { &cs_dda_per_trig_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "dda flag of chemsat pulse for triggering scan", 0, "" };
_cvint  _psd_chemsat_seq_flag = { &psd_chemsat_seq_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "flag for creating sequence of chemsat pulse", 0, "" };
_cvint  _cs_dda_flip = { &cs_dda_flip,  0,  180,  90,  0, 0, 0, 1, 1,  VIS,  "flip angle of dda chemsat pulse", 0, "" };


_cvfloat  _ccs_dead = { &ccs_dead,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "CatSat dead time for relaxers.", 0, "" };
_cvint  _ccs_relaxers = { &ccs_relaxers, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ccs_relaxtime = { &ccs_relaxtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ccs_relaxseqtime = { &ccs_relaxseqtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _SatRelaxers = { &SatRelaxers, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _gsat_scale = { &gsat_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfs = { &cyc_rfs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfs = { &pw_rfs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_satrampx = { &pw_satrampx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_satrampy = { &pw_satrampy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_satrampz = { &pw_satrampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sat_rot_ex_num = { &sat_rot_ex_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_rot_df_num = { &sat_rot_df_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_rot_index = { &sat_rot_index, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_isisat = { &pw_isisat,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "isi update delay", 0, "" };
_cvint  _pw_rotupdate = { &pw_rotupdate,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "rot. matrix update", 0, "" };
_cvint  _isi_satdelay = { &isi_satdelay,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "isi backup delay time", 0, "" };
_cvint  _rot_delay = { &rot_delay,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "delay from beginning of next ramp", 0, "" };

_cvint  _isi_extra = { &isi_extra,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "Extra time to move gradient killer", 0, "" };

_cvint  _sat_debug = { &sat_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _spsat_host_debug = { &spsat_host_debug,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "debug SpSat host calculation",  0, "" };
_cvint  _sp_first_scan = { &sp_first_scan, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sat_obl_debug = { &sat_obl_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_newgeo = { &sat_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _spsat_rfupa = { &spsat_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _spsat_sys_type = { &spsat_sys_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };


_cvint  _xkiller_set = { &xkiller_set, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _maxkiller_time = { &maxkiller_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _satgapxpos = { &satgapxpos,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapxneg = { &satgapxneg,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapypos = { &satgapypos,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapyneg = { &satgapyneg,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapzpos = { &satgapzpos,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapzneg = { &satgapzneg,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };


_cvfloat  _satspacex1 = { &satspacex1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacex2 = { &satspacex2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacey1 = { &satspacey1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacey2 = { &satspacey2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacez1 = { &satspacez1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacez2 = { &satspacez2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace1 = { &satspace1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace2 = { &satspace2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace3 = { &satspace3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace4 = { &satspace4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace5 = { &satspace5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace6 = { &satspace6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _satthickx1 = { &satthickx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickx2 = { &satthickx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickdfx = { &satthickdfx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthicky1 = { &satthicky1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthicky2 = { &satthicky2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickdfy = { &satthickdfy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickz1 = { &satthickz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickz2 = { &satthickz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickdfz = { &satthickdfz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick1 = { &exsatthick1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick2 = { &exsatthick2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick3 = { &exsatthick3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick4 = { &exsatthick4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick5 = { &exsatthick5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick6 = { &exsatthick6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };





_cvfloat  _satxlocpos = { &satxlocpos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satxlocneg = { &satxlocneg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satylocpos = { &satylocpos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satylocneg = { &satylocneg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzlocpos = { &satzlocpos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzlocneg = { &satzlocneg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzloca = { &satzloca, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzlocb = { &satzlocb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce1 = { &satloce1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce2 = { &satloce2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce3 = { &satloce3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce4 = { &satloce4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce5 = { &satloce5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce6 = { &satloce6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_rfsx1 = { &area_rfsx1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf x sat pulse", 0, "" };
_cvfloat  _area_rfsx2 = { &area_rfsx2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf x sat pulse", 0, "" };
_cvfloat  _area_rfsy1 = { &area_rfsy1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf y sat pulse", 0, "" };
_cvfloat  _area_rfsy2 = { &area_rfsy2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf y sat pulse", 0, "" };
_cvfloat  _area_rfsz1 = { &area_rfsz1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf z sat pulse", 0, "" };
_cvfloat  _area_rfsz2 = { &area_rfsz2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf z sat pulse", 0, "" };
_cvfloat  _area_rfse1 = { &area_rfse1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse2 = { &area_rfse2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse3 = { &area_rfse3,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse4 = { &area_rfse4,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse5 = { &area_rfse5,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse6 = { &area_rfse6,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };

_cvfloat  _area_gyksx1 = { &area_gyksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksx2 = { &area_gyksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksy1 = { &area_gyksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksy2 = { &area_gyksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksz1 = { &area_gyksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gyksz2 = { &area_gyksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse1 = { &area_gykse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse2 = { &area_gykse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse3 = { &area_gykse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse4 = { &area_gykse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gykse5 = { &area_gykse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse6 = { &area_gykse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_gxksx1 = { &area_gxksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksx2 = { &area_gxksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksy1 = { &area_gxksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksy2 = { &area_gxksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksz1 = { &area_gxksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gxksz2 = { &area_gxksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse1 = { &area_gxkse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse2 = { &area_gxkse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse3 = { &area_gxkse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse4 = { &area_gxkse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gxkse5 = { &area_gxkse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse6 = { &area_gxkse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sp_sattime = { &sp_sattime,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Total time needed for spatial sat", 0, "" };
_cvint  _sp_satstart = { &sp_satstart,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Start time for spatial presat", 0, "" };

_cvint  _vrgsat = { &vrgsat,  0, 3, 2,  0, 0, 0, 1, 1, VIS,  "SAT pulse type", 0, "" };
_cvint  _numsatramp = { &numsatramp,  0,  7,  0,  0, 0, 0, 1, 1,  INVIS,  "Number of ramps in sat seq",  0, "" };
_cvint  _had_sat = { &had_sat,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Hadamard sat flag", 0, "" };

_cvfloat  _rtia3d_sat_flip = { &rtia3d_sat_flip,  1.0, 90.0, 60.0,  0, 0, 0, 1, 1, VIS, 
                          "Flip angle for SAT pulse in FTMRA mode.", 0, "" };

_cvfloat  _rtia3d_sat_pos = { &rtia3d_sat_pos,  1.0, 400.0, 100.0,  0, 0, 0, 1, 1, VIS, 
                                   "SAT pulse +/- position in FTMRA mode.", 0, "" };

_cvint  _sat_pulse_type = { &sat_pulse_type,  REAL_RF,  COMPLEX_RF,  REAL_RF,  0, 0, 0, 1, 1,  INVIS,  "SAT pulse type", 0, "" };

_cvint  _satgap_opt_flag = { &satgap_opt_flag,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "satgap optimization flag, On: for SLR, Off: for other pulses", 0, "" };



_cvint  _autolock = { &autolock,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 will write to raw Pfiles, 2 will write all recs to raw Pfiles", 
0, "" };

_cvint  _blank = { &blank,  
    0, 
    20, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of pixels to remove from cson edge.", 
0, "" };

_cvint  _nograd = { &nograd,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if no gradwarp desired.", 
0, "" };

_cvint  _nofermi = { &nofermi,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if no fermi filter desired.", 
0, "" };

_cvint  _rawdata = { &rawdata,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 for NOREC, 1 for NOPROC.", 
0, "" };

_cvint  _saveinter = { &saveinter,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 to store all intermed images.", 
0, "" };

_cvint  _zchop = { &zchop,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if data chopped on z, 0 if chopped on y.", 
0, "" };

_cvint  _eepf = { &eepf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Even Echo Phase Flip", 
0, "" };

_cvint  _oepf = { &oepf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Odd Echo Phase Flip", 
0, "" };

_cvint  _eeff = { &eeff,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Even Echo Freq Flip", 
0, "" };

_cvint  _oeff = { &oeff,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Odd Echo Freq flip", 
0, "" };

_cvint  _cine_choplet = { &cine_choplet,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "on 1, let pcm do chopping", 
0, "" };


_cvfloat  _fermi_rc = { &fermi_rc,  
    0.0, 
    MAXFLOAT, 
    0.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius coefficient", 
0, "" };

_cvfloat  _fermi_wc = { &fermi_wc,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi window coefficient", 
0, "" };

_cvint  _apodize_level_flag = { &apodize_level_flag,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Apodization Level: 0=Weak, 1=Medium, 2=Strong", 
0, "" };

_cvfloat  _fermi_r_factor = { &fermi_r_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius factor", 
0, "" };

_cvfloat  _fermi_w_factor = { &fermi_w_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi window factor", 
0, "" };

_cvfloat  _pure_mix_tx_scale = { &pure_mix_tx_scale,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix transmit scale", 
    0, ""
};

_cvint  _channel_compression = { &channel_compression,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Channel Compression", 
    0, ""
};

_cvint  _optimal_channel_combine = { &optimal_channel_combine,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Optimal SNR Recon", 
    0, ""
};

_cvint  _enforce_cal_for_channel_combine = { &enforce_cal_for_channel_combine,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Optimal SNR Recon", 
    0, ""
};

_cvint  _override_opcalrequired = { &override_opcalrequired,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "opcalrequired is overridden (=1) or not (=0)", 
    0, ""
};

_cvint  _dump_channel_comp_optimal_recon = { &dump_channel_comp_optimal_recon,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Dump flags for channel compression and optimal recon", 
    0, ""
};

_cvint  _dump_scenic_parameters = { &dump_scenic_parameters,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Dump itkn4 and scic parameters", 
    0, ""
};
















_cvfloat  _PSsr_derate_factor = { &PSsr_derate_factor,  1.0,  50.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "PSC SR derating factor", 0, "" };
_cvfloat  _PSamp_derate_factor = { &PSamp_derate_factor,  1.0,  10.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "PSC AMP derating factor", 0, "" };
_cvfloat  _PSassr_derate_factor = { &PSassr_derate_factor,  1.0,  50.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "AutoShim SR derating factor", 0, "" };
_cvfloat  _PSasamp_derate_factor = { &PSasamp_derate_factor,  1.0,  10.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "AutoShim AMP derating factor", 0, "" };
_cvint  _PSTR_PASS = { &PSTR_PASS, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _mpsfov = { &mpsfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "mpsfov", 0, "" };

_cvint  _fastprescan = { &fastprescan,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Fast prescan on/off", 0, "" };
_cvint  _pre_slice = { &pre_slice,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "prescan slice number", 0, "" };
_cvint  _PSslice_num = { &PSslice_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddAPS1 = { &xmtaddAPS1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddCFL = { &xmtaddCFL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddCFH = { &xmtaddCFH, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddFTG = { &xmtaddFTG, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtadd = { &xmtadd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddRCVN = { &xmtaddRCVN, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ps1scale = { &ps1scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cflscale = { &cflscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cfhscale = { &cfhscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ftgscale = { &ftgscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _extraScale = { &extraScale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PSdebugstate = { &PSdebugstate,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Debug flag for Prescan", 0, "" };
_cvint  _PSfield_strength = { &PSfield_strength,  0, MAXINT, 0, 0, 0, 0, 1, 1,  VIS,  "Prescan Field Strength", 0, "" };
_cvint  _PScs_sat = { &PScs_sat,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan Chem-SAT flag", 0, "" };
_cvint  _PSir = { &PSir,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan IR flag", 0, "" };
_cvint  _PSmt = { &PSmt,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan MT flag", 0, "" };
_cvint  _ps1_rxcoil = { &ps1_rxcoil,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "TG PS1 Coil: 1=Rxed coil, 0=default", 0, "" };
_cvint  _ps_seed = { &ps_seed, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _tg_1_2_pw = { &tg_1_2_pw,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1:2 pw TG prescan flag", 0, "" };
_cvint  _tg_axial = { &tg_axial,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "0:user plane 2:axial", 0, "" };
_cvfloat  _coeff_pw_tg = { &coeff_pw_tg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _fov_lim_mps = { &fov_lim_mps,  30, 450, 350,  0, 0, 0, 1, 1, VIS, "FOV limt for MPS", 0, "" };


_cvint  _TGspf = { &TGspf,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "TG swap phase/freq. flag",  0, "" };

_cvfloat  _flip_rf2cfh = { &flip_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3cfh = { &flip_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf4cfh = { &flip_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ps1_tr = { &ps1_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfl_tr = { &cfl_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfh_tr = { &cfh_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rcvn_tr = { &rcvn_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _cfh_ec_position = { &cfh_ec_position,  0.0,  1.0,  (16.0/256.0),  0, 0, 0, 1, 1,  VIS,  "Position of the echo center", 0, "" };

_cvint  _cfl_dda = { &cfl_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in cfl", 0, "" };
_cvint  _cfl_nex = { &cfl_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in cfl", 0, "" };
_cvint  _cfh_dda = { &cfh_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in cfh", 0, "" };
_cvint  _cfh_nex = { &cfh_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in cfh", 0, "" };
_cvint  _rcvn_dda = { &rcvn_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in RCVN", 0, "" };
_cvint  _rcvn_nex = { &rcvn_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in RCVN", 0, "" };


_cvint  _local_tg = { &local_tg,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "flag for local XTG", 0, "" };
_cvfloat  _fov_scaling = { &fov_scaling,  0.1,  1.0,  0.8,  0, 0, 0, 1, 1,  INVIS,  "FOV scaling for local TG w/o shim vol", 0, "" };
_cvfloat  _flip_rf1xtg = { &flip_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1xtg = { &gscale_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _init_xtg_deadtime = { &init_xtg_deadtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1mps1 = { &flip_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1mps1 = { &gscale_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };









_cvint  _presscfh_override = { &presscfh_override,  0,  PRESSCFH_NONE, 0,  0, 0, 0, 1, 1,  VIS,  "PSD Level Control for Overriding the default CFH selected by opimode", 0, "" };
_cvint  _presscfh = { &presscfh,  1, PRESSCFH_NONE, PRESSCFH_NONE,  0, 0, 0, 1, 1,  VIS,  "PSD Level Control for CFH", 0, "" };
_cvint  _presscfh_ctrl = { &presscfh_ctrl,  1, PRESSCFH_NONE , PRESSCFH_NONE,  0, 0, 0, 1, 1,  VIS,  "Geometry Level control for CFH", 0, "" };
_cvint  _presscfh_outrange = { &presscfh_outrange, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_cgate = { &presscfh_cgate, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_debug = { &presscfh_debug,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "IR PRESS CFH debugging information", 0, "" };
_cvint  _presscfh_wait_rf12 = { &presscfh_wait_rf12, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_wait_rf23 = { &presscfh_wait_rf23, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_wait_rf34 = { &presscfh_wait_rf34, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_minte = { &presscfh_minte, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_fov = { &presscfh_fov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_fov_ratio = { &presscfh_fov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_pfov_ratio = { &presscfh_pfov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slab_ratio = { &presscfh_slab_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_pfov = { &presscfh_pfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slthick = { &presscfh_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slice = { &presscfh_slice, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_ir_slthick = { &presscfh_ir_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_ir_noselect = { &presscfh_ir_noselect, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _presscfh_minfov_ratio = { &presscfh_minfov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cfh_steam_flag = { &cfh_steam_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _steam_pg_gap = { &steam_pg_gap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_gykcfl = { &area_gykcfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykcfh = { &area_gykcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_xtgzkiller = { &area_xtgzkiller, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_xtgykiller = { &area_xtgykiller, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PSoff90 = { &PSoff90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dummy_pw = { &dummy_pw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min180te = { &min180te, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _PStloc = { &PStloc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSrloc = { &PSrloc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSphasoff = { &PSphasoff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PStrigger = { &PStrigger, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _PStloc_mod = { &PStloc_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSrloc_mod = { &PSrloc_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSphasoff_mod = { &PSphasoff_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thickPS_mod = { &thickPS_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _asx_killer_area = { &asx_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _asz_killer_area = { &asz_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfhir_killer_area = { &cfhir_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ps_crusher_area = { &ps_crusher_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfh_crusher_area = { &cfh_crusher_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_cfh_crusher = { &target_cfh_crusher, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_cfh_crusher2 = { &target_cfh_crusher2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfh_newmode = { &cfh_newmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfh_rf1freq = { &cfh_rf1freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf2freq = { &cfh_rf2freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf3freq = { &cfh_rf3freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf4freq = { &cfh_rf4freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_fov = { &cfh_fov,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvint  _cfh_ti = { &cfh_ti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _eff_cfh_te = { &eff_cfh_te, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PScfh_shimvol_debug = { &PScfh_shimvol_debug,  0,  7,  0,  0, 0, 0, 1, 1,  VIS,  "Shift shim volume along axis in shimvol domain, 1: slice, 2: freq, 4: phase", 0, "" };
_cvint  _debug_shimvol_slice = { &debug_shimvol_slice, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _wg_cfh_rf3 = { &wg_cfh_rf3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_cfh_rf4 = { &wg_cfh_rf4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _FTGslthk = { &FTGslthk,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };

_cvfloat  _FTGopslthickz1 = { &FTGopslthickz1,  MINTHICK, 80, 80,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvfloat  _FTGopslthickz2 = { &FTGopslthickz2,  MINTHICK, 80, 80,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvfloat  _FTGopslthickz3 = { &FTGopslthickz3,  MINTHICK, 80, 20,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvint  _ftgtr = { &ftgtr,  TR_MIN, TR_MAX, 2000000,  0, 0, 0, 1, 1, VISONLY, "Fast TG time of repetition", 0, "" };
_cvfloat  _FTGfov = { &FTGfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISONLY, "FastTG fov", 0, "" };
_cvfloat  _FTGau = { &FTGau,  -MAXFLOAT, MAXFLOAT, 4,  0, 0, 0, 1, 1, VISONLY, "Tau scale factor", 0, "" };
_cvfloat  _FTGtecho = { &FTGtecho,  -MAXFLOAT, MAXFLOAT, 4,  0, 0, 0, 1, 1, VISONLY, "", 0, "" };
_cvint  _FTGtau1 = { &FTGtau1,  0, 64000, 8192  ,  0, 0, 0, 1, 1, VISONLY, "Theta1 to Theta2 time (center to center)", 0, "" };
_cvint  _FTGtau2 = { &FTGtau2,  0, 64000, 32768  ,  0, 0, 0, 1, 1, VISONLY,  "Theta1 to Theta3 time (center to center)", 0, "" };
_cvint  _FTGacq1 = { &FTGacq1,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY,  "1=window one active, 0=disabled", 0, "" };
_cvint  _FTGacq2 = { &FTGacq2,  0, 1, 1,  0, 0, 0, 1, 1, VISONLY,  "1=window two active, 0=disabled", 0, "" };
_cvint  _epi_ir_on = { &epi_ir_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=IR EPI", 0, "" };
_cvint  _ssfse_ir_on = { &ssfse_ir_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=IR EPI", 0, "" };
_cvint  _ftg_dda = { &ftg_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in fast TG", 0, "" };

_cvfloat  _FTGecho1bw = { &FTGecho1bw,  2, 32, 4,  0, 0, 0, 1, 1, VISONLY,  "Fast TG Echo1 filter bw. in KHz", 0, "" };
_cvint  _FTGtestpulse = { &FTGtestpulse,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY, "Test pulse for gradient moment tests.", 0, "" };
_cvint  _FTGxres = { &FTGxres,  16, 512, 256,  0, 0, 0, 1, 1, VISONLY,  "X(frequency) resolution", 0, "" };
_cvfloat  _FTGxmtadd = { &FTGxmtadd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftgleft = { &pw_gxw2ftgleft, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _xtgtr = { &xtgtr,  TR_MIN, TR_MAX, 200000,  0, 0, 0, 1, 1, VISONLY, "eXpress TG time of repetition", 0, "" };
_cvint  _XTGtau1 = { &XTGtau1,  0, 64000, 8192  ,  0, 0, 0, 1, 1, VISONLY, "Theta1 to Theta2 time (center to center)", 0, "" };
_cvfloat  _XTGfov = { &XTGfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISONLY, "eXpress TG fov", 0, "" };
_cvint  _pw_bsrf = { &pw_bsrf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtg_offres_freq = { &xtg_offres_freq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _XTGecho1bw = { &XTGecho1bw,  2, 32, 15.625,  0, 0, 0, 1, 1, VISONLY,  "eXpress TG Echo1 filter bw. in KHz", 0, "" };
_cvint  _XTGxres = { &XTGxres,  16, 512, 256,  0, 0, 0, 1, 1, VISONLY,  "X(frequency) resolution", 0, "" };
_cvfloat  _xmtaddXTG = { &xmtaddXTG, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xtgscale = { &xtgscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtg_dda = { &xtg_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in express TG", 0, "" };
_cvint  _XTGacq1 = { &XTGacq1,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY,  "1=window one active, 0=disabled", 0, "" };
_cvfloat  _TGopslthick = { &TGopslthick,  0.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _TGopslthickx = { &TGopslthickx,  0.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _TGopslthicky = { &TGopslthicky,  0.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvint  _XTG_minimizeYKillerGap = { &XTG_minimizeYKillerGap,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Option to minimize time between XTG Y Killers to reduce 1st order gradient moment: 0=Off, 1=On", 0, "" };


_cvint  _dynTG_etl = { &dynTG_etl,  1, 8, 2,  0, 0, 0, 1, 1, INVIS,  "Num. echoes for dynamic TG", 0, "" };
_cvint  _dtg_iso_delay = { &dtg_iso_delay,   0,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "min phase pulse iso-delay",  0, "" };
_cvint  _dtg_off90 = { &dtg_off90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dtg_dda = { &dtg_dda,  0, 16, 2,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in dynamic TG", 0, "" };
_cvint  _rf1dtg_type = { &rf1dtg_type,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "b1rf1_type 0=sinc 1=tbw6", 0, "" };
_cvfloat  _echo1bwdtg = { &echo1bwdtg,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 DynTG filter bw. in KHz", 0, "" };
_cvint  _dtgt_exa = { &dtgt_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dtgt_exb = { &dtgt_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tleaddtg = { &tleaddtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_td0dtg = { &td0dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dtgphorder = { &dtgphorder, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dtgspgr_flag = { &dtgspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _pw_rf1dtg = { &pw_rf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1dtg = { &a_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_dtgte = { &min_dtgte, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dtg_esp = { &dtg_esp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_dtg = { &tr_dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssidtg = { &time_ssidtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _rsaxial_flag = { &rsaxial_flag,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "RFShim Plane: 1=Axial Plane; 0=Rxed Plane", 0, "" };
_cvint  _rsspgr_flag = { &rsspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _multi_channel = { &multi_channel,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for single or multi-channel", 0, "" };
_cvint  _minph_iso_delay = { &minph_iso_delay,   0,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "min phase pulse iso-delay",  0, "" };
_cvint  _rs_off90 = { &rs_off90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rs_iso_delay = { &rs_iso_delay,   0,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "min phase pulse iso-delay",  0, "" };
_cvfloat  _echo1bwrs = { &echo1bwrs,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 RFShim filter bw. in KHz", 0, "" };
_cvint  _rsphorder = { &rsphorder, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rs_dda = { &rs_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in RFShim", 0, "" };
_cvint  _rst_exa = { &rst_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rst_exb = { &rst_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tleadrs = { &tleadrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_td0rs = { &td0rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1rs = { &pw_rf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1rs = { &ia_rf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1rs = { &a_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rf1rs_type = { &rf1rs_type,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "b1rf1_type 0=sinc 1=tbw6", 0, "" };

_cvfloat  _gscale_rf1rs = { &gscale_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1rs = { &flip_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_flip_rfbrs = { &flip_rfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cyc_rf1rs = { &cyc_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1dtg = { &flip_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_flip_rfbdtg = { &flip_rfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cyc_rf1dtg = { &cyc_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_gscale_rf1dtg = { &gscale_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1dtg = { &ia_rf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _rf1rs_scale = { &rf1rs_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rf1dtg_scale = { &rf1dtg_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddrs = { &xmtaddrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtadddtg = { &xmtadddtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_acqrs1 = { &pw_acqrs1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_acqdtg1 = { &pw_acqdtg1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_rste = { &min_rste, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rs_esp = { &rs_esp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_rs = { &tr_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tr_prep_rs = { &tr_prep_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rd_ext_rs = { &rd_ext_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rd_ext_dtg = { &rd_ext_dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _fast_xtr = { &fast_xtr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _attenlen = { &attenlen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tns_len = { &tns_len, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _e2_delay_rs = { &e2_delay_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _e2_delay_dtg = { &e2_delay_dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssirs = { &time_ssirs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rfshim_etl = { &rfshim_etl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _B1Cal_mode = { &B1Cal_mode,   0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "RFShim Calibration mode", 0, "" };
_cvint  _DD_delay = { &DD_delay,  1000, 20000, 2000,  0, 0, 0, 1, 1, VIS,  "Delay time for dual drive I/Q switch", 0, "" };
_cvint  _DD_channels = { &DD_channels,  2, 8, 2,  0, 0, 0, 1, 1, INVIS,  "Dual Drive Channels", 0, "" };
_cvint  _DD_nCh = { &DD_nCh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _DD_debug = { &DD_debug,  0, 2, 0,  0, 0, 0, 1, 1, INVIS,  "I/Q channel debug. OFF:0, I:1, Q:2", 0, "" };

_cvint  _endview_iamprs = { &endview_iamprs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_endview_iampdtg = { &endview_iampdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scalers = { &endview_scalers, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_endview_scaledtg = { &endview_scaledtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _echo1bwcal = { &echo1bwcal,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 Ext Cal filter bw. in KHz", 0, "" };
_cvint  _cal_dda = { &cal_dda,  0, MAXINT, 128,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in Cal Scan", 0, "" };
_cvint  _cal_delay = { &cal_delay,  0, MAXINT, 4000000,  0, 0, 0, 1, 1, INVIS,  "delay for cal in Prescan", 0, "" };
_cvint  _cal_delay_dda = { &cal_delay_dda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _calspgr_flag = { &calspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _cal_tr_interleave = { &cal_tr_interleave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_nex_interleave = { &cal_nex_interleave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_xfov = { &cal_xfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_yfov = { &cal_yfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_vthick = { &cal_vthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_btw_rf_rba_ssp = { &cal_btw_rf_rba_ssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_grd_rf_delays = { &cal_grd_rf_delays, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tleadcal = { &tleadcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _td0cal = { &td0cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _calt_exa = { &calt_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _calt_exb = { &calt_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tacq_cal = { &tacq_cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _te_cal = { &te_cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_cal = { &tr_cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cal = { &flip_rf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_iso_delay = { &cal_iso_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampcal = { &endview_iampcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endviewz_iampcal = { &endviewz_iampcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scalecal = { &endview_scalecal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endviewz_scalecal = { &endviewz_scalecal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcal = { &a_combcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcal = { &a_endcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcal2 = { &a_combcal2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcal2 = { &a_endcal2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssical = { &time_ssical, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddcal = { &xmtaddcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_amplimit = { &cal_amplimit, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_slewrate = { &cal_slewrate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_freq_scale = { &cal_freq_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_phase_scale = { &cal_phase_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkcal = { &area_gzkcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_ampscale = { &cal_ampscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_pfkr_flag = { &cal_pfkr_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_pfkr_fraction = { &cal_pfkr_fraction, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_sampledPts = { &cal_sampledPts, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _echo1bwcoil = { &echo1bwcoil,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 Ext Cal filter bw. in KHz", 0, "" };
_cvint  _coil_dda = { &coil_dda,  0, MAXINT, 4,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in Cal Scan", 0, "" };
_cvint  _coilspgr_flag = { &coilspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _coil_nex_interleave = { &coil_nex_interleave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_xfov = { &coil_xfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_yfov = { &coil_yfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_vthick = { &coil_vthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tleadcoil = { &tleadcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _td0coil = { &td0coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coilt_exa = { &coilt_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coilt_exb = { &coilt_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tacq_coil = { &tacq_coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _te_coil = { &te_coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_coil = { &tr_coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1coil = { &flip_rf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coil_iso_delay = { &coil_iso_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampcoil = { &endview_iampcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endviewz_iampcoil = { &endviewz_iampcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scalecoil = { &endview_scalecoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endviewz_scalecoil = { &endviewz_scalecoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcoil = { &a_combcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcoil = { &a_endcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcoil2 = { &a_combcoil2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcoil2 = { &a_endcoil2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssicoil = { &time_ssicoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddcoil = { &xmtaddcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_amplimit = { &coil_amplimit, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_slewrate = { &coil_slewrate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_freq_scale = { &coil_freq_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_phase_scale = { &coil_phase_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coil_pfkr_flag = { &coil_pfkr_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_pfkr_fraction = { &coil_pfkr_fraction, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coil_sampledPts = { &coil_sampledPts, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _CFLxres = { &CFLxres,  16, 4096, 256,  0, 0, 0, 1, 1, VISONLY,  "CFL X(frequency) resolution", 0, "" };
_cvint  _CFHxres = { &CFHxres,  16, 4096, 256,  0, 0, 0, 1, 1, VISONLY,  "CFL X(frequency) resolution", 0, "" };

_cvfloat  _echo1bwcfl = { &echo1bwcfl,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFL filter bw. in KHz", 0, "" };
_cvfloat  _echo1bwcfh = { &echo1bwcfh,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFH filter bw. in KHz", 0, "" };

_cvfloat  _echo1bwrcvn = { &echo1bwrcvn,  -MAXFLOAT, MAXFLOAT,  15.625,  0, 0, 0, 1, 1,  INVIS,  "Echo1 RCVN filter BW in KHz", 0, "" };
_cvint  _rcvn_xres = { &rcvn_xres,  128,  4096,  4096,  0, 0, 0, 1, 1,  VIS,  "X(frequency) resolution for RCVN filter", 0, "" };
_cvint  _rcvn_loops = { &rcvn_loops, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_grdtrig = { &pw_grdtrig,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "grad diag trig", 0, "" };

_cvint  _wait_time_before_cfh = { &wait_time_before_cfh,  1000,  10000000,  1000000,  0, 0, 0, 1, 1,  VIS,  "wait time before CFH", 0, "" };



_cvfloat  _echo1bwas = { &echo1bwas,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 auto-shim filter bw. in KHz", 0, "" };

_cvint  _off90as = { &off90as,  -MAXINT, MAXINT, 80,  0, 0, 0, 1, 1, INVIS,  "Comp factor for real 90", 0, "" };
_cvint  _td0as = { &td0as,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _t_exaas = { &t_exaas,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from start of 90 to mid 90", 0, "" };
_cvint  _time_ssias = { &time_ssias,  0, MAXINT, 400  ,  0, 0, 0, 1, 1, INVIS,  "time from eos to ssi in intern trig", 0, "" };
_cvint  _tleadas = { &tleadas,  0, MAXINT, 25  ,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };

_cvint  _te_as = { &te_as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_as = { &tr_as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _as_dda = { &as_dda,  0, 4, 4,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in autoshim", 0, "" };

_cvint  _pw_isislice = { &pw_isislice,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "isi update delay", 0, "" };
_cvint  _pw_rotslice = { &pw_rotslice,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "rot. matrix update", 0, "" };
_cvint  _isi_sliceextra = { &isi_sliceextra,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "Extra time to move gradient killer", 0, "" };




_cvint  _rgfeature_enable = { &rgfeature_enable,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "Enable RG Reduction Feature (0:No, 1:Yes)", 0, "" };


_cvint  _enableMapTg = { &enableMapTg,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Enable B1 Map TG method (0:No, 1:Yes)", 0, "" };



_cvfloat  _aslenap = { &aslenap,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "AP length of shim voxel (mm)",  0, "" };
_cvfloat  _aslenrl = { &aslenrl,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "RL length of shim voxel (mm)",  0, "" };
_cvfloat  _aslensi = { &aslensi,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "SI length of shim voxel (mm)",  0, "" };

_cvfloat  _aslocap = { &aslocap,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "AP location of shim voxel (mm)",  0, "" };
_cvfloat  _aslocrl = { &aslocrl,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "RL location of shim voxel (mm)",  0, "" };
_cvfloat  _aslocsi = { &aslocsi,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "SI location of shim voxel (mm)",  0, "" };



_cvfloat  _area_gxwas = { &area_gxwas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gz1as = { &area_gz1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_readrampas = { &area_readrampas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgx1as = { &avail_pwgx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgz1as = { &avail_pwgz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bw_rf1as = { &bw_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _flip_pctas = { &flip_pctas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dix_timeas = { &dix_timeas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddas = { &xmtaddas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtlogas = { &xmtlogas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ps1obl_debug = { &ps1obl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _asobl_debug = { &asobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _ps1_newgeo = { &ps1_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _as_newgeo = { &as_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1as_tot = { &pw_gy1as_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampas = { &endview_iampas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scaleas = { &endview_scaleas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cfh_newgeo = { &cfh_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhobl_debug = { &cfhobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };

_cvfloat  _deltf = { &deltf,  -MAXFLOAT, MAXFLOAT, 1.0,  0, 0, 0, 1, 1, VIS, "Frequency shift", 0, "" };

_cvint  _IRinCFH = { &IRinCFH,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS IR in CFH flag",  0, "" };
_cvint  _cfh_each = { &cfh_each,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS CFH per slice flag",  0, "" };
_cvint  _cfh_slquant = { &cfh_slquant,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS CFH slice quantity",  0, "" };

_cvint  _noswitch_slab_psc = { &noswitch_slab_psc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "No slab switch for psc(sotf)", 0, "" };
_cvint  _noswitch_coil_psc = { &noswitch_coil_psc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "No coil switch for psc(sotf)", 0, "" };
_cvint  _PStest_slab = { &PStest_slab,  1, 2, 1,  0, 0, 0, 1, 1, INVIS, "Testing slab for psc(sotf)", 0, "" };

_cvint  _pimrsapsflg = { &pimrsapsflg,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "flag for MRS AutoPrescan",  0, "" };
_cvint  _pimrsaps1 = { &pimrsaps1,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 1: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR,"
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps2 = { &pimrsaps2,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 2: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR,"
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps3 = { &pimrsaps3,    0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 3: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps4 = { &pimrsaps4,    0,  116,  4,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 4: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps5 = { &pimrsaps5,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 5: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps6 = { &pimrsaps6,  0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 6: "
                                "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                "15=Cal, 16=AUTOCOIL,101=AWS,"
                                "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps7 = { &pimrsaps7,   0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 7: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps8 = { &pimrsaps8,   0,  116,  101,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 8: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps9 = { &pimrsaps9,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 9: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps10 = { &pimrsaps10,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 10: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps11 = { &pimrsaps11,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 11: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps12 = { &pimrsaps12,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 12: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps13 = { &pimrsaps13,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 13: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps14 = { &pimrsaps14,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 14: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps15 = { &pimrsaps15,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 15: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };





_cvint  _pw_contrfhubsel = { &pw_contrfhubsel,  0,  MAXINT,  4,  0, 0, 0, 1, 1,  INVIS,  "Width of the change hub index packet", 0, "" };
_cvint  _delay_rfhubsel = { &delay_rfhubsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_contrfsel = { &pw_contrfsel,  0,  MAXINT,  4,  0, 0, 0, 1, 1,  INVIS,  "Width of the modify receiver port packet", 0, "" };
_cvint  _csw_tr = { &csw_tr,  0,  MAXINT, 0,  0, 0, 0, 1, 1,  VIS, "seq length for receiver coil switch core", 0, "" };
_cvint  _csw_wait_sethubindeximm = { &csw_wait_sethubindeximm, 
    0,  MAXINT,  250000,  0, 0, 0, 1, 1,  VIS,  "Additional time for coil switch when calling sethubindeximm", 0, "" };
_cvint  _csw_wait_setrcvportimm = { &csw_wait_setrcvportimm, 
    0,  MAXINT,  100000,  0, 0, 0, 1, 1,  VIS,  "Additional time for coil switch when calling setrcvportimm ", 0, "" };
_cvint  _csw_wait_before = { &csw_wait_before,  0,  MAXINT,  10000,  0, 0, 0, 1, 1, INVIS, "Delay for coil switching startup", 0, "" };
_cvint  _csw_time_ssi = { &csw_time_ssi, 
    0,  MAXINT,  50000,  0, 0, 0, 1, 1,  VIS,  "time from eos to ssi in intern trig for coil switch", 0, "" };


_cvfloat  _area_gxkrcvn = { &area_gxkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykrcvn = { &area_gykrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkrcvn = { &area_gzkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pre_rcvn_tr = { &pre_rcvn_tr,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  VIS,  "Pre sequence before RCVN", 0, "" };
_cvint  _rcvn_flag = { &rcvn_flag,  0,  3,  1,  0, 0, 0, 1, 1,  VIS,  "0: OFF; 1: crusher; 2: delay b4 RCVN; 3: grad prognostic ", 0, "" };


_cvint  _psd_startta_override = { &psd_startta_override,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "tg starting ta: 1 allow override", 0, "" };
_cvint  _psd_psctg = { &psd_psctg,  PSD_CONTROL_PSC_SKIP,  PSD_CONTROL_PSC_RUN,  APS_CONTROL_PSC,  0, 0, 0, 1, 1,  VIS, 
                                     "Prescan TG control: -1 Skip; 0 Auto; 1 Run", 0, "" };
_cvint  _psd_pscshim = { &psd_pscshim,  PSD_CONTROL_PSC_SKIP,  PSD_CONTROL_PSC_SPECIAL,  APS_CONTROL_PSC,  0, 0, 0, 1, 1,  VIS, 
                                       "Prescan AS control: -1 Skip; 0 Auto; 1 Run; 2 Special", 0, "" };
_cvint  _psd_pscall = { &psd_pscall,  PSD_CONTROL_PSC_SKIP,  PSD_CONTROL_PSC_RUN,  APS_CONTROL_PSC,  0, 0, 0, 1, 1,  VIS, 
                                       "Prescan APS control: -1 Skip all; 0 Auto; 1 Run all", 0, "" };


_cvint  _bw_rf1cal = { &bw_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_bw_rf1coil = { &bw_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvfloat  _yk0_killer_area = { &yk0_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ir_on = { &ir_on,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for IR.", 0, "" };
_cvint  _ir_start = { &ir_start,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Start time for IR.", 0, "" };
_cvint  _irk_start = { &irk_start,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Start time for IR killer. ", 0, "" };
_cvint  _ir_grad_time = { &ir_grad_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Play time for IR gradients.", 0, "" };
_cvint  _ir_time = { &ir_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Total IR time without SATs.", 0, "" };
_cvint  _ir_time_total = { &ir_time_total,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Total IR time with SATs.", 0, "" };
_cvint  _ext_ir_pulse = { &ext_ir_pulse,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for IR pulse selection.", 0, "" };
_cvfloat  _rf0_phase = { &rf0_phase,  0.0, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, INVIS, "Relative phase of 180 in cyc", 0, "" };
_cvint  _irslquant = { &irslquant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pos_ir_start = { &pos_ir_start, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _bw_rf0 = { &bw_rf0,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Bandwidth of IR pulse", 0, "" };
_cvint  _hrf0 = { &hrf0,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Half of IR pulse width", 0, "" };
_cvint  _ir_index = { &ir_index, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _csf_fact = { &csf_fact, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ir_fa_scaling_flag = { &ir_fa_scaling_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Scale IR pulse flip angle: 0-no, 1 yes", 0, "" };


_cvint  _inner_spacing = { &inner_spacing, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _post_spacing = { &post_spacing, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _invseqlen = { &invseqlen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



















_cvint  _ir_rfupa = { &ir_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _ir_sys_type = { &ir_sys_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };



_cvint  _invThickOpt = { &invThickOpt,  0, 0, 0,  0, 0, 0, 1, 1, INVIS,  "invThickOptimization mode 1==ON ", 0, "" };
_cvint  _invThickOpt_seqtime = { &invThickOpt_seqtime,  0, 0, 0,  0, 0, 0, 1, 1, INVIS,  "DeltaTime of IR Pulse", 0, "" };
_cvint  _t2flair_extra_ir_flag = { &t2flair_extra_ir_flag,  0, 0, 0,  0, 0, 0, 1, 1,  INVIS,  "T2FLAIR Extra IR flag", 0, "" };
_cvint  _packs = { &packs,  0, 0, 0,  0, 0, 0, 1, 1,  INVIS,  "number of packs that can be interleaved per acq", 0, "" };


_cvint  _ir_fa_scale_debug = { &ir_fa_scale_debug,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Debug IR Flip angle scaling: 1-Yes, 0-No", 0, "" };


_cvint  _ss_rf1 = { &ss_rf1,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "on(=1) for spectral spatial excitation.", 0, "" };
_cvint  _fat_flag = { &fat_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "0=water selection, 1=fat selection.", 0, "" };
_cvfloat  _fat_delta = { &fat_delta,  -500.0, MAXFLOAT, -230.0,  0, 0, 0, 1, 1, VIS, 
                               "Frequency offset for fat selection.", 0, "" };
_cvint  _fat_offset = { &fat_offset,  -MAXINT, MAXINT, -386,  0, 0, 0, 1, 1, INVIS,  "Freq offset in TARDIS units.", 0, "" };
_cvint  _sszchop = { &sszchop,  0, 1, 0,  0, 0, 0, 1, 1, VIS, 
                      "Chop the z gradient for better fat suppression.", 0, "" };
_cvint  _pw_gzrf1lobe = { &pw_gzrf1lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_constant = { &pw_constant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_rf1lobe = { &num_rf1lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _gradient_mode = { &gradient_mode,  0, 3, 1,  0, 0, 0, 1, 1, VIS, "gradient modes", 0, "" };
_cvint  _ss_rf_wait = { &ss_rf_wait,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, VIS, 
                         "Additional delay between rf and gradient subsystems", 0, "" };
_cvint  _pw_ss_rampz = { &pw_ss_rampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ss_override = { &ss_override,  0,  99110022,  0,  0, 0, 0, 1, 1,  VIS, "0=off, otherwise use field strength/rise time/full strength code (e.g. 1528822 is 1.5T, 288 ramp, 22 full strength).", 0, "" };
_cvint  _whichss = { &whichss, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _nbw_ssrf = { &nbw_ssrf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ss_min_slthk = { &ss_min_slthk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ss_maxoff = { &ss_maxoff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ss_minslthk1 = { &ss_minslthk1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ss_convolution_flag = { &ss_convolution_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0:Traditional Model; 1:Convolution Model", 0, "" };

_cvint  _breast_spsp_flag = { &breast_spsp_flag,  0,  2,  0,  0, 0, 0, 1, 1,  VIS,  "Spsp pulse for breast scan: 0-product, 1-30248501(XRMB) or 3027633(XRMW), 2-30248502", 0, "" };
_cvint  _ss_fa_scaling_flag = { &ss_fa_scaling_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Scale spsp pulse flip angle: 0-no, 1 yes", 0, "" };
_cvint  _ss_fa_scale_debug = { &ss_fa_scale_debug,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Debug SPSP flip angle scaling: 0-No, 1-Yes", 0, "" };
_cvfloat  _max_ss_fa = { &max_ss_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ss_maxoffex = { &ss_maxoffex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off90minor = { &off90minor, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _omega_amp = { &omega_amp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gz1_zero_moment = { &gz1_zero_moment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gz1_first_moment = { &gz1_first_moment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvfloat  _a_gzrf1_ss_max = { &a_gzrf1_ss_max, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _freqSign = { &freqSign, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };







_cvint  _cv_rfupa = { &cv_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _system_type = { &system_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };
_cvint  _cvlock = { &cvlock,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Lock flag for Modify CVs  0:Off 1:On", 0, "" };
_cvint  _psd_taps = { &psd_taps,  -1, MAXINT, 255,  0, 0, 0, 1, 1, VIS, 
  "for setfilter call -1:for optimized taps   255:for fixed CERD filter taps", 0, "" };
_cvint  _fix_fermi = { &fix_fermi,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
     "use original Fermi filter if 1", 0, "" };
_cvint  _grad_spec_ctrl = { &grad_spec_ctrl, 
 -1, 3, 0,  0, 0, 0, 1, 1, INVIS, "Grad Spec. control bits 1:gmax 2:srate", 0, "" };
_cvfloat  _srate = { &srate,  0.5, 23.0, 1.71,  0, 0, 0, 1, 1, INVIS,  "slewrate", 0, "" };
_cvfloat  _glimit = { &glimit,  0.5, 10.0, 1.0,  0, 0, 0, 1, 1, INVIS,  "g-max", 0, "" };
_cvfloat  _save_gmax = { &save_gmax, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_srate = { &save_srate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfxfull = { &save_cfxfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfyfull = { &save_cfyfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfzfull = { &save_cfzfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfxipeak = { &save_cfxipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfyipeak = { &save_cfyipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfzipeak = { &save_cfzipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_ramptime = { &save_ramptime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_grad_spec = { &debug_grad_spec,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on gradient spec debug", 0, "" };
_cvfloat  _act_srate = { &act_srate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _val15_lock = { &val15_lock, 
 0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Lock out HDMR2/DVMR features for Value 1.5T 0:off 1:on", 0, "" };

_cvint  _avecrushpepowscale_for_SBM_XFD = { &avecrushpepowscale_for_SBM_XFD, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _dbdt_model = { &dbdt_model,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "dBdt model: 0-rectangular, 1-convolution", 0, "" };
_cvfloat  _dbdtper_new = { &dbdtper_new, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _esprange_check = { &esprange_check,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to avoid unwanted ESP range: 0-off, 1-on", 0, "" };
_cvint  _espamp_check = { &espamp_check,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to check a_gxw to avoid unwanted ESP range: 0-off, 1-on", 0, "" };
_cvint  _espopt = { &espopt,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Turn on ESP minimization when dbdt_model = 1", 0, "" };
_cvint  _espincway = { &espincway,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Way to increase ESP: 0-regenerate waveform, 1-zero padding", 0, "" };

_cvint  _epigradopt_debug = { &epigradopt_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _epigradopt_output = { &epigradopt_output, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _disable_crc_check_for_esp = { &disable_crc_check_for_esp,  0, 1, 0,  0, 0, 0, 1, 1,  INVIS,  "Disable CRC check for ESP", 0, "" };

_cvfloat  _dbdtperx = { &dbdtperx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dbdtpery = { &dbdtpery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dbdtperz = { &dbdtperz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _max_dbdtper_hb_zblips = { &max_dbdtper_hb_zblips,  0, 2, 1,  0, 0, 0, 1, 1, VIS,  "Way to calculate max_dbdtper for hb in calcdbdtper_conv(): "
    "0- ignore zblips, 1 - vector addition (conv(x,y)+z), 2 - direct addition (conv(x,y)+z)", 0, "" };


_cvfloat  _scale_ramp = { &scale_ramp,  1.0,  100,  1.0,  0, 0, 0, 1, 1,  VIS,  "scale factor for ramp time for diffusion", 0, "" };

_cvint  _debugTensor = { &debugTensor,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Tensor Debugging Flag", 0, "" };
_cvint  _tensor_flag = { &tensor_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Tensor flag based off option key check", 0, "" };
_cvint  _num_tensor = { &num_tensor,  0, MAX_DIRECTIONS, MIN_DTI_DIRECTIONS,  0, 0, 0, 1, 1, VIS, "Number of Diffusion Directions", 0, "" };
_cvint  _validTensorFile = { &validTensorFile, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _validTensorFileAndEntry = { &validTensorFileAndEntry, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_B0 = { &num_B0,  1, 10, 5,  0, 0, 0, 1, 1, VIS, "Number of B = 0 Images", 0, "" };
_cvint  _sep_time = { &sep_time,  0, 10000, 0,  0, 0, 0, 1, 1, VIS, "Delay between 1 & 2nd diffusion lobes", 0, "" };
_cvint  _min180_echo_tim = { &min180_echo_tim,  0, 50000, 2000,  0, 0, 0, 1, 1, VIS, "Minimum Time for dr2 Dif Lobes", 0, "" };
_cvint  _min180_echo_tim2 = { &min180_echo_tim2,  0, 50000, 2000,  0, 0, 0, 1, 1, VIS, "Minimum Time for dl1 Dif Lobes", 0, "" };
_cvint  _calc_bmatrix_flag = { &calc_bmatrix_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to trigger b-matrix calculations.", 0, "" };
_cvint  _bmax_fixed = { &bmax_fixed, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pgen_calc_bval_flag = { &pgen_calc_bval_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to indicate call to getCornerpoints from pgen_calcbvalues.", 0, "" };

_cvint  _tensor_host_sort_flag = { &tensor_host_sort_flag,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Sort tensor vectors to generate cornerPoints: 0: off, 1: on", 0, "" };
_cvint  _tensor_host_sort_debug = { &tensor_host_sort_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sse_manualte_derating = { &sse_manualte_derating,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Shift and further derating the left diffusion gradient for SSE diffusion: 0: off, 1: on", 0, "" };
_cvint  _sse_manualte_derating_debug = { &sse_manualte_derating_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _spherical_derating_limit = { &spherical_derating_limit,  0,  7.0,  5.0,  0, 0, 0, 1, 1,  VIS,  "Gradient amplitude limit for spherical derating", 0, "" };

_cvint  _collect_six_sigma = { &collect_six_sigma, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _per_err_orig_x = { &per_err_orig_x, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _per_err_orig_y = { &per_err_orig_y, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _per_err_orig_z = { &per_err_orig_z, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _per_err_corr_x = { &per_err_corr_x, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _per_err_corr_y = { &per_err_corr_y, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _per_err_corr_z = { &per_err_corr_z, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sse_enh = { &sse_enh,  PSD_OFF,  PSD_ON,  PSD_ON,  0, 0, 0, 1, 1,  VIS,  "Flag for SSE enhancement of TE reduction: 1-yes, 0-no", 0, "" };

_cvint  _optimizedTEFlag = { &optimizedTEFlag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flag for optimized TE", 0, "" };

_cvint  _act_numdir_clinical = { &act_numdir_clinical,  MIN_DTI_DIRECTIONS,  2000,  MAX_DTI_LEGACY,  0, 0, 0, 1, 1,  INVIS,  "Max number of DTI dirs in Clinical Mode", 0, "" };



_cvint  _maxwell_flag = { &maxwell_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _maxwell_blip = { &maxwell_blip, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _B0_field = { &B0_field, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gxw_MAX_l = { &pw_gxw_MAX_l, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gxw_MAX_r = { &pw_gxw_MAX_r, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gyb_MAX_l = { &pw_gyb_MAX_l, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gyb_MAX_r = { &pw_gyb_MAX_r, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_debug = { &max_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _nodelay = { &nodelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _nodelayesp = { &nodelayesp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _b0dither_new = { &b0dither_new,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "b0dither calculation. 0= exponential fitting; 1= interpolation.", 0, "" };

_cvint  _nob0dither = { &nob0dither, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _nob0dither_interpo = { &nob0dither_interpo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




















_cvint  _nobcfile = { &nobcfile, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _number_of_bc_files = { &number_of_bc_files, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _activeReceivers = { &activeReceivers, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flagWarning = { &flagWarning, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _rfov_flag = { &rfov_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Reduced FOV w/ 2DRF flag", 0, "" };
_cvint  _rfov_type = { &rfov_type,  0,  MAXINT,  0, 0, 0, 0, 1, 1,  VIS,  "Reduced FOV RF type", 0, "" };
_cvint  _rfov_override = { &rfov_override,  0,  MAXINT,  0, 0, 0, 0, 1, 1,  VIS,  "Reduced FOV RF type override", 0, "" };
_cvint  _rfov_cmplx_avg_flag = { &rfov_cmplx_avg_flag,   PSD_OFF,  PSD_ON,  PSD_ON,  0, 0, 0, 1, 1,  VIS,  "Reduced FOV Recon with complex averaging flag", 0, "" };
_cvint  _debug_rfov = { &debug_rfov,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "Reduced FOV Debug flag", 0, "" };


_cvfloat  _psminfov = { &psminfov,  0,  MAXFLOAT,  0, 0, 0, 0, 1, 1,  INVIS,  "RFOV prescan FOV (in mm)", 0, "" };
_cvfloat  _psminslthick = { &psminslthick,  0,  MAXFLOAT,  0, 0, 0, 0, 1, 1,  INVIS,  "RFOV prescan slice thickness (in mm)", 0, "" };
_cvfloat  _temp_slthick = { &temp_slthick,  0,  MAXFLOAT,  0, 0, 0, 0, 1, 1,  INVIS,  "Holder for prescan slice thickness", 0, "" };


_cvint  _rfov_maxnslices = { &rfov_maxnslices, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _rfov_fa_scaling_flag = { &rfov_fa_scaling_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _max_rfov_fa = { &max_rfov_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _rfov_dbdtper = { &rfov_dbdtper,  0.0,  MAXFLOAT,  0, 0, 0, 0, 1, 1,  INVIS,  "RFOV RF pulse dbdtper value", 0, "" };
_cvint  _rfov_dbdt_debug = { &rfov_dbdt_debug,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "RFOV dbdt debug flag", 0, "" };


_cvint  _start_rf1 = { &start_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thky_rf1 = { &thky_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gyrf1 = { &a_gyrf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf1 = { &ia_gyrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1 = { &pw_gyrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1a = { &pw_gyrf1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1d = { &pw_gyrf1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gyrf1 = { &res_gyrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thrf1 = { &ia_thrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _addrfdel = { &addrfdel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _area_gyex1 = { &area_gyex1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyex1_tot = { &pw_gyex1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ex_res = { &ex_res, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw = { &ex_pw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_ttipdown = { &ex_ttipdown, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_nom_flip = { &ex_nom_flip, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_abswidth = { &ex_abswidth, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_effwidth = { &ex_effwidth, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_area = { &ex_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_dtycyc = { &ex_dtycyc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_maxpw = { &ex_maxpw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_max_b1 = { &ex_max_b1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_max_int_b1_sqr = { &ex_max_int_b1_sqr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_max_rms_b1 = { &ex_max_rms_b1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_a_gzs = { &ex_a_gzs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_nom_thkz = { &ex_nom_thkz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_a_gys = { &ex_a_gys, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_nom_thky = { &ex_nom_thky, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_maxnslices = { &ex_maxnslices, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_num_gylobe = { &ex_num_gylobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_num_gzlobe = { &ex_num_gzlobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_gyrf1lobe = { &ex_pw_gyrf1lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_rampy = { &ex_pw_rampy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_rampz = { &ex_pw_rampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_constanty = { &ex_pw_constanty, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_constantz = { &ex_pw_constantz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_refocus_ratioy = { &ex_refocus_ratioy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_refocus_ratioz = { &ex_refocus_ratioz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_tbwy = { &ex_tbwy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ex_tbwz = { &ex_tbwz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _freqSign_ex = { &freqSign_ex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _shift_to_freq = { &shift_to_freq, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _y_shift = { &y_shift, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _y_to_freq = { &y_to_freq, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _z_shift = { &z_shift, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _z_to_freq = { &z_to_freq, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _type1_support = { &type1_support,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Fly-back 2DRF support flag: 0=not support, 1=support", 0, "" };
_cvint  _type1_flag = { &type1_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _homogeneity_flag = { &homogeneity_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Homogeneity: 0=Homogeneity OFF, 1=Homogeneity ON", 0, "" };
_cvfloat  _ex_a_gys_pos = { &ex_a_gys_pos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gys_pos = { &a_gys_pos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gys_pos = { &ia_gys_pos, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_rampy_pos = { &ex_pw_rampy_pos, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ex_pw_constanty_pos = { &ex_pw_constanty_pos, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _excite_ratio = { &excite_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _walk_sat_flag = { &walk_sat_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wksat_tot = { &pw_wksat_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _a_gyrfwk = { &a_gyrfwk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrfwk = { &ia_gyrfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfwk = { &pw_gyrfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfwka = { &pw_gyrfwka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfwkd = { &pw_gyrfwkd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gwksp = { &pw_gwksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gwkspa = { &pw_gwkspa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gwkspd = { &pw_gwkspd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gwksp = { &a_gwksp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pos_sp_wk = { &pos_sp_wk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _walk_sat_cycle = { &walk_sat_cycle,  0,  32,  16,  0, 0, 0, 1, 1,  VIS,  "Cycles of dephasing through out sat-band in walk-sat", 0, "" };

_cvint  _wg_rfwk = { &wg_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfwk_orig = { &res_rfwk_orig, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfwk = { &res_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfwk = { &pw_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _hrfwka = { &hrfwka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _hrfwkb = { &hrfwkb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfwk = { &flip_rfwk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bw_rfwk = { &bw_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfwk = { &cyc_rfwk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfwk = { &a_rfwk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfwk = { &ia_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thrfwk = { &ia_thrfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pos_rfwk = { &pos_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfwk = { &off_rfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thrfwk = { &off_thrfwk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _loc_satcen_cm = { &loc_satcen_cm, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _loc_satcen_Hz = { &loc_satcen_Hz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _sat_thk_factor = { &sat_thk_factor,  0,  MAXFLOAT,  0.4,  0, 0, 0, 1, 1,  VIS,  "Ratio of Walk-Sat band thk over pFOV", 0, "" };

_cvfloat  _sep_sat_ratio = { &sep_sat_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _rfov_max_freq_shift = { &rfov_max_freq_shift,  0.0,  MAXFLOAT,  0.0,  0, 0, 0, 1, 1,  VIS,  "Maximum frequency offset(kHz) of the Reduced FOV RF pulse", 0, "" };


_cvint  _mux_flag = { &mux_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Multiband, 0:off 1:on", 0, "" };
_cvfloat  _mux_phase_step = { &mux_phase_step, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _thetarf2_flag = { &thetarf2_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "flag for using thetarf2 VERSE waveform", 0, "" };
_cvint  _use_omegatheta = { &use_omegatheta,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "flag for using omega/theta mod for rf2", 0, "" };
_cvint  _omegatheta_pol = { &omegatheta_pol,  -1,  1,  -1,  0, 0, 0, 1, 1,  VIS,  "polarity to apply to kz when using omega/theta mod for rf2", 0, "" };
_cvint  _rf2_isodelay = { &rf2_isodelay,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  VIS,  "isodelay for rf2", 0, "" };

_cvint  _mux_slquant = { &mux_slquant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _res_thetarf2 = { &res_thetarf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_res_gzrf2 = { &res_gzrf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_thetarf2 = { &pw_thetarf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_thetarf2 = { &ia_thetarf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarf2left = { &ia_thetarf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarf2right = { &ia_thetarf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_thetarf2a = { &pw_thetarf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf2d = { &pw_thetarf2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_thetarf2left = { &pw_thetarf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf2lefta = { &pw_thetarf2lefta, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf2leftd = { &pw_thetarf2leftd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_thetarf2right = { &pw_thetarf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf2righta = { &pw_thetarf2righta, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf2rightd = { &pw_thetarf2rightd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _verse_rf2 = { &verse_rf2,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "1=VERSE or 0=normal 180 pulse", 0, "" };
_cvint  _sltune_rf2 = { &sltune_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _mux_slices_rf2 = { &mux_slices_rf2,  1,  8,  2,  0, 0, 0, 1, 1,  VIS,  "Number of Multiband slices for RF2", 0, "" };
_cvint  _phase_cycle_rf2 = { &phase_cycle_rf2,  PSD_OFF,  PSD_ON,  PSD_ON,  0, 0, 0, 1, 1,  VIS,  "Phase cycle RF2", 0, "" };
_cvint  _mux_band_gap_warning_flag = { &mux_band_gap_warning_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _tbwp_rf1 = { &tbwp_rf1,  0, 32.0, 1.0,  0, 0, 0, 1, 1, VIS,  "Time Bandwidth product of Windowed Sinc function", 0, "" };
_cvint  _window_type_rf1 = { &window_type_rf1,  0, 5, 1,  0, 0, 0, 1, 1, VIS,  "0:None 1:Hamming 2:Hanning 3:Blackman 4:Bartlett 5:Gauss", 0, "" };
_cvfloat  _gauss_width_rf1 = { &gauss_width_rf1,  0.0,  100.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Gaussian width", 0, "" };

_cvint  _mux_slices_rf1 = { &mux_slices_rf1,  1,  8,  2,  0, 0, 0, 1, 1,  VIS,  "Number of Multiband slices for RF1", 0, "" };
_cvfloat  _mux_slice_shift_mm_rf1 = { &mux_slice_shift_mm_rf1,  0.0,  300.0,  30.0,  0, 0, 0, 1, 1,  VIS,  "offset to next multiplexed slice", 0, "" };


_cvint  _save_res_rf1 = { &save_res_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_tbwp_rf1 = { &save_tbwp_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_window_type_rf1 = { &save_window_type_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_gauss_width_rf1 = { &save_gauss_width_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_mux_slices_rf1 = { &save_mux_slices_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_mux_slice_shift_mm_rf1 = { &save_mux_slice_shift_mm_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_thk_rf1 = { &save_thk_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_mux_mode_rf1 = { &save_mux_mode_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dwell_rf_rf1 = { &dwell_rf_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _debug_mux_rf = { &debug_mux_rf,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Debug control for mux RF pulses", 0, "" };


_cvint  _multiband_fa_scaling_flag = { &multiband_fa_scaling_flag,  PSD_OFF,  PSD_ON,  PSD_ON,  0, 0, 0, 1, 1,  VIS,  "Scaling down flip angle if neccessary", 0, "" };
_cvfloat  _max_multiband_rf1_fa = { &max_multiband_rf1_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _max_multiband_rf2_fa = { &max_multiband_rf2_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _mux_rf1_scale = { &mux_rf1_scale,  0.0,  2.0,  1.0,  0, 0, 0, 1, 1,  INVIS,  "Scaling the nominal flip angle if neccessary", 0, "" };
_cvfloat  _mux_rf2_scale = { &mux_rf2_scale,  0.0,  2.0,  1.0,  0, 0, 0, 1, 1,  INVIS,  "Scaling the nominal flip angle if neccessary", 0, "" };


_cvint  _slice_fov_shift = { &slice_fov_shift,  0,  16,  0,  0, 0, 0, 1, 1,  VIS,  "FOV Shift for slice_fov_shift Gz Blip", 0, "" };
_cvint  _use_slice_fov_shift_blips = { &use_slice_fov_shift_blips,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Use slice_fov_shift Blips flag 0:off 1:on", 0, "" };
_cvfloat  _slice_fov_shift_area = { &slice_fov_shift_area,  0.0,  100000.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "Max area of slice_fov_shift Z blips in entire sequence", 0, "" };
_cvfloat  _slice_fov_shift_cycles = { &slice_fov_shift_cycles,  0.0,  100000.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "Number of cycles of phase between slices corresponding to max blip in entire sequence", 0, "" };
_cvint  _slice_fov_shift_blip_start = { &slice_fov_shift_blip_start,  0,  10,  0,  0, 0, 0, 1, 1,  VIS,  "slice_fov_shift Z blip starting point when past reference", 0, "" };
_cvint  _slice_fov_shift_blip_inc = { &slice_fov_shift_blip_inc,  0,  10,  1,  0, 0, 0, 1, 1,  VIS,  "slice_fov_shift Z blip increment when past reference", 0, "" };
_cvfloat  _factor_gz1 = { &factor_gz1,  0.0,  2.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Scaling factor for setting up gz1 area to accomodate slice_fov_shift first Z blip", 0, "" };
_cvfloat  _gzb_amp = { &gzb_amp,  -10.0,  10.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "Saved amplitude for gz blip ", 0, "" };
_cvint  _slice_fov_shift_extra_gap = { &slice_fov_shift_extra_gap,  -MAXINT, MAXINT,  0,  0, 0, 0, 1, 1,  VIS,  "Value of extra pw_gxgap: (pw_gz_blip - pw_gy_blip)", 0, "" };
_cvint  _slice_fov_shift_calc_new_esp = { &slice_fov_shift_calc_new_esp,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flag to update esp calculation with (pw_gz_blip -pw_gy_blip)", 0, "" };
_cvint  _slice_fov_shift_extra_gap_flag = { &slice_fov_shift_extra_gap_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flag to insert a gap between readout gradients (pw_gxgap)", 0, "" };

_cvfloat  _mux_min_verserf2_slthk = { &mux_min_verserf2_slthk,  MINTHICK,  MAXTHICK,  1.0,  0, 0, 0, 1, 1,  INVIS,  "Minimum slice thickness(mm) of Multiband verse rf2 pulse", 0, "" };





_cvint  _seqtime_t1flair = { &seqtime_t1flair, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _act_ti = { &act_ti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dda_t1flair = { &dda_t1flair, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dummyslices = { &dummyslices,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "dummy slices for T1flair", 0, "" };

_cvint  _autoti_model = { &autoti_model,  T1FLAIR_FIXED_T1_MODEL,  T2FLAIR_SINGLE_INV_MODEL,  T1FLAIR_EFFECTIVE_T1_MODEL,  0, 0, 0, 1, 1,  VIS,  "Model used for T1Flair / T2Flair auto TI calculation", 0, "" };


_cvint  _t1flair_autotr_flag = { &t1flair_autotr_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _t2flair_autotr_flag = { &t2flair_autotr_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _t1flair_seqtime_method = { &t1flair_seqtime_method,  ANALYTICAL_SEQTIME,  NUMERICAL_SEQTIME,  ANALYTICAL_SEQTIME,  0, 0, 0, 1, 1,  VIS,  "Sequence time calculation method: 0=analytical; 1=numerical", 0, "" };

_cvint  _tmin_total_acq_seq = { &tmin_total_acq_seq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tmin_total_ir = { &tmin_total_ir, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dtr1_tolerance = { &dtr1_tolerance, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dtr2_tolerance = { &dtr2_tolerance, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_slice_num_reduction = { &max_slice_num_reduction, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _t1flair_mint1 = { &t1flair_mint1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_t1flair_mint2 = { &t1flair_mint2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avminti_t1flair = { &avminti_t1flair, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avmaxti_t1flair = { &avmaxti_t1flair, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _debug_t1flairenh = { &debug_t1flairenh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _t1flair_chop_flag = { &t1flair_chop_flag,  0, 1, 0,  0, 0, 0, 1, 1, VISIBLE,  "Flag to turn on inter-slice chopping for T1Flair", 0, "" };
_cvint  _req_edge_slice_enh_flag = { &req_edge_slice_enh_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "request for edge slice enhancement", 0, "" };
_cvint  _act_edge_slice_enh_flag = { &act_edge_slice_enh_flag,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "actual flag for edge slice enhancement", 0, "" };
_cvint  _t1flair_slice_uniformity_flag = { &t1flair_slice_uniformity_flag,  0, 1, 1,  0, 0, 0, 1, 1, VISIBLE,  "t1flair slice uniformity enhancement", 0, "" };
_cvint  _force_odd_even_slquant = { &force_odd_even_slquant,  0, 2, 1,  0, 0, 0, 1, 1,  VISIBLE,  "0=Off; 1=ForceOddSliceNum; 2=ForceEvenSliceNum", 0, "" };
_cvint  _enht2flairacqs = { &enht2flairacqs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _enht2flair_highsort = { &enht2flair_highsort,  0, 1, 0,  0, 0, 0, 1, 1, VISIBLE,  "enh t2flair high sort view order  0 = off; 1= ON", 0, "" };
_cvint  _avmintr_autotr_t1flair = { &avmintr_autotr_t1flair, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _incinv = { &incinv, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _slquant_in_ti = { &slquant_in_ti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _act_esp = { &act_esp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _autotr_flair_debug = { &autotr_flair_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _T1FLAIR_MIN_TI = { &T1FLAIR_MIN_TI, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _T1FLAIR_MAX_TI = { &T1FLAIR_MAX_TI, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ir_prep_manual_tr_mode = { &ir_prep_manual_tr_mode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, " Flag for manual TR mode in DWI STIR", 0, "" };



_cvfloat  _asset_factor = { &asset_factor,  0,  1.0,  0,  0, 0, 0, 1, 1,  VIS,  "ASSET phase encoding reduction factor.", 0, "" };
_cvfloat  _assetsl_factor = { &assetsl_factor,  0,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "ASSET slice  encoding reduction factor.", 0, "" };
_cvint  _assetph_flag = { &assetph_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "ASSET phase acceleration flag .", 0, "" };
_cvint  _assetsl_flag = { &assetsl_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "ASSET slice acceleration flag .", 0, "" };
_cvint  _asset_supported_direction = { &asset_supported_direction,  
    ASSET_SUPPORT_PHASE, 
    ASSET_SUPPORT_SLICE, 
    ASSET_SUPPORT_PHASE,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET direction supported (phase OR slice)", 
0, "" };

_cvint  _fov_advisory_ignore_mslices = { &fov_advisory_ignore_mslices,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Flag to ignore advisory error on #slices in ASSET min FOV check.", 0, "" };




_cvint  _arc_research_flag = { &arc_research_flag,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "ARC Research flag: 0=OFF, 1=ON", 0, "" };
_cvint  _arc_split_method = { &arc_split_method,  0,  4,  0,  0, 0, 0, 1, 1,  VIS,  "0: NONE, 1: PHASE, 2: SLICE, 3: PHASE THEN SLICE, 4: SLICE THEN PHASE", 0, "" };
_cvint  _arc_fullbam_flag = { &arc_fullbam_flag,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "0: Compressed BAM, 1: Full BAM", 0, "" };

_cvint  _arc_extCal = { &arc_extCal,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Use External Calibration for ARC", 0, "" };


_cvint  _arc_ph_flag = { &arc_ph_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "ARC flag in phase direction", 0, "" };
_cvfloat  _arc_ph_factor = { &arc_ph_factor,  1.0/MAX_ACCEL,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC net acceleration factor in phase direction", 0, "" };
_cvfloat  _arc_ph_maxstride = { &arc_ph_maxstride,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Phase Max Outer Acceleration", 0, "" };
_cvfloat  _arc_ph_recstride = { &arc_ph_recstride,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Phase Recommended Outer Acceleration", 0, "" };
_cvfloat  _arc_ph_userstride = { &arc_ph_userstride,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Phase user prescribed outer acceleration", 0, "" };
_cvint  _arc_ph_stride = { &arc_ph_stride,  1,  MAX_ACCEL,  1,  0, 0, 0, 1, 1,  VIS,  "ARC Phase Outer Acceleration", 0, "" };
_cvfloat  _arc_ph_maxnetaccel = { &arc_ph_maxnetaccel,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Phase Max Net Acceleration", 0, "" };
_cvfloat  _arc_ph_recnetaccel = { &arc_ph_recnetaccel,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Phase Recommended Net Acceleration", 0, "" };
_cvint  _arc_ph_acs = { &arc_ph_acs,  8,  2048,  12,  0, 0, 0, 1, 1,  VIS,  "Number of ACS lines for ARC", 0, "" };
_cvint  _arc_ph_acs_min = { &arc_ph_acs_min,  8,  24,  12,  0, 0, 0, 1, 1,  VIS,  "Minimum # of ACS lines for ARC in phase direction", 0, "" };
_cvint  _arc_ph_fullencode = { &arc_ph_fullencode,  16,  2048,  256,  0, 0, 0, 1, 1,  VIS,  "ky lines without ARC or fn", 0, "" };
_cvint  _arc_ph_spanned = { &arc_ph_spanned,  1,  2048,  256,  0, 0, 0, 1, 1,  VIS,  "ky lines with fn, but not ARC", 0, "" };
_cvint  _arc_ph_acquired = { &arc_ph_acquired,  1,  2048,  128,  0, 0, 0, 1, 1,  VIS,  "ky lines acquired with ARC and fn,", 0, "" };
_cvint  _arc_ph_intaccel = { &arc_ph_intaccel,  0, 1, 1,  0, 0, 0, 1, 1, INVIS, "ARC Phase Integer acceleration", 0, "" };


_cvint  _arc_ph_halfnex = { &arc_ph_halfnex,  0,  2048,  1,  0, 0, 0, 1, 1,  VIS,  "ARC halfnex # of views", 0, "" };
_cvint  _arc_ph_hnover = { &arc_ph_hnover,  0,  1024,  1,  0, 0, 0, 1, 1,  VIS,  "ARC # of view over halfnex", 0, "" };
_cvint  _arc_ph_minover = { &arc_ph_minover,  8,  24,  12,  0, 0, 0, 1, 1,  VIS,  "ARC minimum # of overscan for 1/2 NEX", 0, "" };


_cvint  _arc_sl_flag = { &arc_sl_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "ARC flag in slice direction", 0, "" };
_cvfloat  _arc_sl_factor = { &arc_sl_factor,  1.0/MAX_ACCEL,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC net acceleration factor in phase direction", 0, "" };
_cvfloat  _arc_sl_maxstride = { &arc_sl_maxstride,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Slice Max Outer Acceleration", 0, "" };
_cvfloat  _arc_sl_recstride = { &arc_sl_recstride,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Slice Recommended Outer Acceleration", 0, "" };
_cvfloat  _arc_sl_userstride = { &arc_sl_userstride,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Slice user prescribed outer acceleration", 0, "" };
_cvint  _arc_sl_stride = { &arc_sl_stride,  1,  MAX_ACCEL,  1,  0, 0, 0, 1, 1,  VIS,  "ARC Phase Outer Acceleration", 0, "" };
_cvfloat  _arc_sl_maxnetaccel = { &arc_sl_maxnetaccel,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Slice Max Net Acceleration", 0, "" };
_cvfloat  _arc_sl_recnetaccel = { &arc_sl_recnetaccel,  1.0,  MAX_ACCEL,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC Slice Recommended Net Acceleration", 0, "" };
_cvint  _arc_sl_acs = { &arc_sl_acs,  8,  MAXSLQUANT3D,  12,  0, 0, 0, 1, 1,  VIS,  "Number of ACS lines for ARC Z", 0, "" };
_cvint  _arc_sl_acs_min = { &arc_sl_acs_min,  8,  24,  12,  0, 0, 0, 1, 1,  VIS,  "Minimum # of ACS lines for ARC in slice direction", 0, "" };
_cvint  _arc_sl_fullencode = { &arc_sl_fullencode,  1,  MAXSLQUANT3D,  128,  0, 0, 0, 1, 1,  VIS,  "kz lines without ARC or fn", 0, "" };
_cvint  _arc_sl_spanned = { &arc_sl_spanned,  1,  MAXSLQUANT3D,  128,  0, 0, 0, 1, 1,  VIS,  "kz lines with pfkz, but not ARC", 0, "" };
_cvint  _arc_sl_acquired = { &arc_sl_acquired,  1,  MAXSLQUANT3D,  64,  0, 0, 0, 1, 1,  VIS,  "kz lines acquired with ARC and fn,", 0, "" };
_cvint  _arc_sl_intaccel = { &arc_sl_intaccel,  0, 1, 1,  0, 0, 0, 1, 1, INVIS, "ARC Slice Integer acceleration", 0, "" };


_cvint  _arc_sl_halfnex = { &arc_sl_halfnex,  0,  2048,  1,  0, 0, 0, 1, 1,  VIS,  "ARC halfnex # of slices", 0, "" };
_cvint  _arc_sl_hnover = { &arc_sl_hnover,  0,  1024,  1,  0, 0, 0, 1, 1,  VIS,  "ARC # of slice over halfnex", 0, "" };
_cvint  _arc_sl_minover = { &arc_sl_minover,  8,  24,  12,  0, 0, 0, 1, 1,  VIS,  "ARC minimum # of overscan for 1/2 NEX in slice direction", 0, "" };
_cvfloat  _arc_sl_fn = { &arc_sl_fn,  0.5,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "ARC slice fn", 0, "" };
_cvint  _arc_kx_peak_pos = { &arc_kx_peak_pos,  0,  2048,  1,  0, 0, 0, 1, 1,  VIS,  "Echo peak position in kx direction", 0, "" };
_cvint  _arc_ky_peak_pos = { &arc_ky_peak_pos,  -1,  2048,  -1,  0, 0, 0, 1, 1,  VIS,  "Echo peak position in ky direction", 0, "" };

_cvint  _arc_syn_pts = { &arc_syn_pts,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "Number of points to be synthesized by ARC", 0, "" };

_cvint  _ARCKey = { &ARCKey, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _readmonloc = { &readmonloc, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _loopdelay = { &loopdelay,  1000, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "sequence time for the dummy loop", 0, "" };
_cvint  _loopdelay2 = { &loopdelay2,  1000, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "sequence time for the dummy loop", 0, "" };
_cvint  _navgs = { &navgs,  0, MAXINT, 20,  0, 0, 0, 1, 1, VIS, "number of averages for the Multiple Average filter", 0, "" };
_cvfloat  _sigma1 = { &sigma1,  0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "threshold number of sds ", 0, "" };
_cvfloat  _sigma2 = { &sigma2,  0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "threshold number of sds ", 0, "" };
_cvint  _savedata = { &savedata,  0, 1, 1,  0, 0, 0, 1, 1, VIS, " 1 for save rawdata, 0 don't", 0, "" };
_cvint  _max_avg_time = { &max_avg_time,  20000, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "maximum monitor time", 0, "" };
_cvfloat  _monloc_shift = { &monloc_shift,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "extra shift in slice location during monitor", 0, "" };
_cvint  _tracker_quant = { &tracker_quant,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "number of tracker", 0, "" };

_cvint  _acq_data_only = { &acq_data_only,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "collect data but don't trigger", 0, "" };

_cvint  _mon_tr = { &mon_tr,  0, MAXINT, 20000,  0, 0, 0, 1, 1, INVIS,  "tr during monitor phase of smart prep", 0, "" };
_cvint  _smartprep_flag = { &smartprep_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "smart prep flag 0-disable, 1-enable", 0, "" };
_cvint  _min_delay_time = { &min_delay_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "minimum delay time after trigger.", 0, "" };
_cvint  _num_audibles = { &num_audibles,  0, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "number of z loops for audible flag.", 0, "" };
_cvint  _audible_loop = { &audible_loop, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _data_type = { &data_type,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "data collection type: 0=integrate echo, 1=integrate fft echo", 0, "" };
_cvint  _save_fft = { &save_fft, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _swap_monplane = { &swap_monplane,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Swap mon. plane log. phase and freq", 0, "" };
_cvint  _swap_mon_zy = { &swap_mon_zy,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Swap mon. plane log. phase and slice (if rotated off coronal)", 0, "" };
_cvint  _detector_mode = { &detector_mode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "write last fft factor.0=off, 1=write smrtp.dat", 0, "" };
_cvfloat  _fov_factor = { &fov_factor,  0.0, 1.0, 1.0,  0, 0, 0, 1, 1, VIS,  "factor to reduce fov by for tracking", 0, "" };
_cvint  _nav_angle_adj = { &nav_angle_adj,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Adjust nav planes flag", 0, "" };
_cvfloat  _mon_angle = { &mon_angle,  -90.0, 90.0, 0.0,  0, 0, 0, 1, 1, VIS,  "angle between the original plane and the new plane", 0, "" };
_cvfloat  _nav_tipup_ratio = { &nav_tipup_ratio,  1.0, 3.0, 2.0,  0, 0, 0, 1, 1, VIS,  "slice ratio for navigator tipup rf", 0, "" };


_cvint  _cylr_rf_type = { &cylr_rf_type,  0, (NUM_CYLR_RF_TYPE-1), 0,  0, 0, 0, 1, 1, INVIS, "Cylindrical RF type", 0, "" };
_cvint  _pw_rfcylr = { &pw_rfcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_rfcylr = { &ia_rfcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfcylr = { &a_rfcylr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thcylr = { &pw_thcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_thcylr = { &ia_thcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_thcylr = { &a_thcylr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gycylr = { &pw_gycylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_gycylr = { &ia_gycylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gycylr = { &a_gycylr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcylr = { &pw_gzcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_gzcylr = { &ia_gzcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcylr = { &a_gzcylr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfcylrtipup = { &pw_rfcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_rfcylrtipup = { &ia_rfcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfcylrtipup = { &a_rfcylrtipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thcylrtipup = { &pw_thcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_thcylrtipup = { &ia_thcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_thcylrtipup = { &a_thcylrtipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gycylrtipup = { &pw_gycylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_gycylrtipup = { &ia_gycylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gycylrtipup = { &a_gycylrtipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcylrtipup = { &pw_gzcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_gzcylrtipup = { &ia_gzcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcylrtipup = { &a_gzcylrtipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _min_delay_sec = { &min_delay_sec, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _delay_dda = { &delay_dda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _delay_quiet_dda = { &delay_quiet_dda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _total_quiet_dda = { &total_quiet_dda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtpend_quiet_dda = { &rtpend_quiet_dda,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "quiet dda for rtpend call", 0, "" };
_cvint  _delay_quiet_time = { &delay_quiet_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_monrot = { &debug_monrot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_monrotphi = { &debug_monrotphi, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_monloc = { &debug_monloc, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _transpose_monloc = { &transpose_monloc, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _write_spinfo = { &write_spinfo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _oblique_monplane = { &oblique_monplane, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _monitor_axis = { &monitor_axis, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _theta = { &theta, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ta_180sp = { &ta_180sp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tb_180sp = { &tb_180sp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_te_180sp = { &te_180sp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_montr = { &min_montr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tlead_monitor = { &tlead_monitor, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tlead_montipup = { &tlead_montipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_mon_ssi_time = { &mon_ssi_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _non_tetime_mon = { &non_tetime_mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tmin_mon = { &tmin_mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tmin_montipup = { &tmin_montipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rda_mon = { &rda_mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _minseqcoilmon_t = { &minseqcoilmon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvmon_t = { &minseqgrddrvmon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvxmon_t = { &minseqgrddrvxmon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvymon_t = { &minseqgrddrvymon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvzmon_t = { &minseqgrddrvzmon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcablemon_t = { &minseqcablemon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqbusbarmon_t = { &minseqbusbarmon_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_seqsarmon = { &max_seqsarmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_seqrfampmon = { &min_seqrfampmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _monnewgeo = { &monnewgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _monobl_debug = { &monobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for monitor obloptimize", 0, "" };
_cvint  _monobl_method = { &monobl_method,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
		        "On(=1) to optimize the targets based on actual monitor rotation matrices", 0, "" };

_cvint  _monitor_page = { &monitor_page,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 = Use monitor page", 0, "" };


_cvfloat  _monave_sar = { &monave_sar, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_monpeak_sar = { &monpeak_sar, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _moncave_sar = { &moncave_sar, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _mon_xres = { &mon_xres,  128, 256, 128,  0, 0, 0, 1, 1, VIS, "No. of freq samples in monitor acquisition.", 0, "" };
_cvfloat  _rf1mon_shift = { &rf1mon_shift,  -9999.0, 9999.0, 0, 0, 0, 0, 1, 1, VIS, "offset location of rf1 monintor +RAS", 0, "" };
_cvfloat  _rf2mon_shift = { &rf2mon_shift,  -9999.0, 9999.0, 0, 0, 0, 0, 1, 1, VIS, "offset location of rf2 monintor +RAS", 0, "" };
_cvint  _bw_rf1mon = { &bw_rf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_bw_rf2mon = { &bw_rf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_bw_rfmontipup = { &bw_rfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _mon_fov = { &mon_fov,  5.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "monitor image field of view in mm", 0, "" };
_cvfloat  _mon_acqfov = { &mon_acqfov,  80.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "monitor image field of view acquired in mm", 0, "" };
_cvfloat  _echo1monbw = { &echo1monbw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _mon_vthickz = { &mon_vthickz,  5.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "monitor slab z thickness", 0, "" };
_cvfloat  _mon_vthicky = { &mon_vthicky,  5.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "monitor slab y thickness", 0, "" };
_cvfloat  _mon_vthick = { &mon_vthick,  5.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "monitor slab yz thickness", 0, "" };
_cvfloat  _area_gzkmon = { &area_gzkmon,  0, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  " Area of z killer pulse in monitor.", 0, "" };
_cvfloat  _area_gzkmontipup = { &area_gzkmontipup,  0, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  " Area of z killer pulse in monitor tipup.", 0, "" };
_cvint  _mon_fcomp = { &mon_fcomp,  0, 1, 0, 0, 0, 0, 1, 1, VIS, "1=flow comp monitor, 0= don't flow comp", 0, "" };
_cvfloat  _fnecho_frac = { &fnecho_frac,  0.5, 1.5, 0, 0, 0, 0, 1, 1, INVIS, "mon echo fractional echo", 0, "" };
_cvint  _monitor_test = { &monitor_test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _get_fullecho = { &get_fullecho, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _numpts2pass = { &numpts2pass, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _reverse_views = { &reverse_views,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "reverse phase order for frac. NEX ", 0, "" };
_cvint  _mon_trigger_delay = { &mon_trigger_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _smartprep_was_on = { &smartprep_was_on, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _scanclocktime = { &scanclocktime, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _mon_dabdelay = { &mon_dabdelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xres2use = { &xres2use, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_avg_bline = { &num_avg_bline, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_throwaways = { &num_throwaways, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_baseline_pts = { &num_baseline_pts, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _tmpbw1 = { &tmpbw1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _debug_sp_rtp = { &debug_sp_rtp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_sp_agp = { &debug_sp_agp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cerdtype = { &cerdtype,  -MAXINT, MAXINT, 002,  0, 0, 0, 1, 1, VISONLY, "CV for cfcerdtype", 0, "" };

_cvint  _mon_run_setrcvportimm = { &mon_run_setrcvportimm,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "run setrcvport code or not, 0 no, 1 yes", 0, "" };


_cvint  _sprep_save_raw_data = { &sprep_save_raw_data,  0, 1000, 0,  0, 0, 0, 1, 1, VIS, "SmartPrep save raw data flag 0.disable, 1 - 999 save upto 999 frames, 1000 save all rawdata frames", 0, "" };
_cvint  _sprep_debug_flag = { &sprep_debug_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0= no debug prints on RTP side, 1= Enable debug prints on RTP side", 0, "" };
_cvint  _sprep_timing_flag = { &sprep_timing_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 = Enable round-trip timing measurements, 0= disable timing measurements", 0, "" };


_cvint  _rtpresultwait = { &rtpresultwait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _navend_time = { &navend_time,  0, 100000, 20000,  0, 0, 0, 1, 1, INVIS, "wait time before nav for Navigator Signal Enhancement", 0, "" };
_cvint  _nav_dual_mode = { &nav_dual_mode,  0, 1, 1,  0, 0, 0, 1, 1, INVIS, "dual navigator gating (1), single(0)", 0, "" };

_cvint  _nav_irprep_flag = { &nav_irprep_flag,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "flag for FAST IR PREP option in efgre3d", 0, "" };
_cvint  _nav_tseq_irprep = { &nav_tseq_irprep,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Sequence time for the prep section in efgre3d", 0, "" };
_cvint  _nav_min_tseq_irprep = { &nav_min_tseq_irprep,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Minimum Sequence time for the prep section in efgre3d", 0, "" };

_cvint  _pw_nomcyl = { &pw_nomcyl,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1,  VIS, " nominal pulse width, spiral pulse", 0, "" };
_cvfloat  _a_nomcyl = { &a_nomcyl,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1,  VIS, " nominal gradient ampl, spiral pulse", 0, "" };

_cvint  _smartPrepEdrFlag = { &smartPrepEdrFlag,  0, 1, 1,  0, 0, 0, 1, 1,  INVIS,  "EDR enable flag for SmartPrep", 0, "" };

_cvint  _slabtracking_flag = { &slabtracking_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Navigator with slab tracking", 0, "" };
_cvint  _corr_mode = { &corr_mode,  1, 2, 2,  0, 0, 0, 1, 1,  VIS,  
      "Correction mode: 1=LR/AP/SI is fraction of LR/AP/SI disp, 2=LR/AP/SI is fraction of SI disp only", 0, "" };

_cvfloat  _corr_factor_z = { &corr_factor_z,  0.0, 1.0, 0.6,  0, 0, 0, 1, 1,  VIS,  
      "Correction factor between diaphagmic motion and top heart motion in SI(z)", 0, "" };
_cvfloat  _corr_factor_y = { &corr_factor_y,  0.0, 1.0, 0.0,  0, 0, 0, 1, 1,  VIS,  
      "Correction factor between diaphagmic motion and top heart motion in AP(y)", 0, "" };
_cvfloat  _corr_factor_x = { &corr_factor_x,  0.0, 1.0, 0.0,  0, 0, 0, 1, 1,  VIS,  
      "Correction factor between diaphagmic motion and top heart motion in LR(x)", 0, "" };

_cvint  _corr_x = { &corr_x,  0, 1, 1,  0, 0, 0, 1, 1,  INVIS,  
      "Frequency(x) direction phase baseline correction: 1=ON, 0=OFF", 0, "" };
_cvint  _corr_y = { &corr_y,  0, 1, 1,  0, 0, 0, 1, 1,  INVIS,  
      "Phase(y) direction phase baseline correction: 1=ON, 0=OFF", 0, "" };
_cvint  _corr_z = { &corr_z,  0, 1, 1,  0, 0, 0, 1, 1,  INVIS,  
      "Slice(z) direction phase baseline correction: 1=ON, 0=OFF", 0, "" };




_cvint  _fixed_acqs_debug = { &fixed_acqs_debug,  DEBUG_NONE, DEBUG_DEV, DEBUG_NONE,  0, 0, 0, 1, 1, VIS, "Auto Adjustr TR debugging information", 0, "" };
_cvint  _sl_acq = { &sl_acq,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS,  "Slices/Acq for user selected Acqs for AutominTR", 0, "" };
_cvint  _sl_acq_val2 = { &sl_acq_val2,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS,  "Slices/Acq for n-1 Acqs for AutominTR", 0, "" };
_cvint  _sl_acq_val3 = { &sl_acq_val3,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS,  "Slices/Acq for n Acqs for AutominTR", 0, "" };
_cvint  _sl_acq_val4 = { &sl_acq_val4,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS,  "Slices/Acq for n+1 Acqs for AutominTR", 0, "" };
_cvint  _tr_acq = { &tr_acq,  1, MAXINT, 10000,  0, 0, 0, 1, 1, VIS,  "tr for user selected Acqs for AutominTR ", 0, "" };
_cvint  _tr_acq_val2 = { &tr_acq_val2,  1, MAXINT, 10000,  0, 0, 0, 1, 1, VIS,  "tr for n-1 acq for AutominTR", 0, "" };
_cvint  _tr_acq_val3 = { &tr_acq_val3,  1, MAXINT, 10000,  0, 0, 0, 1, 1, VIS,  "tr for n acq for AutominTR", 0, "" };
_cvint  _tr_acq_val4 = { &tr_acq_val4,  1, MAXINT, 10000,  0, 0, 0, 1, 1, VIS,  "tr for n+1 acq for AutominTR", 0, "" };
_cvint  _tr_limit = { &tr_limit,  0, 100, 30,  0, 0, 0, 1, 1, VIS, "TR overspill in %, limit will be decided later", 0, "" };
_cvint  _temp_trval = { &temp_trval,  1, MAXINT, 10000,  0, 0, 0, 1, 1, VIS,  "store pitrval2 in this temp cv", 0, "" };
_cvint  _temp_tmin_total = { &temp_tmin_total,  1, MAXINT, 10000,  0, 0, 0, 1, 1, VIS,  "store pitrval3 in this temp cv", 0, "" };
_cvint  _keep_opti = { &keep_opti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _rtb0_flag = { &rtb0_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "flag to turn on/off B0drift monitoring", 0, "" };
_cvint  _rtb0_enable = { &rtb0_enable,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "RTB0 enabling status: 0=not enabled, 1=enabled", 0, "" };
_cvint  _rtb0_support = { &rtb0_support,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "RTB0 correction support flag: 0=not support, 1=support", 0, "" };
_cvint  _rtb0_first_skip = { &rtb0_first_skip,  0, 50, 20,  0, 0, 0, 1, 1, INVIS, "number of points skipped in the begining", 0, "" };
_cvint  _rtb0_last_skip = { &rtb0_last_skip,  0, 50, 20,  0, 0, 0, 1, 1, INVIS, "number of points skipped in the end", 0, "" };
_cvint  _rtb0_movAvg = { &rtb0_movAvg,  1, 30, 5,  0, 0, 0, 1, 1, INVIS, "number of points used for moving average", 0, "" };
_cvint  _rtb0_min_points = { &rtb0_min_points,  5, MAXINT, 10,  0, 0, 0, 1, 1, INVIS, "min number of points used for RTP processing", 0, "" };
_cvint  _rtb0DebugFlag = { &rtb0DebugFlag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0SaveRaw = { &rtb0SaveRaw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0_phase_method = { &rtb0_phase_method,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "RTB0 phase estimation: 0=Ahn, 1=LSQ", 0, "" };
_cvint  _rtb0_coil_combine = { &rtb0_coil_combine,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "RTB0 coil combine: 0=Peak channel only, 1=phase estimate first, 2=coil combine first", 0, "" };
_cvint  _rtb0_timing_flag = { &rtb0_timing_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 = round-trip timing measurements, 0= disable timing measurements", 0, "" };


_cvint  _rtb0dummy_time = { &rtb0dummy_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0fittingwaittime = { &rtb0fittingwaittime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0resultwaittime = { &rtb0resultwaittime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0fittingwaittimeLoop = { &rtb0fittingwaittimeLoop, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0dummyseq = { &rtb0dummyseq,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Play dummy seq prior to RTP init()", 0, "" };


_cvint  _rtb0_comp_flag = { &rtb0_comp_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Flag to realtime b0 drift compensation", 0, "" };
_cvint  _rtb0_acq_delay = { &rtb0_acq_delay,  0, MAXINT, 2000,  0, 0, 0, 1, 1, VIS,  "Delay time of realtime b0 drift acquisition", 0, "" };
_cvint  _rtb0_minintervalb4acq = { &rtb0_minintervalb4acq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0_r1_delta = { &rtb0_r1_delta,  0, 13, 2,  0, 0, 0, 1, 1, VIS,  "R1 reduced for rtb0 acquisition", 0, "" };
_cvint  _pw_dynr1 = { &pw_dynr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0_filter_cf_flag = { &rtb0_filter_cf_flag,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Flag to filter center frequency along slice", 0, "" };
_cvint  _rtb0_recvphase_comp_flag = { &rtb0_recvphase_comp_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Flag to slice receive phase compensation", 0, "" };
_cvint  _rtb0_comp_debug_flag = { &rtb0_comp_debug_flag,  -1,  1,  0,  0, 0, 0, 1, 1,  VIS,  "dtb0 phase compensation debug flag", 0, "" };
_cvfloat  _rtb0_cfoffset_debug = { &rtb0_cfoffset_debug, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0_slice_shift = { &rtb0_slice_shift,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "Slice offset for RTB0 peak channel selection (0=use 1st slice)", 0, "" };


_cvint  _cf_interpolation = { &cf_interpolation,  0, 4, 4,  0, 0, 0, 1, 1, VIS,  "Center frequency Interpolation method: 0=median, 1=linear fit, 2=quadratic fit, 3=3rd order fit, 4=smooth with keep edge", 0, "" };
_cvfloat  _rtb0_max_range = { &rtb0_max_range,  -1000.0, 1000.0, 300.0,  0, 0, 0, 1, 1, VIS,  "Maximum +/- range of RTB0 CF offset correction [Hz]", 0, "" };
_cvint  _rtb0_rejectnoise = { &rtb0_rejectnoise,  0, 2, 0,  0, 0, 0, 1, 1, VIS,  "RTB0 method to reject noisy data (0=OFF, 1=setMagToZero, 2=setCFToMaxRange)", 0, "" };
_cvint  _rtb0_smooth_kernel_size = { &rtb0_smooth_kernel_size,  0, DATA_ACQ_MAX, 5,  0, 0, 0, 1, 1, VIS,  "Smoothing kernel size for CF smoothing (use odd integer)", 0, "" };
_cvint  _rtb0_smooth_cf_flag = { &rtb0_smooth_cf_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Flag to smooth center frequency along slice", 0, "" };
_cvint  _rtb0_median_kernel_size = { &rtb0_median_kernel_size,  0, 13, 3,  0, 0, 0, 1, 1, VIS,  "Median kernel size for CF median filtering (use odd integer)", 0, "" };
_cvint  _rtb0_min_kernel_keep_edge = { &rtb0_min_kernel_keep_edge,  1, 5, 1,  0, 0, 0, 1, 1, VIS,  "Minimum kernel size for CF smooth with keep edge filtering (use odd integer)", 0, "" };
_cvfloat  _rtb0_max_kernel_percent = { &rtb0_max_kernel_percent,  0.0, 100.0, 50.0,  0, 0, 0, 1, 1, VIS,  "Percent of slice coverage to use as Maximum kernel size for CF smooth with keep edge filtering", 0, "" };
_cvint  _rtb0_max_kernel_keep_edge = { &rtb0_max_kernel_keep_edge,  0, 99, 1,  0, 0, 0, 1, 1, VIS,  "Maximum kernel size for CF smooth with keep edge filtering (use odd integer)", 0, "" };
_cvint  _rtb0_confidence_method = { &rtb0_confidence_method,  0, 2, 1,  0, 0, 0, 1, 1, VIS,  "Thresholding method for RTB0 slice interpolation: 0=do not threshold, 1=linear fit residual, 2=stddev across channels", 0, "" };
_cvfloat  _rtb0_cfstddev_threshold = { &rtb0_cfstddev_threshold,  0.0, 300.0, 100.0,  0, 0, 0, 1, 1, VIS,  "Cutoff threshold for CF Stddev across channels to identify slices with high confidence [Hz]", 0, "" };
_cvfloat  _rtb0_cfresidual_threshold = { &rtb0_cfresidual_threshold,  0.0, 300.0, 100.0,  0, 0, 0, 1, 1, VIS,  "Cutoff threshold for CF Linear fit residual to identify slices with high confidence [Hz]", 0, "" };
_cvfloat  _rtb0_confidence_thresh_val = { &rtb0_confidence_thresh_val,  0.0, 300.0, 100.0,  0, 0, 0, 1, 1, VIS,  "Cutoff threshold as determined by rtb0_confidence_method used to identify slices with high confidence [Hz]", 0, "" };
_cvint  _rtb0_gzrf0_off = { &rtb0_gzrf0_off,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Whether to turn off Gz for IR pulse if it is in rtb0 loop", 0, "" };
_cvint  _rtb0_spsp_flag = { &rtb0_spsp_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "WBI mode for broadband SPSP. Enable this will turn d_cf from 50Hz to 0 for SPSP2 pulses.", 0, "" };
_cvint  _rtb0_dda = { &rtb0_dda,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  INVIS,  "number of disdaqs in RTB0 loop",  0, ""};
_cvint  _rtb0_debug = { &rtb0_debug,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Debug Flag for RTB0: print CF to file & print status in AGP window", 0, "" };


_cvint  _rtb0_midsliceindex = { &rtb0_midsliceindex,  -1, MAXINT, -1,  0, 0, 0, 1, 1,  VIS,  "Index of middle slice (-1: all slices)", 0, "" };
_cvfloat  _rtb0_outlier_threshold = { &rtb0_outlier_threshold,  0.0, MAXFLOAT, 10.0,  0, 0, 0, 1, 1, VIS,  "CF offset outlier threshold in one TR (Hz)", 0, "" };
_cvfloat  _rtb0_outlier_duration = { &rtb0_outlier_duration,  0.0, MAXFLOAT, 30.0,  0, 0, 0, 1, 1, VIS,  "CF offste outlier duration (s)", 0, "" };
_cvint  _rtb0_outlier_nTRs = { &rtb0_outlier_nTRs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _focus_eval_oscil = { &focus_eval_oscil,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "flag of oscillation of cveval on FOCUS", 0, "" };
_cvint  _focus_eval_oscil_hist = { &focus_eval_oscil_hist,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "History flag of oscillation of cveval on FOCUS", 0, "" };
_cvint  _isPredownload = { &isPredownload,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0:cveval 1:predownload", 0, "" };
_cvint  _keep_focus_eval_oscil = { &keep_focus_eval_oscil,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "Flag to keep focus_eval_oscil", 0, "" };
_cvint  _reset_oscil_in_eval = { &reset_oscil_in_eval,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to reset focus_eval_oscil in cveval()", 0, "" };
_cvint  _force_acqs = { &force_acqs,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "Forced acq", 0, "" };
_cvint  _force_avmaxslquant = { &force_avmaxslquant,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "Forced avmaxslquant", 0, "" };
_cvint  _oscil_eval_count = { &oscil_eval_count, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _optr_save = { &optr_save,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "optr_tr in previous cveval", 0, "" };
_cvint  _opslquant_save = { &opslquant_save,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS, "opslquant in previous cveval", 0, "" };
_cvint  _save_avmintr = { &save_avmintr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_pitracqval4 = { &save_pitracqval4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _res_gd1 = { &res_gd1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gd2 = { &res_gd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gd1 = { &pw_gd1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gd2 = { &pw_gd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _a_gxdl = { &a_gxdl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxdr = { &a_gxdr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ia_gxdl = { &ia_gxdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdr = { &ia_gxdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _res_gxdl = { &res_gxdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gxdr = { &res_gxdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gxdr = { &pw_gxdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl = { &pw_gxdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _wg_gxdr = { &wg_gxdr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };
_cvint  _wg_gxdl = { &wg_gxdl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_gydl = { &a_gydl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gydr = { &a_gydr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ia_gydl = { &ia_gydl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydr = { &ia_gydr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _res_gydl = { &res_gydl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gydr = { &res_gydr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gydr = { &pw_gydr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl = { &pw_gydl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _wg_gydr = { &wg_gydr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };
_cvint  _wg_gydl = { &wg_gydl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_gzdl = { &a_gzdl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzdr = { &a_gzdr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ia_gzdl = { &ia_gzdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdr = { &ia_gzdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _res_gzdl = { &res_gzdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzdr = { &res_gzdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gzdr = { &pw_gzdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl = { &pw_gzdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _wg_gzdr = { &wg_gzdr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };
_cvint  _wg_gzdl = { &wg_gzdl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxdla = { &a_gxdla, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxdld = { &a_gxdld, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxdra = { &a_gxdra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxdrd = { &a_gxdrd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdla = { &ia_gxdla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdld = { &ia_gxdld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdra = { &ia_gxdra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdrd = { &ia_gxdrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gxdla = { &pw_gxdla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdld = { &pw_gxdld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdra = { &pw_gxdra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdrd = { &pw_gxdrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gydla = { &a_gydla, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gydld = { &a_gydld, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gydra = { &a_gydra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gydrd = { &a_gydrd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydla = { &ia_gydla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydld = { &ia_gydld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydra = { &ia_gydra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydrd = { &ia_gydrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gydla = { &pw_gydla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydld = { &pw_gydld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydra = { &pw_gydra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydrd = { &pw_gydrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _a_gzdla = { &a_gzdla, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzdld = { &a_gzdld, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzdra = { &a_gzdra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzdrd = { &a_gzdrd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdla = { &ia_gzdla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdld = { &ia_gzdld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdra = { &ia_gzdra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdrd = { &ia_gzdrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gzdla = { &pw_gzdla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdld = { &pw_gzdld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdra = { &pw_gzdra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdrd = { &pw_gzdrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _num_passdelay = { &num_passdelay,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS, "number of pass delay sequence", 0, "" };

_cvint  _use_maxloggrad = { &use_maxloggrad,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "use maxgrad for dwi traditional sampling scheme", 0, "" };
_cvint  _max_grad = { &max_grad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _scale_dif = { &scale_dif, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _debug_core = { &debug_core,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to enable logging scancore data", 0, "" };
_cvint  _debug_unitTest = { &debug_unitTest,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to enable logging unit test data", 0, "" };


_cvfloat  _taratio = { &taratio,  0.0, 0.90005, 0.0,  0, 0, 0, 1, 1, VIS,  "Minimal top area ratio in readout gradient", 0, "" };
_cvint  _rampopt = { &rampopt,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1: enable ramp sampling optimization", 0, "" };


_cvfloat  _totarea = { &totarea, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _actratio = { &actratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _dpc_flag = { &dpc_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Flag for dynamic phase correction", 0, "" };
_cvint  _sndpc_flag = { &sndpc_flag,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Flag for self-navigated dynamic phase correction", 0, "" };
_cvint  _iref_etl = { &iref_etl,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "Internal reference echoes for dynamic phase correction", 0, "" };
_cvint  _iref_frames = { &iref_frames, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tot_etl = { &tot_etl,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS, "total echo train length including interref echoes", 0, "" };
_cvint  _pw_gxiref1_tot = { &pw_gxiref1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxiref_tot = { &pw_gxiref_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxirefr_tot = { &pw_gxirefr_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _MinFram2FramTime = { &MinFram2FramTime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _maxslice_per_ti = { &maxslice_per_ti,  0, 1000, 0,  0, 0, 0, 1, 1, VIS, "Slices fit in one TI period", 0, "" };
_cvint  _invseqtime = { &invseqtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _false_acqs = { &false_acqs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _false_slquant1 = { &false_slquant1,  0, SLTAB_MAX, 1,  0, 0, 0, 1, 1, INVIS, "# of locs in first pass for flair", 0, "" };
_cvint  _max_slice_ti = { &max_slice_ti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flair_min_tr = { &flair_min_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dda_packb = { &dda_packb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dda_pack = { &dda_pack, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dda_packe = { &dda_packe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dda_passb = { &dda_passb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dda_pass = { &dda_pass, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _deadlast = { &deadlast, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tmp_deadlast = { &tmp_deadlast, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _phase_dither = { &phase_dither,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS,  "B0 phase dither value (degrees)", 0, "" };
_cvint  _spgr_flag = { &spgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "SPGR flag", 0, "" };

_cvint  _rhhnover_max = { &rhhnover_max, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rhhnover_min = { &rhhnover_min, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rhhnover_min_per_ilv = { &rhhnover_min_per_ilv, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _newyres = { &newyres, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_overscan = { &num_overscan, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _smart_numoverscan = { &smart_numoverscan,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "flag for smart number of over-scan lines", 0, "" };

_cvint  _avmintefull = { &avmintefull,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "Minimum te with full ky coverage", 0, "" };
_cvint  _cvrefindex1 = { &cvrefindex1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gx1_area = { &gx1_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avmintetemp = { &avmintetemp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fast_rec = { &fast_rec,   0,  1,  0,  0, 0, 0, 1, 1,  VIS, 
 "receiver selected: 0=standard recvr, 1=fast recvr", 0, "" };





_cvint  _bl_acq_tr1 = { &bl_acq_tr1,  1000, 6000000,  10000,  0, 0, 0, 1, 1,  MODIFIABLE, "Fast Baseline acquisition sequence length", 0, "" };
_cvint  _bl_acq_tr2 = { &bl_acq_tr2,  1000, 6000000,  100000,  0, 0, 0, 1, 1,  MODIFIABLE, "Baseline acquisition sequence length", 0, "" };

_cvfloat  _fecho_factor = { &fecho_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _tsp = { &tsp,   1.0,  1000.0,  2,  0, 0, 0, 1, 1,  VIS,  "Sampling period (1us).", 0, "" };
_cvint  _intleaves = { &intleaves,   1, 256,  1,  0, 0, 0, 1, 1, VIS, "Interleaves to get yres.", 0, "" };

_cvint  _ky_dir = { &ky_dir,  0, 2, 2,  0, 0, 0, 1, 1, VIS, "Ky samp dir:0=top/down,1=cent/out,2=bottom/up", 0, "" };
_cvint  _kx_dir = { &kx_dir,  0, 3, 0,  0, 0, 0, 1, 1, VIS, "Kx samp dir:0=same,1=alt w/intleave,2=halfset,3=quarterset.", 0, "" };

_cvint  _dc_chop = { &dc_chop,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Receiver phase chop flag: 1=on,0=off", 0, "" };






_cvint  _etot = { &etot,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Total echoes required to feed MPS.", 0, "" };
_cvint  _emid = { &emid,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "1st echo right of TE midpoint.", 0, "" };
_cvint  _e1st = { &e1st,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "1st echo to turn on.", 0, "" };

_cvint  _seq_data = { &seq_data,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0=std sorting,1=time seq order.", 0, "" };

_cvfloat  _msamp = { &msamp,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "Default echo shift, samp per, +=R,-=L.", 0, "" };
_cvfloat  _dsamp = { &dsamp,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "Delta echo shift, samp per, +=R,-=L.", 0, "" };
_cvfloat  _delpw = { &delpw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _num_dif = { &num_dif,  0, 4, 0,  0, 0, 0, 1, 1, VIS, "Number of diffusion axis.", 0, "" };
_cvint  _incr = { &incr,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Diff grad auto increment:0=off,1=on.", 0, "" };
_cvint  _df_encode = { &df_encode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "diffusion encoding", 0, "" };
_cvint  _i_bval = { &i_bval,  0, 18, 0,  0, 0, 0, 1, 1, VIS, "Number intermediate b values", 0, "" };
_cvint  _df_refscn = { &df_refscn,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Dif ref scan select", 0, "" };
_cvint  _dwi_fphases = { &dwi_fphases, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_slice_dfaxall = { &max_slice_dfaxall, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dualspinecho_flag = { &dualspinecho_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "flag for Dual Spin Echo", 0, "" };


_cvint  _derate_amp = { &derate_amp,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Derate Dif. Amp. for heating calcs", 0, "" };

_cvfloat  _scale_difx = { &scale_difx,  0.0, 1.0, 1.0,  0, 0, 0, 1, 1, VIS, "Derate Factor for X Dif. Amp. for heating calcs", 0, "" };

_cvfloat  _scale_dify = { &scale_dify,  0.0, 1.0, 0.0,  0, 0, 0, 1, 1, VIS, "Derate Factor for Y&Z Dif. Amp. for heating calcs", 0, "" };
_cvfloat  _scale_difz = { &scale_difz,  0.0, 1.0, 0.0,  0, 0, 0, 1, 1, VIS, "Derate Factor for Y&Z Dif. Amp. for heating calcs", 0, "" };
_cvint  _unbalanceCrusher = { &unbalanceCrusher,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Unbalance crushers for DSE", 0, "" };
_cvfloat  _crusherFactorLeft = { &crusherFactorLeft,  0.1, 8.0, 1.0,  0, 0, 0, 1, 1, VIS, "Crusher factor for Left 180 in DSE", 0, "" };
_cvfloat  _crusherFactorRight = { &crusherFactorRight,  0.1, 8.0, 2.0,  0, 0, 0, 1, 1, VIS, "Crusher factor for Right 180 in DSE", 0, "" };


_cvint  _invertSliceSelectZ = { &invertSliceSelectZ,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Invert SliceSel Grad and Z Crusher based on polarity of Diff Grad: 1=on,0=off", 0, "" };

_cvint  _invertSliceSelectZ2 = { &invertSliceSelectZ2,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Invert SliceSel Grad and Z Crusher based on polarity of Z Crusher: 1=on,0=off", 0, "" };


_cvint  _xygradRightCrusherFlag = { &xygradRightCrusherFlag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Turns on X,Y Grad Crusher for Right 180 in DSE", 0, "" };
_cvint  _xygradLeftCrusherFlag = { &xygradLeftCrusherFlag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Turns on X,Y Grad Crusher for Left 180 in DSE", 0, "" };
_cvint  _xygradCrusherFlag = { &xygradCrusherFlag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Turns on X,Y Grad Crusher for non-DSE", 0, "" };


_cvint  _invertCrusherXY = { &invertCrusherXY,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Invert XY Grad Crushers based on polarity of Diff Grad: 1=on, 0=0ff", 0, "" };

_cvint  _ssgr_mux = { &ssgr_mux,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Slice Select Gradient Reversal for MultiBand: 0-off, 1-on", 0, "" };
_cvint  _ssgr_flag = { &ssgr_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Slice Select Gradient Reversal: 0-off, 1-on", 0, "" };
_cvint  _ssgr_bw_update = { &ssgr_bw_update,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flag for BW update for SSGR: 0-off, 1-on", 0, "" };
_cvint  _freqSign_rf2right = { &freqSign_rf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _freqSign_rf2left = { &freqSign_rf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _freqSign_rf2 = { &freqSign_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _fat_cs = { &fat_cs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _rf1_bw_ratio = { &rf1_bw_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _rf2_bw_ratio = { &rf2_bw_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _b0_offset = { &b0_offset, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _RightCrusherLSlop = { &RightCrusherLSlop,  0,  MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Add'l time for X,Y crushers", 0, "" };
_cvint  _RightCrusherRSlop = { &RightCrusherRSlop,  0,  MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Add'l time for X,Y crushers", 0, "" };
_cvint  _LeftCrusherLSlop = { &LeftCrusherLSlop,  0,  MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Add'l time for X,Y crushers", 0, "" };
_cvint  _LeftCrusherRSlop = { &LeftCrusherRSlop,  0,  MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Add'l time for X,Y crushers", 0, "" };
_cvint  _CrusherRSlop = { &CrusherRSlop,  0,  MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Add'l time for X,Y crushers", 0, "" };
_cvint  _CrusherLSlop = { &CrusherLSlop,  0,  MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Add'l time for X,Y crushers", 0, "" };

_cvint  _epi2spec_mode = { &epi2spec_mode,  0,  MAXINT, 0,  0, 0, 0, 1, 1,  INVIS,  "flag to activate sepc mode", 0, "" };

_cvint  _weighted_avg_grad = { &weighted_avg_grad,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "weight gradients on weighted avg.", 0, "" };
_cvint  _weighted_avg_debug = { &weighted_avg_debug,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "weighted avg. debug flag", 0, "" };


_cvfloat  _DELTAx = { &DELTAx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _DELTAy = { &DELTAy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _DELTAz = { &DELTAz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _deltax = { &deltax, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _deltay = { &deltay, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _deltaz = { &deltaz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };





_cvfloat  _a_gx_dwi = { &a_gx_dwi, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gy_dwi = { &a_gy_dwi,  -0.1, 0.1, 0.0,  0, 0, 0, 1, 1, VIS, "phase-encoding grad correction", 0, "" };

_cvfloat  _a_gz_dwi = { &a_gz_dwi,  -0.1, 0.1, 0.0,  0, 0, 0, 1, 1, VIS, "slice grad correction", 0, "" };


_cvfloat  _freq_dwi = { &freq_dwi,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS, "frequency offset for DWI", 0, "" };


_cvfloat  _phase_dwi = { &phase_dwi,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS, "phase offset for DWI", 0, "" };


_cvint  _ia_gx_dwi = { &ia_gx_dwi, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy_dwi = { &ia_gy_dwi, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz_dwi = { &ia_gz_dwi, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dwicntrl = { &dwicntrl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dwidebug = { &dwidebug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tmp_ileave = { &tmp_ileave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tmp_ygrad_sw = { &tmp_ygrad_sw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _t4_tmp = { &t4_tmp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvfloat  _incdifx = { &incdifx,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "X diffusion grad step size, g/cm.", 0, "" };
_cvfloat  _incdify = { &incdify,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "Y diffusion grad step size, g/cm.", 0, "" };
_cvfloat  _incdifz = { &incdifz,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "Z diffusion grad step size, g/cm.", 0, "" };
_cvint  _ia_incdifx = { &ia_incdifx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_incdify = { &ia_incdify, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_incdifz = { &ia_incdifz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _waveform_type = { &waveform_type, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ide_max_bval = { &ide_max_bval, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _sde_max_bval = { &sde_max_bval, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _bincr = { &bincr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _invthick = { &invthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xerror = { &xerror, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_yerror = { &yerror, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_zerror = { &zerror, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _obl_3in1_opt_debug = { &obl_3in1_opt_debug, 
 0, 1, 0,  0, 0, 0, 1, 1, VIS, "oblique 3in1 improvement debugging flag,0:Off 1:On", 0, "" };
_cvint  _obl_3in1_opt = { &obl_3in1_opt, 
 0, 1, 0,  0, 0, 0, 1, 1, VIS, "oblique 3in1 improvement flag", 0, "" };
_cvfloat  _norot_incdifx = { &norot_incdifx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _norot_incdify = { &norot_incdify, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _norot_incdifz = { &norot_incdifz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_mpg_inv = { &target_mpg_inv, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_mpg = { &target_mpg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amp_difx_bverify = { &amp_difx_bverify, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_amp_dify_bverify = { &amp_dify_bverify, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_amp_difz_bverify = { &amp_difz_bverify, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _different_mpg_amp_flag = { &different_mpg_amp_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _act_acqs = { &act_acqs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_acqs = { &min_acqs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _maxslq_titime = { &maxslq_titime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _maxslq_ilir = { &maxslq_ilir, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _epi_flair = { &epi_flair,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Epi flair on=1, off=0", 0, "" };
_cvint  _flair_flag = { &flair_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dda_fact = { &dda_fact, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _reps = { &reps,  1, 2000, 1,  0, 0, 0, 1, 1, VIS, "# scan repetitions.", 0, "" };
_cvint  _pass_reps = { &pass_reps,  1, 2000, 1,  0, 0, 0, 1, 1, VIS, "# pass repetitions.", 0, "" };
_cvint  _max_dsht = { &max_dsht,  1, 256, 8,  0, 0, 0, 1, 1, VIS, "# diff grad amps in increment cycle.", 0, "" };
_cvint  _avg_at_loc = { &avg_at_loc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0=don't avg,1=avg over reps.", 0, "" };

_cvint  _filtfix = { &filtfix,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1=apply asym filter fix,0=don't.", 0, "" };
_cvint  _rf_chop = { &rf_chop,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=chop RF for intleaves>1,0=don't.", 0, "" };


_cvint  _rftype = { &rftype,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=extern rfpulse, 0=sinc rfpulse", 0, "" };
_cvint  _thetatype = { &thetatype,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1=play extern theta pulse, 0=no theta", 0, "" };
_cvint  _gztype = { &gztype,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=extern grad, 0=create by macro", 0, "" };

_cvint  _hsdab = { &hsdab,  0, 2, 1,  0, 0, 0, 1, 1, VIS, "0=std dab packets,1=EPI dab packets, 2-EPI DIFF dab packets.", 0, "" };
_cvint  _slice_num = { &slice_num,  1, DATA_ACQ_MAX, 1,  0, 0, 0, 1, 1, VIS, "slice number within rep.", 0, "" };
_cvint  _rep_num = { &rep_num,  1, 256, 1,  0, 0, 0, 1, 1, VIS, "rep number within total reps.", 0, "" };

_cvint  _endview_iamp = { &endview_iamp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_scale = { &endview_scale, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _gx1pos = { &gx1pos,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "gx1 placement: 0=pre-180, 1=post-180.", 0, "" };
_cvint  _gy1pos = { &gy1pos,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "gy1 placement: 0=pre-180, 1=post-180.", 0, "" };

_cvint  _eosxkiller = { &eosxkiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos x killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eosykiller = { &eosykiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos y killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eoszkiller = { &eoszkiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos z killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eoskillers = { &eoskillers,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eosrhokiller = { &eosrhokiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos rho killer pulses: 0=off, 1=on.", 0, "" };

_cvint  _gyctrl = { &gyctrl,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "GY control: 1=on, 0=off", 0, "" };
_cvint  _gxctrl = { &gxctrl,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "GX control: 1=on, 0=off.", 0, "" };
_cvint  _gzctrl = { &gzctrl,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "GZ control: 1=on, 0=off.", 0, "" };

_cvint  _ygmn_type = { &ygmn_type, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _zgmn_type = { &zgmn_type, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rampsamp = { &rampsamp,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0=flat top sampling,1=VRGF ramp sampling.", 0, "" };
_cvint  _final_xres = { &final_xres,  0, 1024, 0,  0, 0, 0, 1, 1, VIS, "Final VRGF frequency direction resolution.", 0, "" };
_cvint  _autovrgf = { &autovrgf,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=vrgf program called automatically in predownload, 0=manual mode.", 0, "" };
_cvfloat  _vrgf_targ = { &vrgf_targ,  0.2, 16.0, 2.0,  0, 0, 0, 1, 1, VIS, "vrgf oversampling ratio target value.", 0, "" };
_cvint  _vrgf_reorder = { &vrgf_reorder,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=vrgf->PC (new), 0=PC->vrgf (old)", 0, "" };

_cvfloat  _fbhw = { &fbhw,  0.0, 1.0, 1.0,  0, 0, 0, 1, 1, VIS, "Fraction of blip half width excluded from sampling.", 0, "" };


_cvint  _osamp = { &osamp,  0, 1024, 0,  0, 0, 0, 1, 1, VIS, "Fractional echo oversamples.", 0, "" };

_cvint  _etl = { &etl,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS, "echo train length", 0, "" };
_cvint  _eesp = { &eesp,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "effective echo spacing", 0, "" };
_cvint  _nblips = { &nblips, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_blips2cent = { &blips2cent, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ep_alt = { &ep_alt,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "Alt read sign:0=no,1=odd/evn,2=halves,3=pairs", 0, "" };

_cvint  _tia_gx1 = { &tia_gx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tia_gxw = { &tia_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tia_gxk = { &tia_gxk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tia_gxiref1 = { &tia_gxiref1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tia_gxirefr = { &tia_gxirefr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ta_gxwn = { &ta_gxwn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _rbw = { &rbw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avminxa = { &avminxa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminxb = { &avminxb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminx = { &avminx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminya = { &avminya, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminyb = { &avminyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminy = { &avminy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avminza = { &avminza, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminzb = { &avminzb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminz = { &avminz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminssp = { &avminssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _avminfovx = { &avminfovx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminfovy = { &avminfovy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _hrdwr_period = { &hrdwr_period,  4  , 128  , 32  ,  0, 0, 0, 1, 1, VIS, "Hardware specific base period.", 0, "" };
_cvint  _samp_period = { &samp_period,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "sample period generated by epigradopt.", 0, "" };
_cvint  _pwmin_gap = { &pwmin_gap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _frqx = { &frqx,  0.0, 1000.0, 200.0,  0, 0, 0, 1, 1, VIS, "Kx sampling freq peak (KHz).", 0, "" };
_cvfloat  _frqy = { &frqy,  0.0, 1000.0, 2.0,  0, 0, 0, 1, 1, VIS, "Ky sampling freq peak (KHz).", 0, "" };

_cvint  _dacq_offset = { &dacq_offset,  0, MAXINT, 14  ,  0, 0, 0, 1, 1, VIS,  "dacq packet offset relative to gxw (us)", 0, "" };

_cvint  _pepolar = { &pepolar,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1= flip phase encoding polarity, 0=don't.", 0, "" };
_cvint  _rpg_flag = { &rpg_flag,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "0=Off, 1=Reverse PG then Forward, 2=Forward PG then Reverse", 0, "" };

_cvint  _rpg_in_scan_flag = { &rpg_in_scan_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1=Collect RPG (and FPG if needed) volume behind user's back by adding paases.", 0, "" };

_cvint  _rpg_in_scan_num = { &rpg_in_scan_num,  0, 10, 1,  0, 0, 0, 1, 1, VIS, "Number of extra passes for distortion correction.", 0, "" };

_cvint  _tdaqhxa = { &tdaqhxa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tdaqhxb = { &tdaqhxb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xdiff_time1 = { &xdiff_time1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xdiff_time2 = { &xdiff_time2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ydiff_time1 = { &ydiff_time1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ydiff_time2 = { &ydiff_time2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _zdiff_time1 = { &zdiff_time1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_zdiff_time2 = { &zdiff_time2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _delt = { &delt, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _T1eff = { &T1eff, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _bcoeff = { &bcoeff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _aspir_auto_ti_model = { &aspir_auto_ti_model, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _tfon = { &tfon,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Time shift interleaves:0=off,1=on.", 0, "" };

_cvint  _fract_ky = { &fract_ky,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Fractional ky space acquisition flag:0=off,1=on", 0, "" };
_cvfloat  _ky_offset = { &ky_offset,  -256, 256, 0,  0, 0, 0, 1, 1, VIS, "# Ky lines to offset echo peak, -=early, +=later", 0, "" };
_cvfloat  _gy1_offset = { &gy1_offset,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS,  "gy1 dephaser area difference for ky shift", 0, "" };


_cvint  _satdelay = { &satdelay,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Delay between last SAT and 90", 0, "" };

_cvint  _sp_sattype = { &sp_sattype,  0,  2,  0,  0, 0, 0, 1, 1,  VIS,  "Spatial Sat Type: 0=Light, 1=Medium, 2=Strong", 0, "" };

_cvint  _td0 = { &td0,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _t_exa = { &t_exa,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from start of 90 to mid 90", 0, "" };
_cvint  _te_time = { &te_time,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, " te * opnecho ", 0, "" };
_cvint  _pos_start = { &pos_start,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Start time for sequence. ", 0, "" };
_cvint  _pos_start_init = { &pos_start_init,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Initial start time for sequence. ", 0, "" };
_cvint  _post_echo_time = { &post_echo_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "time from te to end of seq", 0, "" };
_cvint  _psd_tseq = { &psd_tseq,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  " intersequence delay time for cardiac", 0, "" };
_cvint  _time_ssi = { &time_ssi,  0, MAXINT, 8000  ,  0, 0, 0, 1, 1, INVIS, "time from eos to ssi in intern trig", 0, "" };

_cvfloat  _dacq_adjust = { &dacq_adjust,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "dacq starting time fine tuning adjustment", 0, "" };

_cvint  _watchdogcount = { &watchdogcount, 1, 15, 2,  0, 0, 0, 1, 1, INVIS, "Pulsegen execution time (x5sec) b/4 timeout", 0, "" };
_cvint  _dabdelay = { &dabdelay,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Extra time for dab packet (negative is more)", 0, "" };
_cvint  _tlead = { &tlead,  0, MAXINT, 25  ,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _act_tr = { &act_tr,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "actual tr", 0, "" };
_cvint  _rfconf = { &rfconf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ctlend = { &ctlend,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "card deadtime when next slice in intern gated", 0, "" };
_cvint  _dda = { &dda,  0, MAXINT, 4,  0, 0, 0, 1, 1, INVIS, " number of disdaqs in scan (not pairs)", 0, "" };
_cvint  _debug = { &debug,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 if debug is on ", 0, "" };
_cvint  _debug_dbdt = { &debug_dbdt,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to debug dbdtderate() ", 0, "" };
_cvint  _debugipg = { &debugipg,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 if debugipg is on ", 0, "" };
_cvint  _debugepc = { &debugepc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on exciter phase debug", 0, "" };
_cvint  _debugdither = { &debugdither,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on b0dither debug", 0, "" };
_cvint  _debugdelay = { &debugdelay,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on delay debug", 0, "" };
_cvint  _dex = { &dex,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "num of discarded excitations", 0, "" };
_cvint  _gating = { &gating,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "gating - TRIG_INTERN, TRIG_LINE, etc.", 0, "" };
_cvint  _ipg_trigtest = { &ipg_trigtest,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "if 0 use internal trig always", 0, "" };

_cvint  _gxktime = { &gxktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "x Killer Time.", 0, "" };
_cvint  _gyktime = { &gyktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "y Killer Time.", 0, "" };
_cvint  _gzktime = { &gzktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "z Killer Time.", 0, "" };
_cvint  _gktime = { &gktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Max Killer Time.", 0, "" };
_cvint  _gkdelay = { &gkdelay,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Time to delay killers from end of readout train.", 0, "" };

_cvfloat  _scanbw = { &scanbw,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "Scan filter bw. in KHz", 0, "" };
_cvint  _scanslot = { &scanslot,  0, 7, 4,  0, 0, 0, 1, 1, VIS,  "Scan filter slot number", 0, "" };


_cvfloat  _a_lcrush_cfh = { &a_lcrush_cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gxw = { &area_gxw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gx1 = { &area_gx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_readramp = { &area_readramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_r1 = { &area_r1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gz1 = { &area_gz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gzrf2l1 = { &area_gzrf2l1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_r1_cfh = { &area_r1_cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_std = { &area_std, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_stde = { &area_stde, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _avail_pwgz1 = { &avail_pwgz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _prescan1_tr = { &prescan1_tr,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "1st pass prescan time", 0, "" };
_cvint  _ps2_dda = { &ps2_dda,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Number of disdaq in 2nd pass prescan.", 0, "" };
_cvint  _avail_pwgx1 = { &avail_pwgx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_image_time = { &avail_image_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _beg_nontetime = { &beg_nontetime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pos_start_rf0 = { &pos_start_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _beg_nontitime = { &beg_nontitime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_se_time = { &avail_se_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_tdaqhxa = { &avail_tdaqhxa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _full_irtime = { &full_irtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_yflow_time = { &avail_yflow_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_zflow_time = { &avail_zflow_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _nviews = { &nviews, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _test_getecg = { &test_getecg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _premid_rf90 = { &premid_rf90,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1,  INVIS, "Time from beg. of seq. to mid 90",  0, "" };

_cvfloat  _c1_scale = { &c1_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_c2_scale = { &c2_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _crusher_cycles = { &crusher_cycles, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _max_seqtime = { &max_seqtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_slicesar = { &max_slicesar, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_seqsar = { &max_seqsar, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _myrloc = { &myrloc,  0, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Value for scan_info[0].oprloc", 0, "" };
_cvint  _other_slice_limit = { &other_slice_limit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _target_area = { &target_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _start_amp = { &start_amp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _end_amp = { &end_amp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pre_pass = { &pre_pass,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "prescan slice pass number", 0, "" };
_cvint  _nreps = { &nreps,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "number of sequences played out", 0, "" };


_cvfloat  _xmtaddScan = { &xmtaddScan, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _rfscale = { &rfscale,  -MAXFLOAT, MAXFLOAT, 1.0,  0, 0, 0, 1, 1, INVIS, "Rf pulse width scaling factor", 0, "" };


_cvint  _rfExIso = { &rfExIso, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _frq2sync_dly = { &frq2sync_dly,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Time from begin of frq to sync phase", 0, "" };
_cvfloat  _rf1_phase = { &rf1_phase,  0.0, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, INVIS, "Relative phase of 90 in cyc", 0, "" };
_cvfloat  _rf2_phase = { &rf2_phase,  0.0, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, INVIS, "Relative phase of 180 in cyc", 0, "" };
_cvint  _hrf1a = { &hrf1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_hrf1b = { &hrf1b, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _hrf2a = { &hrf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_hrf2b = { &hrf2b, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _innerVol = { &innerVol,  0,  0,  0,  0, 0, 0, 1, 1,  VIS,  "Inner volume flag", 0, "" };
_cvfloat  _ivslthick = { &ivslthick,  1, FOV_MAX_EPI2*FOV_MAX_SCALE, 480,  0, 0, 0, 1, 1, VIS,  "Inner Volume Slice thickness in mm.", 0, "" };


_cvint  _psd_mantrig = { &psd_mantrig,  0, 1, 0,  0, 0, 0, 1, 1,  INVIS,  "manual trigger override", 0, "" };
_cvint  _trig_mps2 = { &trig_mps2,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  VIS,  " mps2 trigger", 0, "" };
_cvint  _trig_aps2 = { &trig_aps2,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  VIS,  " aps2 trigger", 0, "" };
_cvint  _trig_scan = { &trig_scan,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  VIS,  " scan trigger", 0, "" };
_cvint  _trig_prescan = { &trig_prescan,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  INVIS,  "prescan trigger", 0, "" };
_cvint  _read_truncate = { &read_truncate,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Truncate extra readout on fract echo", 0, "" };

_cvint  _tmin_flair = { &tmin_flair, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _trigger_time = { &trigger_time,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Time for cardiac trigger window", 0, "" };
_cvint  _use_myscan = { &use_myscan,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "On(=1) to use my scan setup", 0, "" };


_cvint  _t_postreadout = { &t_postreadout, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _initnewgeo = { &initnewgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _obl_debug = { &obl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "On(=1) to print messages for obloptimize_epi", 0, "" };
_cvint  _obl_method = { &obl_method,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "1=optimal, 0=to force targets to worst case", 0, "" };
_cvint  _debug_order = { &debug_order,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "On(=1) to print data acq order table", 0, "" };
_cvint  _debug_tdel = { &debug_tdel,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "On(=1) to print ihtdeltab table", 0, "" };
_cvint  _debug_scan = { &debug_scan,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "On(=1) to print scan & rsp info tables", 0, "" };
_cvint  _postsat = { &postsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _order_routine = { &order_routine,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  " slice ordering routine", 0, "" };
_cvint  _scan_offset = { &scan_offset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dither_control = { &dither_control, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dither_value = { &dither_value,  0, 15, 6,  0, 0, 0, 1, 1, VIS,  "Value for dither", 0, "" };

_cvint  _slquant_per_trig = { &slquant_per_trig,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "slices in first pass or slices in first R-R for XRR scans", 0, "" };

_cvint  _non_tetime = { &non_tetime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _slice_size = { &slice_size, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_bamslice = { &max_bamslice, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _rf2PulseType = { &rf2PulseType, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _bw_rf1 = { &bw_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_bw_rf2 = { &bw_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1 = { &a_gx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1 = { &ia_gx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1a = { &pw_gx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1d = { &pw_gx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1 = { &pw_gx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _single_ramp_gx1d = { &single_ramp_gx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _area_gy1 = { &area_gy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _area_gyb = { &area_gyb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_omega = { &a_omega, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omega = { &ia_omega, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _bline_time = { &bline_time, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _scan_time = { &scan_time, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _t1flair_disdaq_time = { &t1flair_disdaq_time, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gx1_tot = { &pw_gx1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1_tot = { &pw_gy1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1_tot = { &pw_gymn1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_gymn2_tot = { &pw_gymn2_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gyb_tot_0thmoment = { &gyb_tot_0thmoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gyb_tot_1stmoment = { &gyb_tot_1stmoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gz1_tot = { &pw_gz1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1_tot = { &pw_gzrf2l1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1_tot = { &pw_gzrf2r1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1_tot_bval = { &pw_gzrf2l1_tot_bval, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l2_tot_bval = { &pw_gzrf2l2_tot_bval, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1_tot_bval = { &pw_gzrf2r1_tot_bval, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r2_tot_bval = { &pw_gzrf2r2_tot_bval, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dab_offset = { &dab_offset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtr_offset = { &xtr_offset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rcvr_ub_off = { &rcvr_ub_off, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _temprhfrsize = { &temprhfrsize, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_wgxdl = { &pw_wgxdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgxdr = { &pw_wgxdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgydl = { &pw_wgydl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgydr = { &pw_wgydr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgzdl = { &pw_wgzdl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgzdr = { &pw_wgzdr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_wgxdl1 = { &pw_wgxdl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgxdr1 = { &pw_wgxdr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgydl1 = { &pw_wgydl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgydr1 = { &pw_wgydr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgzdl1 = { &pw_wgzdl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgzdr1 = { &pw_wgzdr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_wgxdl2 = { &pw_wgxdl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgxdr2 = { &pw_wgxdr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgydl2 = { &pw_wgydl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgydr2 = { &pw_wgydr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgzdl2 = { &pw_wgzdl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_wgzdr2 = { &pw_wgzdr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _zeromoment = { &zeromoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _firstmoment = { &firstmoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _zeromomentsum = { &zeromomentsum, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _firstmomentsum = { &firstmomentsum, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pulsepos = { &pulsepos, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _invertphase = { &invertphase, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _xtarg = { &xtarg,  0.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "EPI read train logical x target", 0, "" };
_cvfloat  _ytarg = { &ytarg,  0.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "EPI read train logical y target", 0, "" };
_cvfloat  _ztarg = { &ztarg,  0.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "EPI read train logical z target", 0, "" };

_cvint  _ditheron = { &ditheron,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=use b0 values from /usr/g/caldir/b0_dither.cal, 0=don't", 0, "" };
_cvfloat  _dx = { &dx,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS,  "phys X dither in deg (dx shift to + readout, -dx shift to -", 0, "" };
_cvfloat  _dy = { &dy,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS,  "phys Y dither in deg (dy shift to + readout, -dy shift to -", 0, "" };
_cvfloat  _dz = { &dz,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS,  "phys Z dither in deg (dz shift to + readout, -dz shift to -", 0, "" };


_cvint  _b0calmode = { &b0calmode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1=enable dwepiq mode, 0=disabled", 0, "" };

_cvint  _slice_reset = { &slice_reset,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Perform multi-slice at single location, 0=off,1=on", 0, "" };
_cvfloat  _slice_loc = { &slice_loc,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "Slice offset (mm), when slice_reset=1.", 0, "" };

_cvint  _delayon = { &delayon,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=use delay values from /usr/g/caldir/dealy.dat, 0=don't", 0, "" };


_cvint  _gxdelay = { &gxdelay,  -1000, 1000, -40  ,  0, 0, 0, 1, 1, VIS, "X grad delay (us).", 0, "" };
_cvint  _gydelay = { &gydelay,  -1000, 1000, -40  ,  0, 0, 0, 1, 1, VIS, "Y grad delay (us).", 0, "" };


_cvfloat  _gldelayx = { &gldelayx,  -10000 , 10000 ,  0.0,  0, 0, 0, 1, 1, VIS, "Logic delay (us).", 0, "" };
_cvfloat  _gldelayy = { &gldelayy,  -10000 , 10000 ,  0.0,  0, 0, 0, 1, 1, VIS, "Logic delay (us).", 0, "" };
_cvfloat  _gldelayz = { &gldelayz,  -10000 , 10000 ,  0.0,  0, 0, 0, 1, 1, VIS, "Logic delay (us).", 0, "" };
_cvfloat  _pckeeppct = { &pckeeppct,  0.0,  100.0,  100.0,  0, 0, 0, 1, 1,  VIS, "Percentange of post-RFT array to use in phase correction", 0, "" };
_cvint  _pkt_delay = { &pkt_delay,  0, 1000, 0,  0, 0, 0, 1, 1, VIS, "Hrdwr Delay between RBA & 1st Sample Acquired (us).", 0, "" };


_cvint  _mph_flag = { &mph_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "on(=1) flag for FAST Multi-Phase option", 0, "" };
_cvint  _acqmode = { &acqmode,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "acq. mode, 0=interleave, 1=sequential", 0, "" };
_cvint  _max_phases = { &max_phases,  0, 512, 0, 0, 0, 0, 1, 1, INVIS, "Maximum number of phases", 0, "" };
_cvint  _opslquant_old = { &opslquant_old,  1, SLTAB_MAX, 1,  0, 0, 0, 1, 1, VISONLY,  "Slice quantity", 0, "" };
_cvint  _piphases = { &piphases,  0, 512, 0, 0, 0, 0, 1, 1, INVIS, "Number of phases", 0, "" };


_cvint  _reqesp = { &reqesp,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Requested echo spacing: 0=auto, nonzero=explicit", 0, "" };
_cvint  _autogap = { &autogap,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "1:auto set read gap = blip duration, 0:don't, 2:compute dB/dt sep.", 0, "" };
_cvint  _minesp = { &minesp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _fft_xsize = { &fft_xsize,  0, 1024, 0,  0, 0, 0, 1, 1, VIS,  "Row FT size", 0, "" };
_cvint  _fft_ysize = { &fft_ysize,  0, 1024, 0,  0, 0, 0, 1, 1, VIS,  "Column FT size", 0, "" };
_cvint  _image_size = { &image_size,  0, 1024, 0,  0, 0, 0, 1, 1, VIS,  "Image size", 0, "" };


_cvfloat  _xtr_rba_time = { &xtr_rba_time,  -MAXFLOAT, MAXFLOAT, XTRSETLNG + XTR_TAIL,  0, 0, 0, 1, 1, VIS,  "phase accumulation interval for off-center FOV (usec)", 0, "" };
_cvfloat  _frtime = { &frtime,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "read window phase accumulation interval for off-center FOV (usec)", 0, "" };
_cvint  _readpolar = { &readpolar,  -1, 1, 1,  0, 0, 0, 1, 1, VIS,  "readout gradient base polarity: 1=positive, -1=negative.", 0, "" };
_cvint  _blippolar = { &blippolar,  -1, 1, 1,  0, 0, 0, 1, 1, VIS, "blipo gradient base polarity: 1=positive, -1=negative.", 0, "" };


_cvint  _ref_mode = { &ref_mode,  0, 2, 0,  0, 0, 0, 1, 1, VIS,  "ref scan type: 0=all slices, 1=loop to center slice, 2=center slice only", 0, "" };
_cvint  _refnframes = { &refnframes,  1, YRES_MAX, 256,  0, 0, 0, 1, 1, INVIS, "# of recon frames for ref scan.", 0, "" };




_cvint  _ref_with_xoffset = { &ref_with_xoffset,  -1, 1, 1,  0, 0, 0, 1, 1, VIS,  "Ref Correction: 0=off, 1 = include freq offset x.", 0, "" };
_cvint  _noRefPrePhase = { &noRefPrePhase,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Turn off ref.dat linear pre-correction ", 0, "" };
_cvint  _setDataAcqDelays = { &setDataAcqDelays,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Turn On SSP delays (0 = no setperiod() in core)", 0, "" };
_cvint  _refSliceNum = { &refSliceNum,  -1, 256, -1,  0, 0, 0, 1, 1, VIS,  "Spatial Ref Scan Slc (0=all,-1=isocenter slc)", 0, "" };

_cvint  _core_shots = { &core_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _disdaq_shots = { &disdaq_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pass_shots = { &pass_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _passr_shots = { &passr_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pass_time = { &pass_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _scan_deadtime = { &scan_deadtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gxwl1 = { &pw_gxwl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwl2 = { &pw_gxwl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwr1 = { &pw_gxwr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwr2 = { &pw_gxwr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw_total = { &pw_gxw_total,  0000, MAXINT, 0000,  0, 0, 0, 1, 1, VIS,  "pw_gxwl + pw_gxw + pw_gxwr", 0, "" };

_cvint  _pass_delay = { &pass_delay,  0  , MAXINT, 1  ,  0, 0, 0, 1, 1, VIS,  "ssp delay prior to sending pass packet", 0, "" };

_cvint  _nshots_locks = { &nshots_locks,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "1=lockout opnshots<min_nshots, 0=allow all opnshots values.", 0, "" };
_cvint  _min_nshots = { &min_nshots,  1, MUSE_MAX_NSHOTS, 1,  0, 0, 0, 1, 1, VIS,  "Minimum number of shots allowed.", 0, "" };
_cvint  _max_nshots = { &max_nshots,  1, MUSE_MAX_NSHOTS, 1,  0, 0, 0, 1, 1, VIS,  "Maximum number of shots allowed.", 0, "" };


_cvfloat  _da_gyboc = { &da_gyboc,  0.0, 2.2, 0.0,  0, 0, 0, 1, 1, VIS,  "Tweaking value for a_gyboc.", 0, "" };


_cvfloat  _oc_fact = { &oc_fact,  -10.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "Multiplication factor for a_gyboc.", 0, "" };
_cvint  _oblcorr_on = { &oblcorr_on,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Control switch for use of oblique plane  blip correction [0=off,1=on].", 0, "" };




_cvint  _oblcorr_perslice = { &oblcorr_perslice,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Perform oblique correction on per slice basis [0=off,1=on].", 0, "" };
_cvint  _debug_oblcorr = { &debug_oblcorr,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Debug switch for phase-encoding blip correction [0=off,1=on].", 0, "" };
_cvfloat  _bc_delx = { &bc_delx,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS,  "Interpolated x delay for blip correction.", 0, "" };
_cvfloat  _bc_dely = { &bc_dely,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS,  "Interpolated y delay for blip correction.", 0, "" };
_cvfloat  _bc_delz = { &bc_delz,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS,  "Interpolated z delay for blip correction.", 0, "" };
_cvint  _cvxfull = { &cvxfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cvyfull = { &cvyfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cvzfull = { &cvzfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _bw_flattop = { &bw_flattop, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_usedramp = { &area_usedramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_usedramp = { &pw_usedramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_usedtotal = { &area_usedtotal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _EZflag = { &EZflag,  PSD_OFF, PSD_ON, PSD_OFF,  0, 0, 0, 1, 1, VIS,  "ezdwi indicator", 0, "" };


_cvfloat  _omega_scale = { &omega_scale,  1.0, 4096, 256,  0, 0, 0, 1, 1, VIS,  "Instruction amplitude scaling", 0, "" };
_cvint  _rba_act_start = { &rba_act_start, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _aps2_rspslq = { &aps2_rspslq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _aps2_rspslqb = { &aps2_rspslqb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ghost_check = { &ghost_check,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "0:off 1:phase cor. off mode(check for epi calibration) 2:phase cor. on mode", 0, "" };
_cvint  _gck_offset_fov = { &gck_offset_fov,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1/4 FOV offset in ghost_check 0:off 1:on", 0, "" };


_cvint  _irprep_flag = { &irprep_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Epi ir prep on=1, off=0", 0, "" };
_cvint  _irprep_support = { &irprep_support,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0:not support 1:support", 0, "" };

_cvint  _enhanced_fat_suppression = { &enhanced_fat_suppression,  0, 4, 0,  0, 0, 0, 1, 1, VIS, "Enhanced Fat Suppression", 0, "" };
_cvint  _global_shim_method = { &global_shim_method,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "Shim Volume Method", 0, "" };
_cvint  _d_cf = { &d_cf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _rt_opphases = { &rt_opphases,  1, DATA_ACQ_MAX, 1,  0, 0, 0, 1, 1, VIS, 
                              "Number of phases of the respiratory cycle to image", 0, "" };

_cvint  _debugileave = { &debugileave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _rup_factor = { &rup_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _min_phasefov = { &min_phasefov,  0.1, 1.0, 0.5,  0, 0, 0, 1, 1,  INVIS,  "Minimum phase FOV holder", 0, "" };


_cvfloat  _core_time = { &core_time,  0.0, MAXFLOAT, 0.0,  0, 0, 0, 1, 1,  INVIS,  "single axis dwell time for core loop", 0, "" };


_cvint  _override_fatsat_high_weight = { &override_fatsat_high_weight,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Override forcicng fat sat use for high patient weight (1=ON, 0=OFF)", 0, "" };


_cvfloat  _scale_all = { &scale_all,  0.0,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Diffusion gradient scaling factor",  0, "" };
_cvfloat  _default_bvalue = { &default_bvalue, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _default_difnex = { &default_difnex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _use_phygrad = { &use_phygrad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _total_difnex = { &total_difnex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_difnex = { &max_difnex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_nex = { &max_nex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _max_bval = { &max_bval, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _gradopt_diffall = { &gradopt_diffall, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ADC_warning_flag = { &ADC_warning_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _edwi_extra_time = { &edwi_extra_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bigpat_warning_flag = { &bigpat_warning_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _avg_bval = { &avg_bval, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_difnex_limit = { &max_difnex_limit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _syndwi_flag = { &syndwi_flag,  PSD_OFF, PSD_ON, PSD_OFF,  0, 0, 0, 1, 1, VIS,  "Flag for synthetic DWI", 0, "" };
_cvfloat  _prescribed_max_bval = { &prescribed_max_bval, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _prescribed_min_bval = { &prescribed_min_bval, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _prescribed_bval_range = { &prescribed_bval_range, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fullk_nframes = { &fullk_nframes, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _xfd_power_limit = { &xfd_power_limit,   2.0,  15.0,  8.5,  0, 0, 0, 1, 1,  INVIS,  "XFD PS limitation",  0, "" };
_cvfloat  _xfd_temp_limit = { &xfd_temp_limit,   2.0,  15.0,  8.5,  0, 0, 0, 1, 1,  INVIS,  "XFA temperature power limitation",  0, "" };

_cvfloat  _TGenh = { &TGenh,  -30.0, 0.0, 0.0,  0, 0, 0, 1, 1,  INVIS,  "TG enhancement", 0, "" };

_cvint  _vrgf_bwctrl = { &vrgf_bwctrl,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Flag for enabling RBW control with VRGF", 0, "" };




_cvint  _ref_in_scan_flag = { &ref_in_scan_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "0 = ref as a separate entry point, 1 = ref becomes the first pass of scan",  0, ""};
_cvint  _refless_option = { &refless_option,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "0 = with ref, 1 = integrated ref",  0, ""};
_cvint  _ref_dda = { &ref_dda,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  INVIS,  "number of disdaqs in ref scan",  0, ""};
_cvint  _scan_dda = { &scan_dda,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  INVIS,  "number of disdaqs in scan",  0, ""};

_cvint  _pc_enh = { &pc_enh,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Phase Correction Enhancement: 1-yes, 0-no", 0, "" };
_cvint  _ref_volrecvcoil_flag = { &ref_volrecvcoil_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Switch to volume receive coil for reference scan: 1-yes, 0-no", 0, "" };

_cvint  _hopc_flag = { &hopc_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "High-order phase correction: 1-yes, 0-no", 0, "" };


_cvint  _diff_order_flag = { &diff_order_flag,  0,  2,  0,  0, 0, 0, 1, 1,  VIS,  "Intra-TR diffusion direction cycling mode: 0 = No cycling(Legacy), 1 = each b-value, 2 = all b-values", 0, "" };
_cvint  _diff_order_debug = { &diff_order_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _diff_order_verify = { &diff_order_verify, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _diff_order_nslices = { &diff_order_nslices, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _diff_order_size = { &diff_order_size, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _diff_pass_counter = { &diff_pass_counter, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _diff_pass_counter_save = { &diff_pass_counter_save, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _skip_ir = { &skip_ir, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _num_iters = { &num_iters,  0, MAX_NUM_ITERS, 0,  0, 0, 0, 1, 1, VIS,  "number of TRs in cornerpoint generation. 0 = OFF",  0, ""};

_cvfloat  _dti_dse_ecoon_scaling_factor = { &dti_dse_ecoon_scaling_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dti_sse_ecoon_scaling_factor = { &dti_sse_ecoon_scaling_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dti_sse_ecooff_scaling_factor = { &dti_sse_ecooff_scaling_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dwi_single_all_dse_ecoon_scaling_factor = { &dwi_single_all_dse_ecoon_scaling_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dwi_single_all_sse_ecoon_scaling_factor = { &dwi_single_all_sse_ecoon_scaling_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dwi_3in1_dse_ecoon_scaling_factor = { &dwi_3in1_dse_ecoon_scaling_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _k15_system_flag = { &k15_system_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Kizuna 1.5T system flag, 0 = off, 1 = on",  0, ""};



_cvint  _hoecc_flag = { &hoecc_flag,  0, 3, 0,  0, 0, 0, 1, 1, VIS, "HOEC correction flag: 0=Off, 1=On, 2=Manual(from hoecCorrTerms.txt), 3=Recon for All", 0, "" };
_cvint  _hoecc_psd_flag = { &hoecc_psd_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "PSD HOEC correction flag: 0=Off, 1=On", 0, "" };
_cvint  _hoecc_recon_flag = { &hoecc_recon_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Recon HOEC corrrrection flag: 0=Off, 1=On", 0, "" };
_cvint  _hoecc_debug = { &hoecc_debug,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Flag for HOEC correction debug", 0, "" };
_cvint  _hoecc_support = { &hoecc_support,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "HOEC correction support flag: 0=not support, 1=support", 0, "" };
_cvint  _hoecc_enable = { &hoecc_enable,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "HOEC correction enabling status: 0=not enabled, 1=enabled", 0, "" };

_cvint  _necho_before_te = { &necho_before_te,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "number of echoes before t=TE", 0, "" };

_cvint  _psd_per_echo_corr = { &psd_per_echo_corr,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1 = per echo PSD HOEC correction, 0 = DC correction", 0, "" };
_cvint  _read_corr_option = { &read_corr_option,  0, 2, 1,  0, 0, 0, 1, 1, VIS, "Correct RO by substracting DC (0), DC*ESP/(pw_gxw+pwgxwad) (1) or DC*ESP/pw_gxw (2)", 0, "" };

_cvint  _psd_debug_echo_index = { &psd_debug_echo_index,  -2, 1024, -1,  0, 0, 0, 1, 1, VIS, "echo index to save result. -1 = center echo, -2 = last echo, n = nth echo", 0, "" };
_cvint  _psd_echo_for_debug = { &psd_echo_for_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _psd_ileave_for_debug = { &psd_ileave_for_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _psd_slice_for_debug = { &psd_slice_for_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _hoec_cal_data_sign = { &hoec_cal_data_sign,  -1.0, 1.0, 1.0,  0, 0, 0, 1, 1, VIS, "sign for the amplitudes given in hoec.cal", 0, "" };
_cvint  _hoecc_manual_mode_warning_flag = { &hoecc_manual_mode_warning_flag,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Flag for the warning message in manual mode", 0, "" };
_cvint  _hoecc_manual_mode_psd_override_flag = { &hoecc_manual_mode_psd_override_flag,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Flag for overriding PSD corrected terms in manual mode", 0, "" };



_cvint  _muse_flag = { &muse_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "MUSE Multishot DWI, 0:OFF 1:ON", 0, "" };
_cvint  _muse_support = { &muse_support,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "MUSE support flag: 0=not support, 1=support", 0, "" };




_cvfloat  _epi_srderate_factor = { &epi_srderate_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _epi_loggrd_glim_flag = { &epi_loggrd_glim_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _epi_loggrd_glim = { &epi_loggrd_glim, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _adaptive_mpg_glim_flag = { &adaptive_mpg_glim_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _adaptive_mpg_glim = { &adaptive_mpg_glim, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _avmaxpasses = { &avmaxpasses,  1, 2000, MAX_DTI_LEGACY+MAX_T2,  0, 0, 0, 1, 1, VIS, "Max # of passes", 0, "" };

_cvint  _nav_image_interval = { &nav_image_interval, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _focus_B0_robust_mode = { &focus_B0_robust_mode,   0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flag to set bw_rf2 close to bw_rf1 to avoid signal loss",  0, "" };
_cvfloat  _focus_unwanted_delta_f = { &focus_unwanted_delta_f,  0,  1000,  440,  0, 0, 0, 1, 1,  VIS,  "Delta frequency of unwanted signal in focus [Hz]",  0, "" };




_cvint  _eco_mpg_support = { &eco_mpg_support,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "eco-MPG support flag: 0=not support, 1=support", 0, "" };
_cvint  _eco_mpg_flag = { &eco_mpg_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "ECO-MPG", 0, "" };
_cvint  _mpg_opt_flag = { &mpg_opt_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "MPG shape optimization", 0, "" };
_cvint  _dse_enh_flag = { &dse_enh_flag,  PSD_OFF,  PSD_ON,  PSD_ON,  0, 0, 0, 1, 1,   INVIS,  "Flag for DSE enhancement of TE reduction: 1-yes, 0-no", 0, "" };
_cvint  _dse_opt_flag = { &dse_opt_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "DSE MPG optimization", 0, "" };
_cvint  _bval_arbitrary_flag = { &bval_arbitrary_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "Calc b-value with arbitrary grad shape: 1-yes, 0-no", 0, "" };


_cvfloat  _pw_d1 = { &pw_d1,  0.0,  MAXFLOAT,  0.0,  0, 0, 0, 1, 1,  INVIS,  "plateau duration of 1st&4th diff-grad", 0, "" };
_cvfloat  _pw_d2 = { &pw_d2,  0.0,  MAXFLOAT,  0.0,  0, 0, 0, 1, 1,  INVIS,  "plateau duration of 2nd&3rd diff-grad", 0, "" };
_cvfloat  _b_tol = { &b_tol,  0.0,  MAXFLOAT,  0.0125,  0, 0, 0, 1, 1,  INVIS,  "tolerance in percentage in b-value bias for DSE opt", 0, "" };


_cvint  _mpg_opt_margin = { &mpg_opt_margin,  0,  MAXINT,  200,  0, 0, 0, 1, 1,  INVIS,  "margin in diff-grad shape opt", 0, "" };
_cvfloat  _mpg_opt_derate = { &mpg_opt_derate,  0.0,  10.0,  1.0,  0, 0, 0, 1, 1,  INVIS,  "derate of diff-grad before shape opt", 0, "" };
_cvfloat  _mpg_opt_glimit_orig = { &mpg_opt_glimit_orig,  0.0,  10.0,  2.8,  0, 0, 0, 1, 1,  INVIS,  "original glimit before eco-mpg", 0, "" };








_cvint  _fskillercycling = { &fskillercycling,   0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flag to cycle FatSat killer",  0, "" };





_cvint  _nav_type = { &nav_type,  0, 1, 1,  0, 0, 0, 1, 1, INVIS, "0 = maximum phase, 1 = minimum phase", 0, "" };
_cvint  _nav_sr = { &nav_sr,  0, 100, 10,  0, 0, 0, 1, 1, INVIS, "search radius for histgram in mm", 0, "" };
_cvfloat  _nav_window = { &nav_window,  0.0, 100.0, 2.0,  0, 0, 0, 1, 1, VIS, "maximum +/- displacement in mm.", 0, "" };
_cvint  _navigator_flag = { &navigator_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "navigator flag 0-disable, 1-enable", 0, "" };
_cvint  _nav_ss = { &nav_ss,  0, 6, 3,  0, 0, 0, 1, 1, INVIS, "Navigator acqs till steady state", 0, "" };
_cvint  _nav_dda = { &nav_dda,  1, 3000, 48,  0, 0, 0, 1, 1, VIS, "number of navigator baselines.", 0, "" };
_cvint  _nav_pause_after_prescan = { &nav_pause_after_prescan,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "pause after navigator baseline prescan", 0, "" };
_cvint  _enhanced_nav_flag = { &enhanced_nav_flag,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "internal flag for Navigator Signal Enhancement", 0, "" };
_cvint  _skip_navigator_prescan = { &skip_navigator_prescan,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "0 = run navigator baseline prescan, 1 = skip", 0, "" };


_cvint  _nav_test = { &nav_test,  0, 3, 0,  0, 0, 0, 1, 1, VIS, "navigator debug flag 0.disable, 1.save prof, 2.save coil&prof, 3.save EDGE", 0, "" };
_cvint  _nav_alg = { &nav_alg,  0, 3, 0,  0, 0, 0, 1, 1, VIS, "navigator algorithm 0.LSQ, 1.ED(Deriv), 2.AHN, 3.ED(Du)", 0, "" };
_cvint  _nav_dir = { &nav_dir,  -1, 1, 1,  0, 0, 0, 1, 1, INVIS, "direction for nav profile (1:S to I, -1:I to S)", 0, "" };
_cvint  _nav_channel = { &nav_channel,  -4, 127, -3,  0, 0, 0, 1, 1,  VIS,  "Channel selection,-4:1/2-ch selection; -3:channel combine with mask; -2:channel combine; -1:Peak signal; 0-N:Specific Channel", 0, "" };
_cvint  _nav_coilsel_index = { &nav_coilsel_index,  0, MAXINT, 2,  0, 0, 0, 1, 1, VIS, "coil selection index for navigator", 0, "" };
_cvint  _nav_normalization = { &nav_normalization,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "navigator signal normalization (0:OFF,1:ON)", 0, "" };
_cvint  _mon_navgs = { &mon_navgs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _hist_wait_time = { &hist_wait_time,  500000, 2000000, 1000000,  0, 0, 0, 1, 1, INVIS, "delay time for navigator histgram", 0, "" };
_cvint  _nav_dump_time = { &nav_dump_time,  500000, 2000000, 1000000,  0, 0, 0, 1, 1, INVIS, "delay time for navigator glayscale dumping", 0, "" };
_cvfloat  _curr_eff = { &curr_eff,  0, 1.0, 0.3,  0, 0, 0, 1, 1, INVIS,  "Efficiency of Nav scan", 0, "" };


_cvfloat  _monrot_phi = { &monrot_phi,  -90.0, 90.0, 0.0,  0, 0, 0, 1, 1, VIS, "rotate monitor about freq axis.", 0, "" };


_cvint  _navtrig_flag = { &navtrig_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "navigator triggering", 0, "" };
_cvint  _navgate_flag = { &navgate_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "navigator gating", 0, "" };
_cvint  _calc_rate = { &calc_rate,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "calculate respiratory rate", 0, "" };
_cvint  _num_slice_rr = { &num_slice_rr,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS, "#slices per RR in navigator triggering", 0, "" };
_cvint  _nav_prescan_tr = { &nav_prescan_tr,  -MAXINT, MAXINT, 200000,  0, 0, 0, 1, 1, VIS, "navigator sequence duration for navigator baseline prescan of navigator triggering", 0, "" };
_cvint  _nav_coilsel_tr = { &nav_coilsel_tr,  -MAXINT, MAXINT, 200000,  0, 0, 0, 1, 1, VIS, "navigator sequence duration for navigator coil selection ", 0, "" };
_cvint  _mon_tr_nav = { &mon_tr_nav,  0, MAXINT, 20000,  0, 0, 0, 1, 1, INVIS,  "navigator pulse duration", 0, "" };
_cvint  _mon_tr_wait = { &mon_tr_wait,  0, MAXINT, 100000,  0, 0, 0, 1, 1, INVIS,  "wait sequence duration: mon_tr - mon_tr_nav", 0, "" };
_cvint  _navtrig_target_tr = { &navtrig_target_tr,  0, MAXINT, 200000,  0, 0, 0, 1, 1, VIS,  "Target TR for Navigator Triggering", 0, "" };
_cvint  _navgate_target_tr = { &navgate_target_tr,  0, MAXINT, 20000,  0, 0, 0, 1, 1, VIS,  "Target TR for Navigator Gating", 0, "" };
_cvint  _wait_pts = { &wait_pts,  0, MAXINT, 3,  0, 0, 0, 1, 1, VIS,  "Number of navigators to activate triggering", 0, "" };
_cvint  _navtrig_waittime = { &navtrig_waittime,  0, 5000000, 500000,  0, 0, 0, 1, 1, VIS, "Wait time after imaging", 0, "" };
_cvfloat  _navtrig_factor = { &navtrig_factor,  0.0, 1.0, 0.5,  0, 0, 0, 1, 1, VIS, "Factor of triggering, window/range", 0, "" };
_cvint  _nav_scantime_refresh = { &nav_scantime_refresh,  0000000, 5000000, 1000000,  0, 0, 0, 1, 1, VIS,  "scantime refresh rate in Navigator Gating", 0, "" };
_cvint  _nav_scantime_refresh_pts = { &nav_scantime_refresh_pts,  0, 25, 5,  0, 0, 0, 1, 1, VIS,  "scantime refresh rate calculated from nav_scantime_refresh", 0, "" };


_cvint  _nav_save_raw_data = { &nav_save_raw_data,  0, 1000, 0,  0, 0, 0, 1, 1, VIS, "navigator save raw data flag 0.disable, 1 - 999 save upto 999 frames, 1000 .save all rawdata frames", 0, "" };
_cvint  _nav_debug_flag = { &nav_debug_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1= enable debug prints on RTP side, 0= no debug prints on RTP side", 0, "" };
_cvint  _nav_timing_flag = { &nav_timing_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 = round-trip timing measurements, 0= disable timing measurements", 0, "" };

_cvint  _navigatorCYL_flag = { &navigatorCYL_flag,  0, 1, 0, 0, 0, 0, 1, 1,  VIS, "1=Cylindric Excitation, 0=90-180 Excitation", 0, "" };
_cvint  _tlead_cylnav = { &tlead_cylnav,  0, MAXINT, 200  ,  0, 0, 0, 1, 1, INVIS,  "Init deadtime for cylnav", 0, "" };
_cvint  _navsat_flag = { &navsat_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "NavSat flag: 1=on, 0=off", 0, "" };
_cvfloat  _flip_rfcylr_navsat = { &flip_rfcylr_navsat,  1.0, 160.0, 90.0,  0, 0, 0, 1, 1, VIS, "Nav. Sat pulse flip angle for cylr nav", 0, "" };
_cvfloat  _flip_rfmon_navsat = { &flip_rfmon_navsat,  1.0, 160.0, 90.0,  0, 0, 0, 1, 1, VIS, "Nav. Sat pulse flip angle for 90-180 nav", 0, "" };
_cvfloat  _navscale = { &navscale,  0.001, 1.0, 1.0,  0, 0, 0, 1, 1, VIS, "Nav. RF Scale factor", 0, "" };
_cvfloat  _flip_rfcylr = { &flip_rfcylr,  0.0, 60.0, 30.0,  0, 0, 0, 1, 1, VIS, "Nav. CYL pulse flip angle", 0, "" };
_cvfloat  _flip_rfcylrtipup = { &flip_rfcylrtipup,  0.0, 160.0, 120,  0, 0, 0, 1, 1, VIS, "Nav. TIPUP pulse flip angle", 0, "" };
_cvfloat  _cylr_xoff = { &cylr_xoff,  -200.0, 200.0, 0.0,  0, 0, 0, 1, 1, VIS, "x cylinder manual offset, in mm", 0, "" };
_cvfloat  _cylr_yoff = { &cylr_yoff,  -200.0, 200.0, 0.0,  0, 0, 0, 1, 1, VIS, "y cylinder manual offset, in mm", 0, "" };
_cvint  _cylr_manoff = { &cylr_manoff,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "allow manual offsetting of pencil", 0, "" };
_cvfloat  _cylr_skew = { &cylr_skew,  0.0, 1.0, 0.0,  0, 0, 0, 1, 1, VIS, "skew of ext rf pulse", 0, "" };
_cvfloat  _cylr_dtheta = { &cylr_dtheta,  -1.0, 1.0, 0.0,  0, 0, 0, 1, 1, VIS, "angle correction, spiral pulse", 0, "" };

_cvint  _act_te_cylr = { &act_te_cylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _t_exa_cylr = { &t_exa_cylr,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from start of 90 slice select to mid 90", 0, "" };
_cvint  _t_exb_cylr = { &t_exb_cylr,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from mid of 90 to end 90", 0, "" };
_cvint  _t_rdb_cylr = { &t_rdb_cylr,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from echo peak to end of readout", 0, "" };


_cvint  _rtp_mode_for_nav_dynaplan = { &rtp_mode_for_nav_dynaplan,  0, 1, 1,  0, 0, 0, 1, 1, INVIS, "Rtp Mode For Dyanaplan", 0, "" };


_cvfloat  _a_gxwksp = { &a_gxwksp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwksp = { &ia_gxwksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwkspa = { &pw_gxwkspa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwkspd = { &pw_gxwkspd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwksp = { &pw_gxwksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwksp = { &wg_gxwksp,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gywksp = { &a_gywksp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gywksp = { &ia_gywksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gywkspa = { &pw_gywkspa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gywkspd = { &pw_gywkspd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gywksp = { &pw_gywksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gywksp = { &wg_gywksp,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzwksp = { &a_gzwksp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzwksp = { &ia_gzwksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzwkspa = { &pw_gzwkspa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzwkspd = { &pw_gzwkspd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzwksp = { &pw_gzwksp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzwksp = { &wg_gzwksp,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyex1 = { &a_gyex1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyex1 = { &ia_gyex1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyex1a = { &pw_gyex1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyex1d = { &pw_gyex1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyex1 = { &pw_gyex1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyex1 = { &wg_gyex1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvint  _res_omthrf2 = { &res_omthrf2,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "", 0, "" };



_cvint  _res_omthrf2left = { &res_omthrf2left,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "", 0, "" };



_cvint  _res_omthrf2right = { &res_omthrf2right,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "", 0, "" };


_cvint  _res_rf2_gradient_waveform = { &res_rf2_gradient_waveform, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2_gradient_waveform = { &wg_rf2_gradient_waveform,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_dynr1 = { &ia_dynr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_x_td0 = { &pw_x_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_x_td0 = { &wg_x_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_y_td0 = { &pw_y_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_y_td0 = { &wg_y_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_z_td0 = { &pw_z_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_z_td0 = { &wg_z_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rho_td0 = { &pw_rho_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rho_td0 = { &wg_rho_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_theta_td0 = { &pw_theta_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_theta_td0 = { &wg_theta_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_omega_td0 = { &pw_omega_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omega_td0 = { &wg_omega_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_ssp_td0 = { &pw_ssp_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ssp_td0 = { &wg_ssp_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1 = { &a_gzrf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1 = { &ia_gzrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1a = { &pw_gzrf1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1d = { &pw_gzrf1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1 = { &pw_gzrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf1 = { &res_gzrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1 = { &a_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1 = { &ia_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1 = { &pw_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1 = { &res_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1 = { &cyc_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1 = { &off_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1 = { &alpha_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1 = { &thk_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1 = { &gscale_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1 = { &flip_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_thetarf1 = { &a_thetarf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarf1 = { &ia_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf1 = { &pw_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarf1 = { &res_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarf1 = { &off_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1 = { &wg_rf1,  0,  WF_MAX_PROCESSORS*2-1, 
                                             TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2 = { &a_gzrf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2 = { &ia_gzrf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2a = { &pw_gzrf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2d = { &pw_gzrf2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2 = { &pw_gzrf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2 = { &a_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2 = { &ia_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2 = { &pw_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2 = { &res_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2 = { &cyc_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2 = { &off_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2 = { &alpha_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2 = { &thk_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2 = { &gscale_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2 = { &flip_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2 = { &wg_rf2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2left = { &a_gzrf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2left = { &ia_gzrf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lefta = { &pw_gzrf2lefta, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftd = { &pw_gzrf2leftd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2left = { &pw_gzrf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2left = { &a_rf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2left = { &ia_rf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2left = { &pw_rf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2left = { &res_rf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2left = { &cyc_rf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2left = { &off_rf2left, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2left = { &alpha_rf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2left = { &thk_rf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2left = { &gscale_rf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2left = { &flip_rf2left, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2left = { &wg_rf2left,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2right = { &a_gzrf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2right = { &ia_gzrf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2righta = { &pw_gzrf2righta, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightd = { &pw_gzrf2rightd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2right = { &pw_gzrf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2right = { &a_rf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2right = { &ia_rf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2right = { &pw_rf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2right = { &res_rf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2right = { &cyc_rf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2right = { &off_rf2right, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2right = { &alpha_rf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2right = { &thk_rf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2right = { &gscale_rf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2right = { &flip_rf2right, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2right = { &wg_rf2right,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rf2se1b4 = { &res_rf2se1b4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2se1b4 = { &wg_rf2se1b4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2iv = { &a_gyrf2iv, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2iv = { &ia_gyrf2iv, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2iva = { &pw_gyrf2iva, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2ivd = { &pw_gyrf2ivd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2iv = { &pw_gyrf2iv, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2iv = { &wg_gyrf2iv,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2l1 = { &a_gzrf2l1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2l1 = { &ia_gzrf2l1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1a = { &pw_gzrf2l1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1d = { &pw_gzrf2l1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1 = { &pw_gzrf2l1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2l1 = { &wg_gzrf2l1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2r1 = { &a_gzrf2r1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2r1 = { &ia_gzrf2r1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1a = { &pw_gzrf2r1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1d = { &pw_gzrf2r1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1 = { &pw_gzrf2r1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2r1 = { &wg_gzrf2r1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xgradCrusherL = { &a_xgradCrusherL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xgradCrusherL = { &ia_xgradCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradCrusherLa = { &pw_xgradCrusherLa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradCrusherLd = { &pw_xgradCrusherLd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradCrusherL = { &pw_xgradCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xgradCrusherL = { &wg_xgradCrusherL,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xgradCrusherR = { &a_xgradCrusherR, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xgradCrusherR = { &ia_xgradCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradCrusherRa = { &pw_xgradCrusherRa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradCrusherRd = { &pw_xgradCrusherRd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradCrusherR = { &pw_xgradCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xgradCrusherR = { &wg_xgradCrusherR,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ygradCrusherL = { &a_ygradCrusherL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ygradCrusherL = { &ia_ygradCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradCrusherLa = { &pw_ygradCrusherLa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradCrusherLd = { &pw_ygradCrusherLd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradCrusherL = { &pw_ygradCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ygradCrusherL = { &wg_ygradCrusherL,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ygradCrusherR = { &a_ygradCrusherR, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ygradCrusherR = { &ia_ygradCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradCrusherRa = { &pw_ygradCrusherRa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradCrusherRd = { &pw_ygradCrusherRd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradCrusherR = { &pw_ygradCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ygradCrusherR = { &wg_ygradCrusherR,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2leftl1 = { &a_gzrf2leftl1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2leftl1 = { &ia_gzrf2leftl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftl1a = { &pw_gzrf2leftl1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftl1d = { &pw_gzrf2leftl1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftl1 = { &pw_gzrf2leftl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2leftl1 = { &wg_gzrf2leftl1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2leftr1 = { &a_gzrf2leftr1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2leftr1 = { &ia_gzrf2leftr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftr1a = { &pw_gzrf2leftr1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftr1d = { &pw_gzrf2leftr1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2leftr1 = { &pw_gzrf2leftr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2leftr1 = { &wg_gzrf2leftr1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rightl1 = { &a_gzrf2rightl1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rightl1 = { &ia_gzrf2rightl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightl1a = { &pw_gzrf2rightl1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightl1d = { &pw_gzrf2rightl1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightl1 = { &pw_gzrf2rightl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rightl1 = { &wg_gzrf2rightl1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rightr1 = { &a_gzrf2rightr1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rightr1 = { &ia_gzrf2rightr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightr1a = { &pw_gzrf2rightr1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightr1d = { &pw_gzrf2rightr1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rightr1 = { &pw_gzrf2rightr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rightr1 = { &wg_gzrf2rightr1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xgradRightCrusherL = { &a_xgradRightCrusherL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xgradRightCrusherL = { &ia_xgradRightCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradRightCrusherLa = { &pw_xgradRightCrusherLa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradRightCrusherLd = { &pw_xgradRightCrusherLd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradRightCrusherL = { &pw_xgradRightCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xgradRightCrusherL = { &wg_xgradRightCrusherL,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xgradRightCrusherR = { &a_xgradRightCrusherR, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xgradRightCrusherR = { &ia_xgradRightCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradRightCrusherRa = { &pw_xgradRightCrusherRa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradRightCrusherRd = { &pw_xgradRightCrusherRd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradRightCrusherR = { &pw_xgradRightCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xgradRightCrusherR = { &wg_xgradRightCrusherR,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ygradRightCrusherL = { &a_ygradRightCrusherL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ygradRightCrusherL = { &ia_ygradRightCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradRightCrusherLa = { &pw_ygradRightCrusherLa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradRightCrusherLd = { &pw_ygradRightCrusherLd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradRightCrusherL = { &pw_ygradRightCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ygradRightCrusherL = { &wg_ygradRightCrusherL,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ygradRightCrusherR = { &a_ygradRightCrusherR, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ygradRightCrusherR = { &ia_ygradRightCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradRightCrusherRa = { &pw_ygradRightCrusherRa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradRightCrusherRd = { &pw_ygradRightCrusherRd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradRightCrusherR = { &pw_ygradRightCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ygradRightCrusherR = { &wg_ygradRightCrusherR,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xgradLeftCrusherL = { &a_xgradLeftCrusherL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xgradLeftCrusherL = { &ia_xgradLeftCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradLeftCrusherLa = { &pw_xgradLeftCrusherLa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradLeftCrusherLd = { &pw_xgradLeftCrusherLd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradLeftCrusherL = { &pw_xgradLeftCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xgradLeftCrusherL = { &wg_xgradLeftCrusherL,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xgradLeftCrusherR = { &a_xgradLeftCrusherR, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xgradLeftCrusherR = { &ia_xgradLeftCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradLeftCrusherRa = { &pw_xgradLeftCrusherRa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradLeftCrusherRd = { &pw_xgradLeftCrusherRd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xgradLeftCrusherR = { &pw_xgradLeftCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xgradLeftCrusherR = { &wg_xgradLeftCrusherR,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ygradLeftCrusherL = { &a_ygradLeftCrusherL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ygradLeftCrusherL = { &ia_ygradLeftCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradLeftCrusherLa = { &pw_ygradLeftCrusherLa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradLeftCrusherLd = { &pw_ygradLeftCrusherLd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradLeftCrusherL = { &pw_ygradLeftCrusherL, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ygradLeftCrusherL = { &wg_ygradLeftCrusherL,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ygradLeftCrusherR = { &a_ygradLeftCrusherR, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ygradLeftCrusherR = { &ia_ygradLeftCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradLeftCrusherRa = { &pw_ygradLeftCrusherRa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradLeftCrusherRd = { &pw_ygradLeftCrusherRd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ygradLeftCrusherR = { &pw_ygradLeftCrusherR, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ygradLeftCrusherR = { &wg_ygradLeftCrusherR,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxcl = { &a_gxcl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxw = { &a_gxw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxcr = { &a_gxcr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gyb = { &a_gyb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzb = { &a_gzb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxcl = { &ia_gxcl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw = { &ia_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxcr = { &ia_gxcr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyb = { &ia_gyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzb = { &ia_gzb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcla = { &pw_gxcla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcl = { &pw_gxcl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcld = { &pw_gxcld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwl = { &pw_gxwl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw = { &pw_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwr = { &pw_gxwr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwad = { &pw_gxwad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxgap = { &pw_gxgap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcra = { &pw_gxcra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcr = { &pw_gxcr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcrd = { &pw_gxcrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyba = { &pw_gyba, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyb = { &pw_gyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gybd = { &pw_gybd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzba = { &pw_gzba, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzb = { &pw_gzb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzbd = { &pw_gzbd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_iref_gxwait = { &pw_iref_gxwait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rec_unblank = { &ia_rec_unblank, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rec_unblank3 = { &ia_rec_unblank3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_rtb0echo = { &filter_rtb0echo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rec_unblank2 = { &ia_rec_unblank2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };






_cvfloat  _a_gxiref1 = { &a_gxiref1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxiref1 = { &ia_gxiref1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxiref1a = { &pw_gxiref1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxiref1d = { &pw_gxiref1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxiref1 = { &pw_gxiref1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxiref1 = { &wg_gxiref1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxirefr = { &a_gxirefr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxirefr = { &ia_gxirefr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxirefra = { &pw_gxirefra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxirefrd = { &pw_gxirefrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxirefr = { &pw_gxirefr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxirefr = { &wg_gxirefr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1 = { &a_gy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1a = { &a_gy1a, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1b = { &a_gy1b, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1 = { &ia_gy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1wa = { &ia_gy1wa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1wb = { &ia_gy1wb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1a = { &pw_gy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1d = { &pw_gy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1 = { &pw_gy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1 = { &wg_gy1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gymn2 = { &a_gymn2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gymn2 = { &ia_gymn2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn2a = { &pw_gymn2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn2d = { &pw_gymn2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn2 = { &pw_gymn2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gymn2 = { &wg_gymn2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gymn1 = { &a_gymn1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gymn1 = { &ia_gymn1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1a = { &pw_gymn1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1d = { &pw_gymn1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1 = { &pw_gymn1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gymn1 = { &wg_gymn1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1 = { &a_gz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1 = { &ia_gz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1a = { &pw_gz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1d = { &pw_gz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1 = { &pw_gz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1 = { &wg_gz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzmn = { &a_gzmn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzmn = { &ia_gzmn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzmna = { &pw_gzmna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzmnd = { &pw_gzmnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzmn = { &pw_gzmn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzmn = { &wg_gzmn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rf2se1 = { &res_rf2se1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2se1 = { &wg_rf2se1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxdl1 = { &a_gxdl1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdl1 = { &ia_gxdl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl1a = { &pw_gxdl1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl1d = { &pw_gxdl1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl1 = { &pw_gxdl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxdl1 = { &wg_gxdl1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxdr1 = { &a_gxdr1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdr1 = { &ia_gxdr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdr1a = { &pw_gxdr1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdr1d = { &pw_gxdr1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdr1 = { &pw_gxdr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxdr1 = { &wg_gxdr1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxdl2 = { &a_gxdl2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdl2 = { &ia_gxdl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl2a = { &pw_gxdl2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl2d = { &pw_gxdl2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdl2 = { &pw_gxdl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxdl2 = { &wg_gxdl2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxdr2 = { &a_gxdr2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxdr2 = { &ia_gxdr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdr2a = { &pw_gxdr2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdr2d = { &pw_gxdr2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxdr2 = { &pw_gxdr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxdr2 = { &wg_gxdr2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxk = { &a_gxk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxk = { &ia_gxk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxka = { &pw_gxka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkd = { &pw_gxkd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk = { &pw_gxk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxk = { &wg_gxk,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gydl1 = { &a_gydl1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydl1 = { &ia_gydl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl1a = { &pw_gydl1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl1d = { &pw_gydl1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl1 = { &pw_gydl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gydl1 = { &wg_gydl1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gydr1 = { &a_gydr1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydr1 = { &ia_gydr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydr1a = { &pw_gydr1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydr1d = { &pw_gydr1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydr1 = { &pw_gydr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gydr1 = { &wg_gydr1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gydl2 = { &a_gydl2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydl2 = { &ia_gydl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl2a = { &pw_gydl2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl2d = { &pw_gydl2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydl2 = { &pw_gydl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gydl2 = { &wg_gydl2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gydr2 = { &a_gydr2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gydr2 = { &ia_gydr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydr2a = { &pw_gydr2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydr2d = { &pw_gydr2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gydr2 = { &pw_gydr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gydr2 = { &wg_gydr2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyk = { &a_gyk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyk = { &ia_gyk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyka = { &pw_gyka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykd = { &pw_gykd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk = { &pw_gyk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyk = { &wg_gyk,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzdl1 = { &a_gzdl1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdl1 = { &ia_gzdl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl1a = { &pw_gzdl1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl1d = { &pw_gzdl1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl1 = { &pw_gzdl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzdl1 = { &wg_gzdl1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzdr1 = { &a_gzdr1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdr1 = { &ia_gzdr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdr1a = { &pw_gzdr1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdr1d = { &pw_gzdr1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdr1 = { &pw_gzdr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzdr1 = { &wg_gzdr1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzdl2 = { &a_gzdl2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdl2 = { &ia_gzdl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl2a = { &pw_gzdl2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl2d = { &pw_gzdl2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdl2 = { &pw_gzdl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzdl2 = { &wg_gzdl2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzdr2 = { &a_gzdr2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzdr2 = { &ia_gzdr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdr2a = { &pw_gzdr2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdr2d = { &pw_gzdr2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzdr2 = { &pw_gzdr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzdr2 = { &wg_gzdr2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzk = { &a_gzk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzk = { &ia_gzk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzka = { &pw_gzka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkd = { &pw_gzkd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk = { &pw_gzk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzk = { &wg_gzk,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wgx = { &pw_wgx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wgx = { &wg_wgx,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wgy = { &pw_wgy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wgy = { &wg_wgy,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wgz = { &pw_wgz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wgz = { &wg_wgz,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wssp = { &pw_wssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wssp = { &wg_wssp,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sspdelay = { &pw_sspdelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sspdelay = { &wg_sspdelay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_omegadelay = { &pw_omegadelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegadelay = { &wg_omegadelay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_womega = { &pw_womega, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_womega = { &wg_womega,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sspshift = { &pw_sspshift, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sspshift = { &wg_sspshift,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_ssp_pass_delay = { &pw_ssp_pass_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ssp_pass_delay = { &wg_ssp_pass_delay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf0 = { &a_gzrf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf0 = { &ia_gzrf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0a = { &pw_gzrf0a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0d = { &pw_gzrf0d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0 = { &pw_gzrf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf0 = { &res_gzrf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf0 = { &a_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf0 = { &ia_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf0 = { &pw_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf0 = { &res_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf0 = { &cyc_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf0 = { &off_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf0 = { &alpha_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf0 = { &thk_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf0 = { &gscale_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf0 = { &flip_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf0 = { &wg_rf0,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_omegarf0 = { &a_omegarf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omegarf0 = { &ia_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_omegarf0 = { &pw_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_omegarf0 = { &res_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_omegarf0 = { &off_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_omegarf0 = { &rfslot_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_omegarf0 = { &gscale_omegarf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_omegarf0 = { &n_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegarf0 = { &wg_omegarf0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyk0 = { &a_gyk0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyk0 = { &ia_gyk0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk0a = { &pw_gyk0a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk0d = { &pw_gyk0d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk0 = { &pw_gyk0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyk0 = { &wg_gyk0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_bline_unblank = { &ia_bline_unblank, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_blineacq1 = { &filter_blineacq1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };






_cvint  _res_rfcssat = { &res_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfcssat = { &wg_rfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_dbgxrfcssat = { &a_dbgxrfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_dbgxrfcssat = { &ia_dbgxrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgxrfcssata = { &pw_dbgxrfcssata, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgxrfcssatd = { &pw_dbgxrfcssatd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgxrfcssat = { &pw_dbgxrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_dbgxrfcssat = { &wg_dbgxrfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_dbgyrfcssat = { &a_dbgyrfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_dbgyrfcssat = { &ia_dbgyrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgyrfcssata = { &pw_dbgyrfcssata, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgyrfcssatd = { &pw_dbgyrfcssatd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgyrfcssat = { &pw_dbgyrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_dbgyrfcssat = { &wg_dbgyrfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_dbgzrfcssat = { &a_dbgzrfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_dbgzrfcssat = { &ia_dbgzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgzrfcssata = { &pw_dbgzrfcssata, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgzrfcssatd = { &pw_dbgzrfcssatd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_dbgzrfcssat = { &pw_dbgzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_dbgzrfcssat = { &wg_dbgzrfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_omega_hs_rfcssat = { &res_omega_hs_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omega_hs_rfcssat = { &wg_omega_hs_rfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfcs = { &a_gzrfcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfcs = { &ia_gzrfcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcsa = { &pw_gzrfcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcsd = { &pw_gzrfcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcs = { &pw_gzrfcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrfcs = { &wg_gzrfcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykcs = { &a_gykcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcs = { &ia_gykcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcsa = { &pw_gykcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcsd = { &pw_gykcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcs = { &pw_gykcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcs = { &wg_gykcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkcs = { &a_gxkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkcs = { &ia_gxkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkcsa = { &pw_gxkcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkcsd = { &pw_gxkcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkcs = { &pw_gxkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkcs = { &wg_gxkcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkcs = { &a_gzkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkcs = { &ia_gzkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkcsa = { &pw_gzkcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkcsd = { &pw_gzkcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkcs = { &pw_gzkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkcs = { &wg_gzkcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_cardiacsat = { &pw_isi_cardiacsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_cardiacsat = { &wg_isi_cardiacsat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_cardiacsat = { &pw_rot_update_cardiacsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_cardiacsat = { &wg_rot_update_cardiacsat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse1 = { &a_gzrfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse1 = { &ia_gzrfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse1a = { &pw_gzrfse1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse1d = { &pw_gzrfse1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse1 = { &pw_gzrfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse1 = { &a_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse1 = { &ia_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse1 = { &pw_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse1 = { &res_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse1 = { &temp_res_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse1 = { &cyc_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse1 = { &off_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse1 = { &alpha_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse1 = { &thk_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse1 = { &gscale_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse1 = { &flip_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse1 = { &wg_rfse1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate1 = { &pw_isi_sate1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate1 = { &wg_isi_sate1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e1 = { &pw_rot_update_e1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e1 = { &wg_rot_update_e1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse1 = { &a_gykse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse1 = { &ia_gykse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse1a = { &pw_gykse1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse1d = { &pw_gykse1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse1 = { &pw_gykse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse1 = { &wg_gykse1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse1 = { &a_gxkse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse1 = { &ia_gxkse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse1a = { &pw_gxkse1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse1d = { &pw_gxkse1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse1 = { &pw_gxkse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse1 = { &wg_gxkse1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek1 = { &pw_isi_satek1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek1 = { &wg_isi_satek1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek1 = { &pw_rot_update_ek1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek1 = { &wg_rot_update_ek1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse2 = { &a_gzrfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse2 = { &ia_gzrfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse2a = { &pw_gzrfse2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse2d = { &pw_gzrfse2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse2 = { &pw_gzrfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse2 = { &a_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse2 = { &ia_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse2 = { &pw_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse2 = { &res_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse2 = { &temp_res_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse2 = { &cyc_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse2 = { &off_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse2 = { &alpha_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse2 = { &thk_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse2 = { &gscale_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse2 = { &flip_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse2 = { &wg_rfse2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate2 = { &pw_isi_sate2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate2 = { &wg_isi_sate2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e2 = { &pw_rot_update_e2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e2 = { &wg_rot_update_e2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse2 = { &a_gykse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse2 = { &ia_gykse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse2a = { &pw_gykse2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse2d = { &pw_gykse2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse2 = { &pw_gykse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse2 = { &wg_gykse2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse2 = { &a_gxkse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse2 = { &ia_gxkse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse2a = { &pw_gxkse2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse2d = { &pw_gxkse2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse2 = { &pw_gxkse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse2 = { &wg_gxkse2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek2 = { &pw_isi_satek2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek2 = { &wg_isi_satek2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek2 = { &pw_rot_update_ek2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek2 = { &wg_rot_update_ek2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse3 = { &a_gzrfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse3 = { &ia_gzrfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse3a = { &pw_gzrfse3a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse3d = { &pw_gzrfse3d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse3 = { &pw_gzrfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse3 = { &a_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse3 = { &ia_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse3 = { &pw_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse3 = { &res_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse3 = { &temp_res_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse3 = { &cyc_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse3 = { &off_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse3 = { &alpha_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse3 = { &thk_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse3 = { &gscale_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse3 = { &flip_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse3 = { &wg_rfse3,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate3 = { &pw_isi_sate3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate3 = { &wg_isi_sate3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e3 = { &pw_rot_update_e3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e3 = { &wg_rot_update_e3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse3 = { &a_gykse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse3 = { &ia_gykse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse3a = { &pw_gykse3a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse3d = { &pw_gykse3d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse3 = { &pw_gykse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse3 = { &wg_gykse3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse3 = { &a_gxkse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse3 = { &ia_gxkse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse3a = { &pw_gxkse3a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse3d = { &pw_gxkse3d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse3 = { &pw_gxkse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse3 = { &wg_gxkse3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek3 = { &pw_isi_satek3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek3 = { &wg_isi_satek3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek3 = { &pw_rot_update_ek3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek3 = { &wg_rot_update_ek3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse4 = { &a_gzrfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse4 = { &ia_gzrfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse4a = { &pw_gzrfse4a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse4d = { &pw_gzrfse4d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse4 = { &pw_gzrfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse4 = { &a_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse4 = { &ia_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse4 = { &pw_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse4 = { &res_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse4 = { &temp_res_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse4 = { &cyc_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse4 = { &off_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse4 = { &alpha_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse4 = { &thk_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse4 = { &gscale_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse4 = { &flip_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse4 = { &wg_rfse4,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate4 = { &pw_isi_sate4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate4 = { &wg_isi_sate4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e4 = { &pw_rot_update_e4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e4 = { &wg_rot_update_e4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse4 = { &a_gykse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse4 = { &ia_gykse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse4a = { &pw_gykse4a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse4d = { &pw_gykse4d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse4 = { &pw_gykse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse4 = { &wg_gykse4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse4 = { &a_gxkse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse4 = { &ia_gxkse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse4a = { &pw_gxkse4a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse4d = { &pw_gxkse4d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse4 = { &pw_gxkse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse4 = { &wg_gxkse4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek4 = { &pw_isi_satek4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek4 = { &wg_isi_satek4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek4 = { &pw_rot_update_ek4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek4 = { &wg_rot_update_ek4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse5 = { &a_gzrfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse5 = { &ia_gzrfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse5a = { &pw_gzrfse5a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse5d = { &pw_gzrfse5d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse5 = { &pw_gzrfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse5 = { &a_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse5 = { &ia_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse5 = { &pw_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse5 = { &res_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse5 = { &temp_res_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse5 = { &cyc_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse5 = { &off_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse5 = { &alpha_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse5 = { &thk_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse5 = { &gscale_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse5 = { &flip_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse5 = { &wg_rfse5,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate5 = { &pw_isi_sate5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate5 = { &wg_isi_sate5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e5 = { &pw_rot_update_e5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e5 = { &wg_rot_update_e5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse5 = { &a_gykse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse5 = { &ia_gykse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse5a = { &pw_gykse5a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse5d = { &pw_gykse5d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse5 = { &pw_gykse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse5 = { &wg_gykse5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse5 = { &a_gxkse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse5 = { &ia_gxkse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse5a = { &pw_gxkse5a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse5d = { &pw_gxkse5d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse5 = { &pw_gxkse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse5 = { &wg_gxkse5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek5 = { &pw_isi_satek5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek5 = { &wg_isi_satek5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek5 = { &pw_rot_update_ek5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek5 = { &wg_rot_update_ek5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse6 = { &a_gzrfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse6 = { &ia_gzrfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse6a = { &pw_gzrfse6a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse6d = { &pw_gzrfse6d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse6 = { &pw_gzrfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse6 = { &a_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse6 = { &ia_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse6 = { &pw_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse6 = { &res_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse6 = { &temp_res_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse6 = { &cyc_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse6 = { &off_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse6 = { &alpha_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse6 = { &thk_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse6 = { &gscale_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse6 = { &flip_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse6 = { &wg_rfse6,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate6 = { &pw_isi_sate6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate6 = { &wg_isi_sate6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e6 = { &pw_rot_update_e6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e6 = { &wg_rot_update_e6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse6 = { &a_gykse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse6 = { &ia_gykse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse6a = { &pw_gykse6a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse6d = { &pw_gykse6d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse6 = { &pw_gykse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse6 = { &wg_gykse6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse6 = { &a_gxkse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse6 = { &ia_gxkse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse6a = { &pw_gxkse6a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse6d = { &pw_gxkse6d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse6 = { &pw_gxkse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse6 = { &wg_gxkse6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek6 = { &pw_isi_satek6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek6 = { &wg_isi_satek6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek6 = { &pw_rot_update_ek6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek6 = { &wg_rot_update_ek6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrfsx1 = { &a_gxrfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrfsx1 = { &ia_gxrfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx1a = { &pw_gxrfsx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx1d = { &pw_gxrfsx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx1 = { &pw_gxrfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsx1 = { &a_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsx1 = { &ia_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsx1 = { &pw_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsx1 = { &res_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsx1 = { &temp_res_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsx1 = { &cyc_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsx1 = { &off_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsx1 = { &alpha_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsx1 = { &gscale_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsx1 = { &thk_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsx1 = { &flip_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsx1 = { &wg_rfsx1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satx1 = { &pw_isi_satx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satx1 = { &wg_isi_satx1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_x1 = { &pw_rot_update_x1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_x1 = { &wg_rot_update_x1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksx1 = { &a_gyksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksx1 = { &ia_gyksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx1a = { &pw_gyksx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx1d = { &pw_gyksx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx1 = { &pw_gyksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksx1 = { &wg_gyksx1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksx1 = { &a_gxksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksx1 = { &ia_gxksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx1a = { &pw_gxksx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx1d = { &pw_gxksx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx1 = { &pw_gxksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksx1 = { &wg_gxksx1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satxk1 = { &pw_isi_satxk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satxk1 = { &wg_isi_satxk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_xk1 = { &pw_rot_update_xk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_xk1 = { &wg_rot_update_xk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrfsx2 = { &a_gxrfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrfsx2 = { &ia_gxrfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx2a = { &pw_gxrfsx2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx2d = { &pw_gxrfsx2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx2 = { &pw_gxrfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsx2 = { &a_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsx2 = { &ia_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsx2 = { &pw_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsx2 = { &res_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsx2 = { &temp_res_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsx2 = { &cyc_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsx2 = { &off_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsx2 = { &alpha_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsx2 = { &gscale_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsx2 = { &thk_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsx2 = { &flip_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsx2 = { &wg_rfsx2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satx2 = { &pw_isi_satx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satx2 = { &wg_isi_satx2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_x2 = { &pw_rot_update_x2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_x2 = { &wg_rot_update_x2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksx2 = { &a_gyksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksx2 = { &ia_gyksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx2a = { &pw_gyksx2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx2d = { &pw_gyksx2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx2 = { &pw_gyksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksx2 = { &wg_gyksx2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksx2 = { &a_gxksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksx2 = { &ia_gxksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx2a = { &pw_gxksx2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx2d = { &pw_gxksx2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx2 = { &pw_gxksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksx2 = { &wg_gxksx2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satxk2 = { &pw_isi_satxk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satxk2 = { &wg_isi_satxk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_xk2 = { &pw_rot_update_xk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_xk2 = { &wg_rot_update_xk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrfsy1 = { &a_gyrfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrfsy1 = { &ia_gyrfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy1a = { &pw_gyrfsy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy1d = { &pw_gyrfsy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy1 = { &pw_gyrfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsy1 = { &a_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsy1 = { &ia_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsy1 = { &pw_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsy1 = { &res_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsy1 = { &temp_res_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsy1 = { &cyc_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsy1 = { &off_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsy1 = { &alpha_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsy1 = { &thk_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsy1 = { &gscale_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsy1 = { &flip_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsy1 = { &wg_rfsy1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_saty1 = { &pw_isi_saty1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_saty1 = { &wg_isi_saty1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_y1 = { &pw_rot_update_y1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_y1 = { &wg_rot_update_y1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksy1 = { &a_gyksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksy1 = { &ia_gyksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy1a = { &pw_gyksy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy1d = { &pw_gyksy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy1 = { &pw_gyksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksy1 = { &wg_gyksy1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksy1 = { &a_gxksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksy1 = { &ia_gxksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy1a = { &pw_gxksy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy1d = { &pw_gxksy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy1 = { &pw_gxksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksy1 = { &wg_gxksy1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satyk1 = { &pw_isi_satyk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satyk1 = { &wg_isi_satyk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_yk1 = { &pw_rot_update_yk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_yk1 = { &wg_rot_update_yk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrfsy2 = { &a_gyrfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrfsy2 = { &ia_gyrfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy2a = { &pw_gyrfsy2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy2d = { &pw_gyrfsy2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy2 = { &pw_gyrfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsy2 = { &a_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsy2 = { &ia_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsy2 = { &pw_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsy2 = { &res_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsy2 = { &temp_res_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsy2 = { &cyc_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsy2 = { &off_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsy2 = { &alpha_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsy2 = { &thk_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsy2 = { &gscale_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsy2 = { &flip_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsy2 = { &wg_rfsy2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_saty2 = { &pw_isi_saty2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_saty2 = { &wg_isi_saty2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_y2 = { &pw_rot_update_y2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_y2 = { &wg_rot_update_y2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksy2 = { &a_gyksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksy2 = { &ia_gyksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy2a = { &pw_gyksy2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy2d = { &pw_gyksy2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy2 = { &pw_gyksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksy2 = { &wg_gyksy2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksy2 = { &a_gxksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksy2 = { &ia_gxksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy2a = { &pw_gxksy2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy2d = { &pw_gxksy2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy2 = { &pw_gxksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksy2 = { &wg_gxksy2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satyk2 = { &pw_isi_satyk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satyk2 = { &wg_isi_satyk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_yk2 = { &pw_rot_update_yk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_yk2 = { &wg_rot_update_yk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfsz1 = { &a_gzrfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfsz1 = { &ia_gzrfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz1a = { &pw_gzrfsz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz1d = { &pw_gzrfsz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz1 = { &pw_gzrfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsz1 = { &a_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsz1 = { &ia_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsz1 = { &pw_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsz1 = { &res_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsz1 = { &temp_res_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsz1 = { &cyc_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsz1 = { &off_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsz1 = { &alpha_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsz1 = { &thk_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsz1 = { &gscale_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsz1 = { &flip_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsz1 = { &wg_rfsz1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satz1 = { &pw_isi_satz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satz1 = { &wg_isi_satz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_z1 = { &pw_rot_update_z1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_z1 = { &wg_rot_update_z1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksz1 = { &a_gyksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksz1 = { &ia_gyksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz1a = { &pw_gyksz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz1d = { &pw_gyksz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz1 = { &pw_gyksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksz1 = { &wg_gyksz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksz1 = { &a_gxksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksz1 = { &ia_gxksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz1a = { &pw_gxksz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz1d = { &pw_gxksz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz1 = { &pw_gxksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksz1 = { &wg_gxksz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satzk1 = { &pw_isi_satzk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satzk1 = { &wg_isi_satzk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_zk1 = { &pw_rot_update_zk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_zk1 = { &wg_rot_update_zk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfsz2 = { &a_gzrfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfsz2 = { &ia_gzrfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz2a = { &pw_gzrfsz2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz2d = { &pw_gzrfsz2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz2 = { &pw_gzrfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsz2 = { &a_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsz2 = { &ia_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsz2 = { &pw_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsz2 = { &res_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsz2 = { &temp_res_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsz2 = { &cyc_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsz2 = { &off_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsz2 = { &alpha_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsz2 = { &thk_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsz2 = { &gscale_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsz2 = { &flip_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsz2 = { &wg_rfsz2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satz2 = { &pw_isi_satz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satz2 = { &wg_isi_satz2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_z2 = { &pw_rot_update_z2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_z2 = { &wg_rot_update_z2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksz2 = { &a_gyksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksz2 = { &ia_gyksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz2a = { &pw_gyksz2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz2d = { &pw_gyksz2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz2 = { &pw_gyksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksz2 = { &wg_gyksz2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksz2 = { &a_gxksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksz2 = { &ia_gxksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz2a = { &pw_gxksz2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz2d = { &pw_gxksz2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz2 = { &pw_gxksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksz2 = { &wg_gxksz2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satzk2 = { &pw_isi_satzk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satzk2 = { &wg_isi_satzk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_zk2 = { &pw_rot_update_zk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_zk2 = { &wg_rot_update_zk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_y_ccs_null = { &pw_y_ccs_null, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_y_ccs_null = { &wg_y_ccs_null,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf1mps1 = { &a_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1mps1 = { &ia_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1mps1 = { &pw_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1mps1 = { &res_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1mps1 = { &cyc_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1mps1 = { &off_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1mps1 = { &alpha_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1mps1 = { &wg_rf1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf1mps1 = { &a_gyrf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf1mps1 = { &ia_gyrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mps1a = { &pw_gyrf1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mps1d = { &pw_gyrf1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mps1 = { &pw_gyrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf1mps1 = { &wg_gyrf1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1mps1 = { &a_gy1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1mps1 = { &ia_gy1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mps1a = { &pw_gy1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mps1d = { &pw_gy1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mps1 = { &pw_gy1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1mps1 = { &wg_gy1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1mps1 = { &a_gzrf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1mps1 = { &ia_gzrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1a = { &pw_gzrf1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1d = { &pw_gzrf1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1 = { &pw_gzrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1mps1 = { &wg_gzrf1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1mps1 = { &a_gz1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1mps1 = { &ia_gz1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1a = { &pw_gz1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1d = { &pw_gz1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1 = { &pw_gz1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1mps1 = { &wg_gz1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1mps1 = { &a_gx1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1mps1 = { &ia_gx1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1a = { &pw_gx1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1d = { &pw_gx1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1 = { &pw_gx1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1mps1 = { &wg_gx1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2mps1 = { &a_gzrf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2mps1 = { &ia_gzrf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1a = { &pw_gzrf2mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1d = { &pw_gzrf2mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1 = { &pw_gzrf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2mps1 = { &a_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2mps1 = { &ia_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2mps1 = { &pw_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2mps1 = { &res_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2mps1 = { &temp_res_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2mps1 = { &cyc_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2mps1 = { &off_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2mps1 = { &alpha_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2mps1 = { &thk_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2mps1 = { &gscale_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2mps1 = { &flip_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2mps1 = { &wg_rf2mps1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2lmps1 = { &a_gzrf2lmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2lmps1 = { &ia_gzrf2lmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1a = { &pw_gzrf2lmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1d = { &pw_gzrf2lmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1 = { &pw_gzrf2lmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2lmps1 = { &wg_gzrf2lmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rmps1 = { &a_gzrf2rmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rmps1 = { &ia_gzrf2rmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1a = { &pw_gzrf2rmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1d = { &pw_gzrf2rmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1 = { &pw_gzrf2rmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rmps1 = { &wg_gzrf2rmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwmps1 = { &a_gxwmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwmps1 = { &ia_gxwmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1a = { &pw_gxwmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1d = { &pw_gxwmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1 = { &pw_gxwmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwmps1 = { &wg_gxwmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1mps1 = { &filter_echo1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1cfl = { &a_gzrf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cfl = { &ia_gzrf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfla = { &pw_gzrf1cfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfld = { &pw_gzrf1cfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfl = { &pw_gzrf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1cfl = { &a_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cfl = { &ia_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cfl = { &pw_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cfl = { &res_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1cfl = { &temp_res_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1cfl = { &cyc_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cfl = { &off_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1cfl = { &alpha_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1cfl = { &thk_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1cfl = { &gscale_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cfl = { &flip_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cfl = { &wg_rf1cfl,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1cfl = { &a_gz1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1cfl = { &ia_gz1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfla = { &pw_gz1cfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfld = { &pw_gz1cfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfl = { &pw_gz1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1cfl = { &wg_gz1cfl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_cfl_fid = { &filter_cfl_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gykcfl = { &a_gykcfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcfl = { &ia_gykcfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfla = { &pw_gykcfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfld = { &pw_gykcfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfl = { &pw_gykcfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcfl = { &wg_gykcfl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkrcvn = { &a_gxkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkrcvn = { &ia_gxkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvna = { &pw_gxkrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvnd = { &pw_gxkrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvn = { &pw_gxkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkrcvn = { &wg_gxkrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykrcvn = { &a_gykrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykrcvn = { &ia_gykrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvna = { &pw_gykrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvnd = { &pw_gykrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvn = { &pw_gykrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykrcvn = { &wg_gykrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkrcvn = { &a_gzkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkrcvn = { &ia_gzkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvna = { &pw_gzkrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvnd = { &pw_gzkrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvn = { &pw_gzkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkrcvn = { &wg_gzkrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_grd_trig = { &pw_grd_trig, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_grd_trig = { &wg_grd_trig,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxk2rcvn = { &a_gxk2rcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxk2rcvn = { &ia_gxk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk2rcvna = { &pw_gxk2rcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk2rcvnd = { &pw_gxk2rcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk2rcvn = { &pw_gxk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxk2rcvn = { &wg_gxk2rcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyk2rcvn = { &a_gyk2rcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyk2rcvn = { &ia_gyk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk2rcvna = { &pw_gyk2rcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk2rcvnd = { &pw_gyk2rcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk2rcvn = { &pw_gyk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyk2rcvn = { &wg_gyk2rcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzk2rcvn = { &a_gzk2rcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzk2rcvn = { &ia_gzk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk2rcvna = { &pw_gzk2rcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk2rcvnd = { &pw_gzk2rcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk2rcvn = { &pw_gzk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzk2rcvn = { &wg_gzk2rcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rcvn_wait = { &pw_rcvn_wait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rcvn_wait = { &wg_rcvn_wait,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_rcvrbl = { &ia_rcvrbl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_rcvn_fid = { &filter_rcvn_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rcvrbl2 = { &ia_rcvrbl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf0cfh = { &a_gzrf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf0cfh = { &ia_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfha = { &pw_gzrf0cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfhd = { &pw_gzrf0cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfh = { &pw_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf0cfh = { &res_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf0cfh = { &a_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf0cfh = { &ia_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf0cfh = { &pw_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf0cfh = { &res_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf0cfh = { &cyc_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf0cfh = { &off_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf0cfh = { &alpha_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf0cfh = { &thk_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf0cfh = { &gscale_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf0cfh = { &flip_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf0cfh = { &wg_rf0cfh,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_omegarf0cfh = { &a_omegarf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omegarf0cfh = { &ia_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_omegarf0cfh = { &pw_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_omegarf0cfh = { &res_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_omegarf0cfh = { &off_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_omegarf0cfh = { &rfslot_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_omegarf0cfh = { &gscale_omegarf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_omegarf0cfh = { &n_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegarf0cfh = { &wg_omegarf0cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf0kcfh = { &a_gyrf0kcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf0kcfh = { &ia_gyrf0kcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfha = { &pw_gyrf0kcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfhd = { &pw_gyrf0kcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfh = { &pw_gyrf0kcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf0kcfh = { &wg_gyrf0kcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_zticfh = { &pw_zticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_zticfh = { &wg_zticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rticfh = { &pw_rticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rticfh = { &wg_rticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_xticfh = { &pw_xticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xticfh = { &wg_xticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_yticfh = { &pw_yticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_yticfh = { &wg_yticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sticfh = { &pw_sticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sticfh = { &wg_sticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1cfh = { &a_gzrf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cfh = { &ia_gzrf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfha = { &pw_gzrf1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfhd = { &pw_gzrf1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfh = { &pw_gzrf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1cfh = { &a_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cfh = { &ia_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cfh = { &pw_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cfh = { &res_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1cfh = { &temp_res_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1cfh = { &cyc_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cfh = { &off_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1cfh = { &alpha_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1cfh = { &thk_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1cfh = { &gscale_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cfh = { &flip_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cfh = { &wg_rf1cfh,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf2cfh = { &a_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2cfh = { &ia_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2cfh = { &pw_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2cfh = { &res_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2cfh = { &cyc_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2cfh = { &off_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2cfh = { &alpha_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2cfh = { &wg_rf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf3cfh = { &a_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3cfh = { &ia_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3cfh = { &pw_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3cfh = { &res_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf3cfh = { &cyc_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3cfh = { &off_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3cfh = { &alpha_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3cfh = { &wg_rf3cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf4cfh = { &a_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf4cfh = { &ia_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf4cfh = { &pw_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf4cfh = { &res_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf4cfh = { &cyc_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf4cfh = { &off_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf4cfh = { &alpha_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf4cfh = { &wg_rf4cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrf2cfh = { &a_gxrf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrf2cfh = { &ia_gxrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfha = { &pw_gxrf2cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfhd = { &pw_gxrf2cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfh = { &pw_gxrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxrf2cfh = { &wg_gxrf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2cfh = { &a_gyrf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2cfh = { &ia_gyrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfha = { &pw_gyrf2cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfhd = { &pw_gyrf2cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfh = { &pw_gyrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2cfh = { &wg_gyrf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2lcfh = { &a_gzrf2lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2lcfh = { &ia_gzrf2lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfha = { &pw_gzrf2lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfhd = { &pw_gzrf2lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfh = { &pw_gzrf2lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2lcfh = { &wg_gzrf2lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rcfh = { &a_gzrf2rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rcfh = { &ia_gzrf2rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfha = { &pw_gzrf2rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfhd = { &pw_gzrf2rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfh = { &pw_gzrf2rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rcfh = { &wg_gzrf2rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf3cfh = { &a_gyrf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf3cfh = { &ia_gyrf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfha = { &pw_gyrf3cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfhd = { &pw_gyrf3cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfh = { &pw_gyrf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf3cfh = { &wg_gyrf3cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3lcfh = { &a_gzrf3lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3lcfh = { &ia_gzrf3lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfha = { &pw_gzrf3lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfhd = { &pw_gzrf3lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfh = { &pw_gzrf3lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf3lcfh = { &wg_gzrf3lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3rcfh = { &a_gzrf3rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3rcfh = { &ia_gzrf3rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfha = { &pw_gzrf3rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfhd = { &pw_gzrf3rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfh = { &pw_gzrf3rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf3rcfh = { &wg_gzrf3rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1cfh = { &a_gy1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1cfh = { &ia_gy1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfha = { &pw_gy1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfhd = { &pw_gy1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfh = { &pw_gy1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1cfh = { &wg_gy1cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1cfh = { &a_gx1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1cfh = { &ia_gx1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfha = { &pw_gx1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfhd = { &pw_gx1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfh = { &pw_gx1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1cfh = { &wg_gx1cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf4cfh = { &a_gzrf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf4cfh = { &ia_gzrf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4cfha = { &pw_gzrf4cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4cfhd = { &pw_gzrf4cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4cfh = { &pw_gzrf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf4cfh = { &wg_gzrf4cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_slice1 = { &pw_isi_slice1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_slice1 = { &wg_isi_slice1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_slice1 = { &pw_rot_slice1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_slice1 = { &wg_rot_slice1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_slice2 = { &pw_isi_slice2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_slice2 = { &wg_isi_slice2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_slice2 = { &pw_rot_slice2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_slice2 = { &wg_rot_slice2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf4lcfh = { &a_gzrf4lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf4lcfh = { &ia_gzrf4lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4lcfha = { &pw_gzrf4lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4lcfhd = { &pw_gzrf4lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4lcfh = { &pw_gzrf4lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf4lcfh = { &wg_gzrf4lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf4rcfh = { &a_gzrf4rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf4rcfh = { &ia_gzrf4rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4rcfha = { &pw_gzrf4rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4rcfhd = { &pw_gzrf4rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4rcfh = { &pw_gzrf4rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf4rcfh = { &wg_gzrf4rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_cfh_fid = { &filter_cfh_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gykcfh = { &a_gykcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcfh = { &ia_gykcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfha = { &pw_gykcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfhd = { &pw_gykcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfh = { &pw_gykcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcfh = { &wg_gykcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_contrfhubsel = { &ia_contrfhubsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_contrfsel = { &ia_contrfsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_csw_wait = { &pw_csw_wait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_csw_wait = { &wg_csw_wait,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1ftg = { &a_gzrf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1ftg = { &ia_gzrf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftga = { &pw_gzrf1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftgd = { &pw_gzrf1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftg = { &pw_gzrf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1ftg = { &a_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1ftg = { &ia_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1ftg = { &pw_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1ftg = { &res_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1ftg = { &temp_res_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1ftg = { &cyc_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1ftg = { &off_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1ftg = { &alpha_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1ftg = { &thk_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1ftg = { &gscale_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1ftg = { &flip_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1ftg = { &wg_rf1ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1ftg = { &a_gz1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1ftg = { &ia_gz1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftga = { &pw_gz1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftgd = { &pw_gz1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftg = { &pw_gz1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1ftg = { &wg_gz1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2ftg = { &a_gzrf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2ftg = { &ia_gzrf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftga = { &pw_gzrf2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftgd = { &pw_gzrf2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftg = { &pw_gzrf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2ftg = { &a_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2ftg = { &ia_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2ftg = { &pw_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2ftg = { &res_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2ftg = { &temp_res_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2ftg = { &cyc_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2ftg = { &off_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2ftg = { &alpha_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2ftg = { &thk_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2ftg = { &gscale_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2ftg = { &flip_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2ftg = { &wg_rf2ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz2ftg = { &a_gz2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2ftg = { &ia_gz2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftga = { &pw_gz2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftgd = { &pw_gz2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftg = { &pw_gz2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2ftg = { &wg_gz2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3ftg = { &a_gzrf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3ftg = { &ia_gzrf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftga = { &pw_gzrf3ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftgd = { &pw_gzrf3ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftg = { &pw_gzrf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf3ftg = { &a_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3ftg = { &ia_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3ftg = { &pw_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3ftg = { &res_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf3ftg = { &temp_res_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf3ftg = { &cyc_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3ftg = { &off_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3ftg = { &alpha_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf3ftg = { &thk_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf3ftg = { &gscale_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3ftg = { &flip_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3ftg = { &wg_rf3ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz3ftg = { &a_gz3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz3ftg = { &ia_gz3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftga = { &pw_gz3ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftgd = { &pw_gz3ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftg = { &pw_gz3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz3ftg = { &wg_gz3ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1ftg = { &a_gx1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1ftg = { &ia_gx1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftga = { &pw_gx1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftgd = { &pw_gx1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftg = { &pw_gx1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1ftg = { &wg_gx1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1bftg = { &a_gx1bftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1bftg = { &ia_gx1bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftga = { &pw_gx1bftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftgd = { &pw_gx1bftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftg = { &pw_gx1bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1bftg = { &wg_gx1bftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw1ftg = { &a_gxw1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw1ftg = { &ia_gxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftga = { &pw_gxw1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftgd = { &pw_gxw1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftg = { &pw_gxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw1ftg = { &wg_gxw1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_postgxw1ftg = { &a_postgxw1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_postgxw1ftg = { &ia_postgxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftga = { &pw_postgxw1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftgd = { &pw_postgxw1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftg = { &pw_postgxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_postgxw1ftg = { &wg_postgxw1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1ftg = { &filter_echo1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gz2bftg = { &a_gz2bftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2bftg = { &ia_gz2bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftga = { &pw_gz2bftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftgd = { &pw_gz2bftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftg = { &pw_gz2bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2bftg = { &wg_gz2bftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx2ftg = { &a_gx2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2ftg = { &ia_gx2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftga = { &pw_gx2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftgd = { &pw_gx2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftg = { &pw_gx2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2ftg = { &wg_gx2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2ftg = { &a_gxw2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2ftg = { &ia_gxw2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftga = { &pw_gxw2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftgd = { &pw_gxw2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftg = { &pw_gxw2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2ftg = { &wg_gxw2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx2test = { &a_gx2test, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2test = { &ia_gx2test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2testa = { &pw_gx2testa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2testd = { &pw_gx2testd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2test = { &pw_gx2test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2test = { &wg_gx2test,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo2ftg = { &filter_echo2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_rf1xtg = { &a_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1xtg = { &ia_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1xtg = { &pw_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1xtg = { &res_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1xtg = { &cyc_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1xtg = { &off_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1xtg = { &alpha_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1xtg = { &wg_rf1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf1xtg = { &a_gyrf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf1xtg = { &ia_gyrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1xtga = { &pw_gyrf1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1xtgd = { &pw_gyrf1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1xtg = { &pw_gyrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf1xtg = { &wg_gyrf1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1xtg = { &a_gzrf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1xtg = { &ia_gzrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtga = { &pw_gzrf1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtgd = { &pw_gzrf1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtg = { &pw_gzrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1xtg = { &wg_gzrf1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykxtgl = { &a_gykxtgl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykxtgl = { &ia_gykxtgl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgla = { &pw_gykxtgla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgld = { &pw_gykxtgld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgl = { &pw_gykxtgl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykxtgl = { &wg_gykxtgl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_rf3xtg = { &a_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3xtg = { &ia_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3xtg = { &pw_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3xtg = { &res_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3xtg = { &off_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3xtg = { &alpha_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf3xtg = { &gscale_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3xtg = { &flip_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phs_rf3xtg = { &ia_phs_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3xtg = { &wg_rf3xtg,  0,  WF_MAX_PROCESSORS*2-1,  
                                            TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1xtg = { &a_gz1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1xtg = { &ia_gz1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtga = { &pw_gz1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtgd = { &pw_gz1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtg = { &pw_gz1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1xtg = { &wg_gz1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2xtg = { &a_gzrf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2xtg = { &ia_gzrf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtga = { &pw_gzrf2xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtgd = { &pw_gzrf2xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtg = { &pw_gzrf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2xtg = { &a_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2xtg = { &ia_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2xtg = { &pw_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2xtg = { &res_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2xtg = { &temp_res_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2xtg = { &cyc_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2xtg = { &off_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2xtg = { &alpha_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2xtg = { &thk_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2xtg = { &gscale_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2xtg = { &flip_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2xtg = { &wg_rf2xtg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz2xtg = { &a_gz2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2xtg = { &ia_gz2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtga = { &pw_gz2xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtgd = { &pw_gz2xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtg = { &pw_gz2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2xtg = { &wg_gz2xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_rf4xtg = { &a_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf4xtg = { &ia_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf4xtg = { &pw_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf4xtg = { &res_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf4xtg = { &off_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf4xtg = { &alpha_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf4xtg = { &gscale_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf4xtg = { &flip_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phs_rf4xtg = { &ia_phs_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf4xtg = { &wg_rf4xtg,  0,  WF_MAX_PROCESSORS*2-1,  
                                            TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykxtgr = { &a_gykxtgr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykxtgr = { &ia_gykxtgr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgra = { &pw_gykxtgra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgrd = { &pw_gykxtgrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgr = { &pw_gykxtgr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykxtgr = { &wg_gykxtgr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1bxtg = { &a_gx1bxtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1bxtg = { &ia_gx1bxtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtga = { &pw_gx1bxtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtgd = { &pw_gx1bxtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtg = { &pw_gx1bxtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1bxtg = { &wg_gx1bxtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw1xtg = { &a_gxw1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw1xtg = { &ia_gxw1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtga = { &pw_gxw1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtgd = { &pw_gxw1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtg = { &pw_gxw1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw1xtg = { &wg_gxw1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1xtg = { &filter_echo1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1as = { &a_gzrf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1as = { &ia_gzrf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1asa = { &pw_gzrf1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1asd = { &pw_gzrf1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1as = { &pw_gzrf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1as = { &a_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1as = { &ia_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1as = { &pw_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1as = { &res_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1as = { &temp_res_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1as = { &cyc_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1as = { &off_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1as = { &alpha_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1as = { &thk_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1as = { &gscale_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1as = { &flip_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1as = { &wg_rf1as,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1as = { &a_gz1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1as = { &ia_gz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1asa = { &pw_gz1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1asd = { &pw_gz1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1as = { &pw_gz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1as = { &wg_gz1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwas = { &a_gxwas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwas = { &ia_gxwas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwasa = { &pw_gxwasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwasd = { &pw_gxwasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwas = { &pw_gxwas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwas = { &wg_gxwas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1as = { &filter_echo1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1as = { &a_gx1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1as = { &ia_gx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1asa = { &pw_gx1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1asd = { &pw_gx1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1as = { &pw_gx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1as = { &wg_gx1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1as = { &a_gy1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1asa = { &a_gy1asa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1asb = { &a_gy1asb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1as = { &ia_gy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1aswa = { &ia_gy1aswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1aswb = { &ia_gy1aswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1asa = { &pw_gy1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1asd = { &pw_gy1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1as = { &pw_gy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1as = { &wg_gy1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1ras = { &a_gy1ras, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rasa = { &a_gy1rasa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rasb = { &a_gy1rasb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1ras = { &ia_gy1ras, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1raswa = { &ia_gy1raswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1raswb = { &ia_gy1raswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rasa = { &pw_gy1rasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rasd = { &pw_gy1rasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1ras = { &pw_gy1ras, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1ras = { &wg_gy1ras,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkas = { &a_gxkas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkas = { &ia_gxkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkasa = { &pw_gxkasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkasd = { &pw_gxkasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkas = { &pw_gxkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkas = { &wg_gxkas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkas = { &a_gzkas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkas = { &ia_gzkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkasa = { &pw_gzkasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkasd = { &pw_gzkasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkas = { &pw_gzkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkas = { &wg_gzkas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xdixon = { &a_xdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xdixon = { &ia_xdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xdixon = { &pw_xdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xdixon = { &wg_xdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ydixon = { &a_ydixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ydixon = { &ia_ydixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ydixon = { &pw_ydixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ydixon = { &wg_ydixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_zdixon = { &a_zdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_zdixon = { &ia_zdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_zdixon = { &pw_zdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_zdixon = { &wg_zdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_sdixon = { &a_sdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_sdixon = { &ia_sdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_sdixon = { &pw_sdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sdixon = { &wg_sdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_sdixon2 = { &a_sdixon2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_sdixon2 = { &ia_sdixon2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_sdixon2 = { &pw_sdixon2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sdixon2 = { &wg_sdixon2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_dDDIQ = { &ia_dDDIQ, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _res_rf1rs = { &res_rf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1rs = { &wg_rf1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1rs = { &a_gzrf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1rs = { &ia_gzrf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1rsa = { &pw_gzrf1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1rsd = { &pw_gzrf1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1rs = { &pw_gzrf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1rs = { &wg_gzrf1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkbsrs = { &a_gxkbsrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkbsrs = { &ia_gxkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsrsa = { &pw_gxkbsrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsrsd = { &pw_gxkbsrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsrs = { &pw_gxkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkbsrs = { &wg_gxkbsrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1rs = { &a_gz1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1rs = { &ia_gz1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1rsa = { &pw_gz1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1rsd = { &pw_gz1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1rs = { &pw_gz1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1rs = { &wg_gz1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rfbrs = { &a_rfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfbrs = { &ia_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfbrs = { &pw_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfbrs = { &res_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfbrs = { &off_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rfbrs = { &rfslot_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rfbrs = { &gscale_rfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rfbrs = { &n_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfbrs = { &wg_rfbrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_thetarfbrs = { &a_thetarfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarfbrs = { &ia_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarfbrs = { &pw_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarfbrs = { &res_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarfbrs = { &off_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_thetarfbrs = { &rfslot_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_thetarfbrs = { &gscale_thetarfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_thetarfbrs = { &n_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_thetarfbrs = { &wg_thetarfbrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkbsrs = { &a_gzkbsrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkbsrs = { &ia_gzkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsrsa = { &pw_gzkbsrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsrsd = { &pw_gzkbsrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsrs = { &pw_gzkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkbsrs = { &wg_gzkbsrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwrs = { &a_gxwrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwrs = { &ia_gxwrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwrsa = { &pw_gxwrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwrsd = { &pw_gxwrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwrs = { &pw_gxwrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwrs = { &wg_gxwrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1rs = { &filter_echo1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx2rs = { &a_gx2rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2rs = { &ia_gx2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2rsa = { &pw_gx2rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2rsd = { &pw_gx2rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2rs = { &pw_gx2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2rs = { &wg_gx2rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy2rs = { &a_gy2rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2rsa = { &a_gy2rsa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2rsb = { &a_gy2rsb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2rs = { &ia_gy2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2rswa = { &ia_gy2rswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2rswb = { &ia_gy2rswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2rsa = { &pw_gy2rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2rsd = { &pw_gy2rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2rs = { &pw_gy2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy2rs = { &wg_gy2rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2rs = { &a_gxw2rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2rs = { &ia_gxw2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2rsa = { &pw_gxw2rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2rsd = { &pw_gxw2rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2rs = { &pw_gxw2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2rs = { &wg_gxw2rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1rs = { &a_gx1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1rs = { &ia_gx1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1rsa = { &pw_gx1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1rsd = { &pw_gx1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1rs = { &pw_gx1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1rs = { &wg_gx1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rrs = { &a_gy1rrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rrsa = { &a_gy1rrsa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rrsb = { &a_gy1rrsb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rrs = { &ia_gy1rrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rrswa = { &ia_gy1rrswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rrswb = { &ia_gy1rrswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rrsa = { &pw_gy1rrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rrsd = { &pw_gy1rrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rrs = { &pw_gy1rrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rrs = { &wg_gy1rrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rs = { &a_gy1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rsa = { &a_gy1rsa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rsb = { &a_gy1rsb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rs = { &ia_gy1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rswa = { &ia_gy1rswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rswb = { &ia_gy1rswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rsa = { &pw_gy1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rsd = { &pw_gy1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rs = { &pw_gy1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rs = { &wg_gy1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkrs = { &a_gzkrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkrs = { &ia_gzkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrsa = { &pw_gzkrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrsd = { &pw_gzkrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrs = { &pw_gzkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkrs = { &wg_gzkrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkrs = { &a_gxkrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkrs = { &ia_gxkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrsa = { &pw_gxkrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrsd = { &pw_gxkrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrs = { &pw_gxkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkrs = { &wg_gxkrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rf1dtg = { &res_rf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1dtg = { &wg_rf1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1dtg = { &a_gzrf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1dtg = { &ia_gzrf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1dtga = { &pw_gzrf1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1dtgd = { &pw_gzrf1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1dtg = { &pw_gzrf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1dtg = { &wg_gzrf1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkbsdtg = { &a_gxkbsdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkbsdtg = { &ia_gxkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsdtga = { &pw_gxkbsdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsdtgd = { &pw_gxkbsdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsdtg = { &pw_gxkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkbsdtg = { &wg_gxkbsdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1dtg = { &a_gz1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1dtg = { &ia_gz1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1dtga = { &pw_gz1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1dtgd = { &pw_gz1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1dtg = { &pw_gz1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1dtg = { &wg_gz1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rfbdtg = { &a_rfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfbdtg = { &ia_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfbdtg = { &pw_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfbdtg = { &res_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfbdtg = { &off_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rfbdtg = { &rfslot_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rfbdtg = { &gscale_rfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rfbdtg = { &n_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfbdtg = { &wg_rfbdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_thetarfbdtg = { &a_thetarfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarfbdtg = { &ia_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarfbdtg = { &pw_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarfbdtg = { &res_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarfbdtg = { &off_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_thetarfbdtg = { &rfslot_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_thetarfbdtg = { &gscale_thetarfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_thetarfbdtg = { &n_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_thetarfbdtg = { &wg_thetarfbdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkbsdtg = { &a_gzkbsdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkbsdtg = { &ia_gzkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsdtga = { &pw_gzkbsdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsdtgd = { &pw_gzkbsdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsdtg = { &pw_gzkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkbsdtg = { &wg_gzkbsdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwdtg = { &a_gxwdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwdtg = { &ia_gxwdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwdtga = { &pw_gxwdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwdtgd = { &pw_gxwdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwdtg = { &pw_gxwdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwdtg = { &wg_gxwdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1dtg = { &filter_echo1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx2dtg = { &a_gx2dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2dtg = { &ia_gx2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2dtga = { &pw_gx2dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2dtgd = { &pw_gx2dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2dtg = { &pw_gx2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2dtg = { &wg_gx2dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy2dtg = { &a_gy2dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2dtga = { &a_gy2dtga, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2dtgb = { &a_gy2dtgb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2dtg = { &ia_gy2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2dtgwa = { &ia_gy2dtgwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2dtgwb = { &ia_gy2dtgwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2dtga = { &pw_gy2dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2dtgd = { &pw_gy2dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2dtg = { &pw_gy2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy2dtg = { &wg_gy2dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2dtg = { &a_gxw2dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2dtg = { &ia_gxw2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2dtga = { &pw_gxw2dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2dtgd = { &pw_gxw2dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2dtg = { &pw_gxw2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2dtg = { &wg_gxw2dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1dtg = { &a_gx1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1dtg = { &ia_gx1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1dtga = { &pw_gx1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1dtgd = { &pw_gx1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1dtg = { &pw_gx1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1dtg = { &wg_gx1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rdtg = { &a_gy1rdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rdtga = { &a_gy1rdtga, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rdtgb = { &a_gy1rdtgb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rdtg = { &ia_gy1rdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rdtgwa = { &ia_gy1rdtgwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rdtgwb = { &ia_gy1rdtgwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rdtga = { &pw_gy1rdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rdtgd = { &pw_gy1rdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rdtg = { &pw_gy1rdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rdtg = { &wg_gy1rdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1dtg = { &a_gy1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1dtga = { &a_gy1dtga, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1dtgb = { &a_gy1dtgb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1dtg = { &ia_gy1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1dtgwa = { &ia_gy1dtgwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1dtgwb = { &ia_gy1dtgwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1dtga = { &pw_gy1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1dtgd = { &pw_gy1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1dtg = { &pw_gy1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1dtg = { &wg_gy1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkdtg = { &a_gzkdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkdtg = { &ia_gzkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkdtga = { &pw_gzkdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkdtgd = { &pw_gzkdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkdtg = { &pw_gzkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkdtg = { &wg_gzkdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkdtg = { &a_gxkdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkdtg = { &ia_gxkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkdtga = { &pw_gxkdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkdtgd = { &pw_gxkdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkdtg = { &pw_gxkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkdtg = { &wg_gxkdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf1cal = { &a_rf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cal = { &ia_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cal = { &pw_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cal = { &res_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cal = { &off_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rf1cal = { &rfslot_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rf1cal = { &gscale_rf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rf1cal = { &n_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cal = { &wg_rf1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1cal = { &a_gzrf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cal = { &ia_gzrf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cala = { &pw_gzrf1cala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cald = { &pw_gzrf1cald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cal = { &pw_gzrf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1cal = { &wg_gzrf1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzcombcal = { &a_gzcombcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcala = { &a_gzcombcala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcalb = { &a_gzcombcalb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcal = { &ia_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcalwa = { &ia_gzcombcalwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcalwb = { &ia_gzcombcalwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcala = { &pw_gzcombcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcald = { &pw_gzcombcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcalf = { &pw_gzcombcalf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcal = { &pw_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzcombcal = { &res_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzcombcal = { &per_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcombcal = { &wg_gzcombcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzprcal = { &a_gzprcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcala = { &a_gzprcala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcalb = { &a_gzprcalb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcal = { &ia_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcalwa = { &ia_gzprcalwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcalwb = { &ia_gzprcalwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcala = { &pw_gzprcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcald = { &pw_gzprcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcalf = { &pw_gzprcalf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcal = { &pw_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzprcal = { &res_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzprcal = { &per_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzprcal = { &wg_gzprcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwcal = { &a_gxwcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwcal = { &ia_gxwcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcala = { &pw_gxwcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcald = { &pw_gxwcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcal = { &pw_gxwcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwcal = { &wg_gxwcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1cal = { &filter_echo1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1cal = { &a_gx1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1cala = { &a_gx1cala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1calb = { &a_gx1calb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1cal = { &ia_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1calwa = { &ia_gx1calwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1calwb = { &ia_gx1calwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cala = { &pw_gx1cala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cald = { &pw_gx1cald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1calf = { &pw_gx1calf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cal = { &pw_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gx1cal = { &res_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gx1cal = { &per_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1cal = { &wg_gx1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1cal = { &a_gy1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1cala = { &a_gy1cala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1calb = { &a_gy1calb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1cal = { &ia_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1calwa = { &ia_gy1calwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1calwb = { &ia_gy1calwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cala = { &pw_gy1cala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cald = { &pw_gy1cald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1calf = { &pw_gy1calf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cal = { &pw_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1cal = { &res_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1cal = { &per_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1cal = { &wg_gy1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rcal = { &a_gy1rcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcala = { &a_gy1rcala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcalb = { &a_gy1rcalb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcal = { &ia_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcalwa = { &ia_gy1rcalwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcalwb = { &ia_gy1rcalwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcala = { &pw_gy1rcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcald = { &pw_gy1rcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcalf = { &pw_gy1rcalf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcal = { &pw_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1rcal = { &res_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1rcal = { &per_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rcal = { &wg_gy1rcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf1coil = { &a_rf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1coil = { &ia_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1coil = { &pw_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1coil = { &res_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1coil = { &off_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rf1coil = { &rfslot_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rf1coil = { &gscale_rf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rf1coil = { &n_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1coil = { &wg_rf1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1coil = { &a_gzrf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1coil = { &ia_gzrf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1coila = { &pw_gzrf1coila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1coild = { &pw_gzrf1coild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1coil = { &pw_gzrf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1coil = { &wg_gzrf1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzcombcoil = { &a_gzcombcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcoila = { &a_gzcombcoila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcoilb = { &a_gzcombcoilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcoil = { &ia_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcoilwa = { &ia_gzcombcoilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcoilwb = { &ia_gzcombcoilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoila = { &pw_gzcombcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoild = { &pw_gzcombcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoilf = { &pw_gzcombcoilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoil = { &pw_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzcombcoil = { &res_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzcombcoil = { &per_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcombcoil = { &wg_gzcombcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzprcoil = { &a_gzprcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcoila = { &a_gzprcoila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcoilb = { &a_gzprcoilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcoil = { &ia_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcoilwa = { &ia_gzprcoilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcoilwb = { &ia_gzprcoilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoila = { &pw_gzprcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoild = { &pw_gzprcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoilf = { &pw_gzprcoilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoil = { &pw_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzprcoil = { &res_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzprcoil = { &per_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzprcoil = { &wg_gzprcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwcoil = { &a_gxwcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwcoil = { &ia_gxwcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcoila = { &pw_gxwcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcoild = { &pw_gxwcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcoil = { &pw_gxwcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwcoil = { &wg_gxwcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1coil = { &filter_echo1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1coil = { &a_gx1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1coila = { &a_gx1coila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1coilb = { &a_gx1coilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1coil = { &ia_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1coilwa = { &ia_gx1coilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1coilwb = { &ia_gx1coilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coila = { &pw_gx1coila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coild = { &pw_gx1coild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coilf = { &pw_gx1coilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coil = { &pw_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gx1coil = { &res_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gx1coil = { &per_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1coil = { &wg_gx1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1coil = { &a_gy1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1coila = { &a_gy1coila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1coilb = { &a_gy1coilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1coil = { &ia_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1coilwa = { &ia_gy1coilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1coilwb = { &ia_gy1coilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coila = { &pw_gy1coila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coild = { &pw_gy1coild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coilf = { &pw_gy1coilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coil = { &pw_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1coil = { &res_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1coil = { &per_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1coil = { &wg_gy1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rcoil = { &a_gy1rcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcoila = { &a_gy1rcoila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcoilb = { &a_gy1rcoilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcoil = { &ia_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcoilwa = { &ia_gy1rcoilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcoilwb = { &ia_gy1rcoilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoila = { &pw_gy1rcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoild = { &pw_gy1rcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoilf = { &pw_gy1rcoilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoil = { &pw_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1rcoil = { &res_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1rcoil = { &per_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rcoil = { &wg_gy1rcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _start_gycylra = { &start_gycylra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _end_gycylra = { &end_gycylra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_stgycylra = { &ia_stgycylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_endgycylra = { &ia_endgycylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gycylra = { &pw_gycylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gycylra = { &res_gycylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gycylra = { &wg_gycylra,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _start_gzcylra = { &start_gzcylra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _end_gzcylra = { &end_gzcylra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_stgzcylra = { &ia_stgzcylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_endgzcylra = { &ia_endgzcylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcylra = { &pw_gzcylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzcylra = { &res_gzcylra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcylra = { &wg_gzcylra,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rfcylr = { &res_rfcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfcylr = { &wg_rfcylr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_thcylr = { &res_thcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_thcylr = { &wg_thcylr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_gycylr = { &res_gycylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gycylr = { &wg_gycylr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_gzcylr = { &res_gzcylr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcylr = { &wg_gzcylr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1mon = { &a_gzrf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1mon = { &ia_gzrf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mona = { &pw_gzrf1mona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mond = { &pw_gzrf1mond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mon = { &pw_gzrf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1mon = { &a_rf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1mon = { &ia_rf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1mon = { &pw_rf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1mon = { &res_rf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1mon = { &temp_res_rf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1mon = { &cyc_rf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1mon = { &off_rf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1mon = { &alpha_rf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1mon = { &thk_rf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1mon = { &gscale_rf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1mon = { &flip_rf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1mon = { &wg_rf1mon,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf1mon = { &a_gyrf1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf1mon = { &ia_gyrf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mona = { &pw_gyrf1mona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mond = { &pw_gyrf1mond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mon = { &pw_gyrf1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf1mon = { &wg_gyrf1mon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1mon = { &a_gz1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1mon = { &ia_gz1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mona = { &pw_gz1mona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mond = { &pw_gz1mond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mon = { &pw_gz1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1mon = { &wg_gz1mon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1mon = { &a_gy1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1mon = { &ia_gy1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mona = { &pw_gy1mona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mond = { &pw_gy1mond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mon = { &pw_gy1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1mon = { &wg_gy1mon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2mon = { &a_gyrf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2mon = { &ia_gyrf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2mona = { &pw_gyrf2mona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2mond = { &pw_gyrf2mond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2mon = { &pw_gyrf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2mon = { &a_rf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2mon = { &ia_rf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2mon = { &pw_rf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2mon = { &res_rf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2mon = { &temp_res_rf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2mon = { &cyc_rf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2mon = { &off_rf2mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2mon = { &alpha_rf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2mon = { &thk_rf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2mon = { &gscale_rf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2mon = { &flip_rf2mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2mon = { &wg_rf2mon,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2lmon = { &a_gyrf2lmon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2lmon = { &ia_gyrf2lmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2lmona = { &pw_gyrf2lmona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2lmond = { &pw_gyrf2lmond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2lmon = { &pw_gyrf2lmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2lmon = { &wg_gyrf2lmon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2rmon = { &a_gyrf2rmon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2rmon = { &ia_gyrf2rmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2rmona = { &pw_gyrf2rmona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2rmond = { &pw_gyrf2rmond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2rmon = { &pw_gyrf2rmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2rmon = { &wg_gyrf2rmon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwmon = { &a_gxwmon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwmon = { &ia_gxwmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmona = { &pw_gxwmona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmond = { &pw_gxwmond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmon = { &pw_gxwmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwmon = { &wg_gxwmon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1mon = { &a_gx1mon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1mon = { &ia_gx1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mona = { &pw_gx1mona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mond = { &pw_gx1mond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mon = { &pw_gx1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1mon = { &wg_gx1mon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxfcmon = { &a_gxfcmon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxfcmon = { &ia_gxfcmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxfcmona = { &pw_gxfcmona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxfcmond = { &pw_gxfcmond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxfcmon = { &pw_gxfcmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxfcmon = { &wg_gxfcmon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1mon = { &filter_echo1mon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzkmon = { &a_gzkmon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkmon = { &ia_gzkmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkmona = { &pw_gzkmona, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkmond = { &pw_gzkmond, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkmon = { &pw_gzkmon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkmon = { &wg_gzkmon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _start_gycylratipup = { &start_gycylratipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _end_gycylratipup = { &end_gycylratipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_stgycylratipup = { &ia_stgycylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_endgycylratipup = { &ia_endgycylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gycylratipup = { &pw_gycylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gycylratipup = { &res_gycylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gycylratipup = { &wg_gycylratipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _start_gzcylratipup = { &start_gzcylratipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _end_gzcylratipup = { &end_gzcylratipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_stgzcylratipup = { &ia_stgzcylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_endgzcylratipup = { &ia_endgzcylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcylratipup = { &pw_gzcylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzcylratipup = { &res_gzcylratipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcylratipup = { &wg_gzcylratipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rfcylrtipup = { &res_rfcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfcylrtipup = { &wg_rfcylrtipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_thcylrtipup = { &res_thcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_thcylrtipup = { &wg_thcylrtipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_gycylrtipup = { &res_gycylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gycylrtipup = { &wg_gycylrtipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_gzcylrtipup = { &res_gzcylrtipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcylrtipup = { &wg_gzcylrtipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrfmontipup = { &a_gyrfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrfmontipup = { &ia_gyrfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfmontipupa = { &pw_gyrfmontipupa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfmontipupd = { &pw_gyrfmontipupd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfmontipup = { &pw_gyrfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfmontipup = { &a_rfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfmontipup = { &ia_rfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfmontipup = { &pw_rfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfmontipup = { &res_rfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfmontipup = { &temp_res_rfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfmontipup = { &cyc_rfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfmontipup = { &off_rfmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfmontipup = { &alpha_rfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfmontipup = { &thk_rfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfmontipup = { &gscale_rfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfmontipup = { &flip_rfmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfmontipup = { &wg_rfmontipup,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkmontipup = { &a_gzkmontipup, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkmontipup = { &ia_gzkmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkmontipupa = { &pw_gzkmontipupa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkmontipupd = { &pw_gzkmontipupd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkmontipup = { &pw_gzkmontipup, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkmontipup = { &wg_gzkmontipup,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };

int _temp0_pw_rf1;
float _temp1_a_rf1;
float _temp2_flip_rf1;
int _temp3_res_rf1;
int _temp4_wg_rf1;
float _temp5_max_rfov_fa;
float _temp6_a_gyex1;
int _temp7_pw_gyex1;
int _temp8_pw_gyex1a;
int _temp9_pw_gyex1d;
int _temp10_ex_pw_rampy;
int _temp11_ex_pw_rampy;
int _temp12_ex_pw_constanty;
int _temp13_pw_gyex1a;
int _temp14_pw_gyex1d;
int _temp15_pw_gyex1;
int _temp16_ex_pw_rampz;
int _temp17_ex_pw_rampz;
int _temp18_ex_pw_constantz;
int _temp19_pw_gzrf1a;
int _temp20_pw_gzrf1d;
int _temp21_pw_gzrf1;
int _temp22_pw_gyrfwka;
float _temp23_a_gwksp;
int _temp24_pw_gwkspa;
int _temp25_pw_gwksp;
int _temp26_pw_gwkspd;
float _temp27_a_gzrf1;
int _temp28_pw_gzrf1a;
int _temp29_res_rf1;
float _temp30_flip_rf1;
int _temp31_pw_rf1;
float _temp32_a_rf1;
int _temp33_pw_rf2;
float _temp34_a_rf2;
float _temp35_flip_rf2;
int _temp36_res_rf2;
int _temp37_wg_rf2;
int _temp38_pw_rf2;
float _temp39_a_rf2;
float _temp40_flip_rf2;
int _temp41_res_rf2;
int _temp42_wg_rf2;
int _temp43_pw_rf2;
float _temp44_a_rf2;
float _temp45_flip_rf2;
int _temp46_res_rf2;
int _temp47_wg_rf2;
int _temp48_wg_rf2;
float _temp49_max_multiband_rf1_fa;
float _temp50_max_multiband_rf2_fa;
int _temp51_grad_spec_ctrl;
float _temp52_glimit;
float _temp53_srate;
int _temp54_initnewgeo;
int _temp55_initnewgeo;
int _temp56_initnewgeo;
float _temp57_a_gxw;
int _temp58_pw_gxw;
int _temp59_pw_gxwad;
float _temp60_a_gyb;
int _temp61_pw_gyb;
int _temp62_pw_gyba;
float _temp63_a_gzb;
int _temp64_pw_gzb;
int _temp65_pw_gzba;
int _temp66_temprhfrsize;
int _temp67_samp_period;
int _temp68_pw_gxgap;
int _temp69_vol_scale_type;
int _temp70_vol_scale_constraint_type;
int _temp71_pw_rfsx1;
float _temp72_a_rfsx1;
float _temp73_flip_rfsx1;
int _temp74_pw_rfsx2;
float _temp75_a_rfsx2;
float _temp76_flip_rfsx2;
int _temp77_pw_rfsy1;
float _temp78_a_rfsy1;
float _temp79_flip_rfsy1;
int _temp80_pw_rfsy2;
float _temp81_a_rfsy2;
float _temp82_flip_rfsy2;
int _temp83_pw_rfsz1;
float _temp84_a_rfsz1;
float _temp85_flip_rfsz1;
int _temp86_pw_rfsz2;
float _temp87_a_rfsz2;
float _temp88_flip_rfsz2;
int _temp89_pw_rfse1;
float _temp90_a_rfse1;
float _temp91_flip_rfse1;
int _temp92_pw_rfse2;
float _temp93_a_rfse2;
float _temp94_flip_rfse2;
int _temp95_pw_rfse3;
float _temp96_a_rfse3;
float _temp97_flip_rfse3;
int _temp98_pw_rfse4;
float _temp99_a_rfse4;
float _temp100_flip_rfse4;
int _temp101_pw_rfse5;
float _temp102_a_rfse5;
float _temp103_flip_rfse5;
int _temp104_pw_rfse6;
float _temp105_a_rfse6;
float _temp106_flip_rfse6;
int _temp107_pw_rfsx1;
float _temp108_a_rfsx1;
float _temp109_flip_rfsx1;
int _temp110_pw_rfsx2;
float _temp111_a_rfsx2;
float _temp112_flip_rfsx2;
int _temp113_pw_rfsy1;
float _temp114_a_rfsy1;
float _temp115_flip_rfsy1;
int _temp116_pw_rfsy2;
float _temp117_a_rfsy2;
float _temp118_flip_rfsy2;
int _temp119_pw_rfsz1;
float _temp120_a_rfsz1;
float _temp121_flip_rfsz1;
int _temp122_pw_rfsz2;
float _temp123_a_rfsz2;
float _temp124_flip_rfsz2;
int _temp125_pw_rfse1;
float _temp126_a_rfse1;
float _temp127_flip_rfse1;
int _temp128_pw_rfse2;
float _temp129_a_rfse2;
float _temp130_flip_rfse2;
int _temp131_pw_rfse3;
float _temp132_a_rfse3;
float _temp133_flip_rfse3;
int _temp134_pw_rfse4;
float _temp135_a_rfse4;
float _temp136_flip_rfse4;
int _temp137_pw_rfse5;
float _temp138_a_rfse5;
float _temp139_flip_rfse5;
int _temp140_pw_rfse6;
float _temp141_a_rfse6;
float _temp142_flip_rfse6;
int _temp143_pw_rfsx1;
float _temp144_a_rfsx1;
float _temp145_flip_rfsx1;
int _temp146_pw_rfsx2;
float _temp147_a_rfsx2;
float _temp148_flip_rfsx2;
int _temp149_pw_rfsy1;
float _temp150_a_rfsy1;
float _temp151_flip_rfsy1;
int _temp152_pw_rfsy2;
float _temp153_a_rfsy2;
float _temp154_flip_rfsy2;
int _temp155_pw_rfsz1;
float _temp156_a_rfsz1;
float _temp157_flip_rfsz1;
int _temp158_pw_rfsz2;
float _temp159_a_rfsz2;
float _temp160_flip_rfsz2;
int _temp161_pw_rfse1;
float _temp162_a_rfse1;
float _temp163_flip_rfse1;
int _temp164_pw_rfse2;
float _temp165_a_rfse2;
float _temp166_flip_rfse2;
int _temp167_pw_rfse3;
float _temp168_a_rfse3;
float _temp169_flip_rfse3;
int _temp170_pw_rfse4;
float _temp171_a_rfse4;
float _temp172_flip_rfse4;
int _temp173_pw_rfse5;
float _temp174_a_rfse5;
float _temp175_flip_rfse5;
int _temp176_pw_rfse6;
float _temp177_a_rfse6;
float _temp178_flip_rfse6;
int _temp179_pw_gxkse1a;
int _temp180_pw_gxkse2a;
int _temp181_pw_gxkse3a;
int _temp182_pw_gxkse4a;
int _temp183_pw_gxkse5a;
int _temp184_pw_gxkse6a;
int _temp185_pw_gxksx1a;
int _temp186_pw_gxksx2a;
int _temp187_pw_gxksy1a;
int _temp188_pw_gxksy2a;
int _temp189_pw_gxksz1a;
int _temp190_pw_gxksz2a;
int _temp191_pw_gxkse1d;
int _temp192_pw_gxkse2d;
int _temp193_pw_gxkse3d;
int _temp194_pw_gxkse4d;
int _temp195_pw_gxkse5d;
int _temp196_pw_gxkse6d;
int _temp197_pw_gxksx1d;
int _temp198_pw_gxksx2d;
int _temp199_pw_gxksy1d;
int _temp200_pw_gxksy2d;
int _temp201_pw_gxksz1d;
int _temp202_pw_gxksz2d;
int _temp203_pw_gxkse1;
int _temp204_pw_gxkse2;
int _temp205_pw_gxkse3;
int _temp206_pw_gxkse4;
int _temp207_pw_gxkse5;
int _temp208_pw_gxkse6;
int _temp209_pw_gxksx1;
int _temp210_pw_gxksx2;
int _temp211_pw_gxksy1;
int _temp212_pw_gxksy2;
int _temp213_pw_gxksz1;
int _temp214_pw_gxksz2;
float _temp215_a_gxkse1;
float _temp216_a_gxkse2;
float _temp217_a_gxkse3;
float _temp218_a_gxkse4;
float _temp219_a_gxkse5;
float _temp220_a_gxkse6;
float _temp221_a_gxksx1;
float _temp222_a_gxksx2;
float _temp223_a_gxksy1;
float _temp224_a_gxksy2;
float _temp225_a_gxksz1;
float _temp226_a_gxksz2;
int _temp227_pw_rf1;
float _temp228_a_rf1;
float _temp229_flip_rf1;
int _temp230_res_rf1;
int _temp231_wg_rf1;
int _temp232_pw_rf1;
float _temp233_a_rf1;
float _temp234_flip_rf1;
int _temp235_res_rf1;
int _temp236_wg_rf1;
int _temp237_pw_rf1;
float _temp238_a_rf1;
float _temp239_flip_rf1;
int _temp240_res_rf1;
int _temp241_wg_rf1;
int _temp242_pw_rf1;
float _temp243_a_rf1;
float _temp244_flip_rf1;
int _temp245_res_rf1;
int _temp246_wg_rf1;
int _temp247_pw_rf1;
float _temp248_a_rf1;
float _temp249_flip_rf1;
int _temp250_res_rf1;
int _temp251_wg_rf1;
int _temp252_pw_rf1;
float _temp253_a_rf1;
float _temp254_flip_rf1;
int _temp255_res_rf1;
int _temp256_wg_rf1;
int _temp257_pw_rf1;
float _temp258_a_rf1;
float _temp259_flip_rf1;
int _temp260_res_rf1;
int _temp261_wg_rf1;
int _temp262_pw_rf1;
float _temp263_a_rf1;
float _temp264_flip_rf1;
int _temp265_res_rf1;
int _temp266_wg_rf1;
int _temp267_pw_rf1;
float _temp268_a_rf1;
float _temp269_flip_rf1;
int _temp270_res_rf1;
int _temp271_wg_rf1;
int _temp272_pw_rf1;
float _temp273_a_rf1;
float _temp274_flip_rf1;
int _temp275_res_rf1;
int _temp276_wg_rf1;
int _temp277_pw_rf1;
float _temp278_a_rf1;
float _temp279_flip_rf1;
int _temp280_res_rf1;
int _temp281_wg_rf1;
int _temp282_pw_rf1;
float _temp283_a_rf1;
float _temp284_flip_rf1;
int _temp285_res_rf1;
int _temp286_wg_rf1;
int _temp287_pw_rf1;
float _temp288_a_rf1;
float _temp289_flip_rf1;
int _temp290_res_rf1;
int _temp291_wg_rf1;
int _temp292_pw_rf1;
float _temp293_a_rf1;
float _temp294_flip_rf1;
int _temp295_res_rf1;
int _temp296_wg_rf1;
int _temp297_pw_rf1;
float _temp298_a_rf1;
float _temp299_flip_rf1;
int _temp300_res_rf1;
int _temp301_wg_rf1;
int _temp302_pw_rf1;
float _temp303_a_rf1;
float _temp304_flip_rf1;
int _temp305_res_rf1;
int _temp306_wg_rf1;
int _temp307_pw_rf1;
float _temp308_a_rf1;
float _temp309_flip_rf1;
int _temp310_res_rf1;
int _temp311_wg_rf1;
int _temp312_pw_rf1;
float _temp313_a_rf1;
float _temp314_flip_rf1;
int _temp315_res_rf1;
int _temp316_wg_rf1;
int _temp317_pw_rf1;
float _temp318_a_rf1;
float _temp319_flip_rf1;
int _temp320_res_rf1;
int _temp321_wg_rf1;
int _temp322_pw_rf1;
float _temp323_a_rf1;
float _temp324_flip_rf1;
int _temp325_res_rf1;
int _temp326_wg_rf1;
int _temp327_pw_rf1;
float _temp328_a_rf1;
float _temp329_flip_rf1;
int _temp330_res_rf1;
int _temp331_wg_rf1;
int _temp332_pw_rf1;
float _temp333_a_rf1;
float _temp334_flip_rf1;
int _temp335_res_rf1;
int _temp336_wg_rf1;
int _temp337_pw_rf1;
float _temp338_a_rf1;
float _temp339_flip_rf1;
int _temp340_res_rf1;
int _temp341_wg_rf1;
int _temp342_pw_rf1;
float _temp343_a_rf1;
float _temp344_flip_rf1;
int _temp345_res_rf1;
int _temp346_wg_rf1;
int _temp347_pw_rf1;
float _temp348_a_rf1;
float _temp349_flip_rf1;
int _temp350_res_rf1;
int _temp351_wg_rf1;
int _temp352_pw_rf1;
float _temp353_a_rf1;
float _temp354_flip_rf1;
int _temp355_res_rf1;
int _temp356_wg_rf1;
int _temp357_pw_rf1;
float _temp358_a_rf1;
float _temp359_flip_rf1;
int _temp360_res_rf1;
int _temp361_wg_rf1;
int _temp362_pw_rf1;
float _temp363_a_rf1;
float _temp364_flip_rf1;
int _temp365_res_rf1;
int _temp366_wg_rf1;
int _temp367_pw_rf1;
float _temp368_a_rf1;
float _temp369_flip_rf1;
int _temp370_res_rf1;
int _temp371_wg_rf1;
int _temp372_pw_rf1;
float _temp373_a_rf1;
float _temp374_flip_rf1;
int _temp375_res_rf1;
int _temp376_wg_rf1;
int _temp377_pw_rf1;
float _temp378_a_rf1;
float _temp379_flip_rf1;
int _temp380_res_rf1;
int _temp381_wg_rf1;
int _temp382_pw_rf1;
float _temp383_a_rf1;
float _temp384_flip_rf1;
int _temp385_res_rf1;
int _temp386_wg_rf1;
int _temp387_monnewgeo;
float _temp388_a_gzrf1mon;
int _temp389_pw_gzrf1mona;
float _temp390_a_gz1mon;
int _temp391_pw_gz1mon;
int _temp392_pw_gz1mona;
int _temp393_pw_gz1mond;
float _temp394_a_gyrf2lmon;
int _temp395_pw_gyrf2lmona;
int _temp396_pw_gyrf2lmon;
int _temp397_pw_gyrf2lmond;
float _temp398_a_gyrf2mon;
float _temp399_a_gyrfmontipup;
int _temp400_pw_gyrfmontipupa;
float _temp401_a_gxwmon;
int _temp402_pw_gxwmona;
float _temp403_a_gx1mon;
int _temp404_pw_gx1mona;
int _temp405_pw_gx1mon;
int _temp406_pw_gx1mond;
float _temp407_a_gxfcmon;
int _temp408_pw_gxfcmona;
int _temp409_pw_gxfcmon;
int _temp410_pw_gxfcmond;
float _temp411_a_gx1mon;
int _temp412_pw_gx1mon;
int _temp413_pw_gx1mona;
int _temp414_pw_gx1mond;
float _temp415_a_gzkmon;
int _temp416_pw_gzkmona;
int _temp417_pw_gzkmon;
int _temp418_pw_gzkmond;
float _temp419_a_gzkmontipup;
int _temp420_pw_gzkmontipupa;
int _temp421_pw_gzkmontipup;
int _temp422_pw_gzkmontipupd;
int _temp423_min_seqrfampmon;
int _temp424_max_seqsarmon;
int _temp425_minseqgrddrvxmon_t;
float _temp426_powerx;
float _temp427_pospowerx;
float _temp428_negpowerx;
int _temp429_minseqgrddrvymon_t;
float _temp430_powery;
float _temp431_pospowery;
float _temp432_negpowery;
int _temp433_minseqgrddrvzmon_t;
float _temp434_powerz;
float _temp435_pospowerz;
float _temp436_negpowerz;
int _temp437_minseqcoilmon_t;
float _temp438_xa2s;
float _temp439_ya2s;
float _temp440_za2s;
int _temp441_minseqcablemon_t;
float _temp442_xa2s;
float _temp443_ya2s;
float _temp444_za2s;
int _temp445_minseqbusbarmon_t;
int _temp446_min_montr;
float _temp447_dbdtperx;
float _temp448_dbdtpery;
float _temp449_dbdtperz;
int _temp450_minesp;
int _temp451_res_gd1;
int _temp452_res_gd2;
int _temp453_grad_spec_ctrl;
float _temp454_glimit;
float _temp455_srate;
int _temp456_pw_rf1;
float _temp457_a_rf1;
float _temp458_flip_rf1;
int _temp459_res_rf1;
int _temp460_wg_rf1;
int _temp461_pw_rfwk;
float _temp462_a_rfwk;
float _temp463_flip_rfwk;
int _temp464_res_rfwk;
int _temp465_wg_rfwk;
int _temp466_pw_rf1;
float _temp467_a_rf1;
float _temp468_flip_rf1;
int _temp469_res_rf1;
int _temp470_wg_rf1;
int _temp471_pw_rf2;
float _temp472_a_rf2;
float _temp473_flip_rf2;
int _temp474_res_rf2;
int _temp475_wg_rf2;
int _temp476_pw_rf1;
float _temp477_a_rf1;
float _temp478_flip_rf1;
int _temp479_res_rf1;
int _temp480_wg_rf1;
int _temp481_pw_rf2;
float _temp482_a_rf2;
float _temp483_flip_rf2;
int _temp484_res_rf2;
int _temp485_wg_rf2;
float _temp486_flip_rf0;
int _temp487_seq_type;
float _temp488_monave_sar;
float _temp489_moncave_sar;
float _temp490_monpeak_sar;
int _temp491_minesp;
float _temp492_a_gzrf1;
int _temp493_pw_gzrf1d;
float _temp494_a_gzrf2;
float _temp495_a_gyrf2iv;
int _temp496_pw_gyrf2iva;
int _temp497_pw_gzrf2l1a;
int _temp498_pw_gzrf2l1d;
int _temp499_pulsepos;
float _temp500_zeromoment;
float _temp501_firstmoment;
float _temp502_zeromomentsum;
float _temp503_firstmomentsum;
int _temp504_pulsepos;
float _temp505_zeromoment;
float _temp506_firstmoment;
float _temp507_zeromomentsum;
float _temp508_firstmomentsum;
int _temp509_pulsepos;
float _temp510_zeromoment;
float _temp511_firstmoment;
float _temp512_zeromomentsum;
float _temp513_firstmomentsum;
int _temp514_pulsepos;
float _temp515_zeromoment;
float _temp516_firstmoment;
float _temp517_zeromomentsum;
float _temp518_firstmomentsum;
int _temp519_pulsepos;
float _temp520_zeromoment;
float _temp521_firstmoment;
float _temp522_zeromomentsum;
float _temp523_firstmomentsum;
int _temp524_pulsepos;
float _temp525_zeromoment;
float _temp526_firstmoment;
float _temp527_zeromomentsum;
float _temp528_firstmomentsum;
int _temp529_pulsepos;
float _temp530_zeromoment;
float _temp531_firstmoment;
float _temp532_zeromomentsum;
float _temp533_firstmomentsum;
int _temp534_pulsepos;
float _temp535_zeromoment;
float _temp536_firstmoment;
float _temp537_zeromomentsum;
float _temp538_firstmomentsum;
int _temp539_pulsepos;
float _temp540_zeromoment;
float _temp541_firstmoment;
float _temp542_zeromomentsum;
float _temp543_firstmomentsum;
int _temp544_pulsepos;
float _temp545_zeromoment;
float _temp546_firstmoment;
float _temp547_zeromomentsum;
float _temp548_firstmomentsum;
float _temp549_a_gz1;
int _temp550_pw_gz1a;
int _temp551_pw_gz1;
int _temp552_pw_gz1d;
float _temp553_a_gzmn;
int _temp554_pw_gzmna;
int _temp555_pw_gzmn;
int _temp556_pw_gzmnd;
float _temp557_a_gz1;
int _temp558_pw_gz1;
int _temp559_pw_gz1a;
int _temp560_pw_gz1d;
float _temp561_a_gz1;
int _temp562_pw_gz1;
int _temp563_pw_gz1a;
int _temp564_pw_gz1d;
float _temp565_a_gz1;
int _temp566_pw_gz1;
int _temp567_pw_gz1a;
int _temp568_pw_gz1d;
float _temp569_a_gz1;
int _temp570_pw_gz1;
int _temp571_pw_gz1a;
int _temp572_pw_gz1d;
int _temp573_pw_gzrf2a;
int _temp574_pw_gzrf2a;
int _temp575_cs_sattime;
int _temp576_sp_sattime;
float _temp577_a_gy1a;
float _temp578_a_gy1b;
int _temp579_pw_gy1;
int _temp580_pw_gy1a;
int _temp581_pw_gy1d;
float _temp582_a_gzrf0;
float _temp583_a_gyk0;
int _temp584_pw_gyk0a;
int _temp585_pw_gyk0;
int _temp586_pw_gyk0d;
int _temp587_avail_image_time;
int _temp588_max_bamslice;
float _temp589_ta_gxwn;
int _temp590_pw_gy1a;
int _temp591_pw_gy1d;
int _temp592_pw_gy1;
int _temp593_min_seqgrad;
int _temp594_min_seqrfamp;
int _temp595_max_seqsar;
int _temp596_max_slicesar;
int _temp597_cs_sattime;
int _temp598_tmin_total;
int _temp599_tmin_total;
int _temp600_tmin_total;
int _temp601_tmin_total;
int _temp602_acqs;
int _temp603_max_slice_ti;
int _temp604_acqs;
int _temp605_false_slquant1;
int _temp606_slquant_per_trig;
int _temp607_psd_tseq;
int _temp608_psd_tseq;
int _temp609_max_seqtime;
int _temp610_slquant_per_trig;
float _temp611_max_ss_fa;
float _temp612_a_gzrf1;
float _temp613_a_gzrf1;
int _temp614_pulsepos;
float _temp615_gz1_zero_moment;
float _temp616_gz1_first_moment;
int _temp617_pulsepos;
float _temp618_gz1_zero_moment;
float _temp619_gz1_first_moment;
int _temp620_pw_gzrf1a;
int _temp621_pw_gzrf1d;
int _temp622_pw_gzrf1;
int _temp623_pw_ss_rampz;
int _temp624_pw_ss_rampz;
int _temp625_pw_constant;
int _temp626_acqs;
int _temp627_slquant_per_trig;
int _temp628_sl_acq;
int _temp629_tr_acq;
int _temp630_avail_image_time;
int _temp631_acqs;
int _temp632_slquant_per_trig;
int _temp633_sl_acq_val2;
int _temp634_tr_acq_val2;
int _temp635_sl_acq_val3;
int _temp636_tr_acq_val3;
int _temp637_sl_acq_val4;
int _temp638_tr_acq_val4;
int _temp639_pw_gxdla;
int _temp640_pw_gxdla;
float _temp641_DELTAx;
float _temp642_deltax;
int _temp643_pw_gydla;
float _temp644_DELTAy;
float _temp645_deltay;
int _temp646_pw_gzdla;
float _temp647_DELTAz;
float _temp648_deltaz;
float _temp649_DELTAx;
float _temp650_deltax;
float _temp651_DELTAy;
float _temp652_deltay;
float _temp653_DELTAz;
float _temp654_deltaz;
int _temp655_sl_acq;
int _temp656_tr_acq;
int _temp657_tr_acq;
int _temp658_avail_image_time;
int _temp659_acqs;
int _temp660_slquant_per_trig;
int _temp661_sl_acq_val2;
int _temp662_tr_acq_val2;
int _temp663_tr_acq_val2;
int _temp664_sl_acq_val3;
int _temp665_tr_acq_val3;
int _temp666_tr_acq_val3;
int _temp667_sl_acq_val4;
int _temp668_tr_acq_val4;
int _temp669_tr_acq_val4;
int _temp670_pulsepos;
float _temp671_zeromoment;
float _temp672_firstmoment;
float _temp673_zeromomentsum;
float _temp674_firstmomentsum;
int _temp675_pulsepos;
float _temp676_zeromoment;
float _temp677_firstmoment;
float _temp678_zeromomentsum;
float _temp679_firstmomentsum;
int _temp680_pulsepos;
float _temp681_zeromoment;
float _temp682_firstmoment;
float _temp683_zeromomentsum;
float _temp684_firstmomentsum;
int _temp685_pw_gymn2a;
int _temp686_pw_gymn2;
int _temp687_pw_gymn2d;
float _temp688_a_gymn2;
float _temp689_a_gy1a;
float _temp690_a_gy1b;
int _temp691_pw_gy1;
int _temp692_pw_gy1a;
int _temp693_pw_gy1d;
int _temp694_rhdacqctrl;
float _temp695_pure_mix_tx_scale;
int _temp696_rhdacqctrl;
int _temp697_pre_pass;
int _temp698_pre_slice;
float _temp699_monave_sar;
float _temp700_moncave_sar;
float _temp701_monpeak_sar;
float _temp702_bc_delx;
float _temp703_bc_dely;
float _temp704_bc_delz;
float _temp705_a_dbgxrfcssat;
int _temp706_pw_dbgxrfcssata;
float _temp707_a_dbgyrfcssat;
int _temp708_pw_dbgyrfcssata;
float _temp709_a_dbgzrfcssat;
int _temp710_pw_dbgzrfcssata;
int _temp711_pw_rfse1;
int _temp712_sat_newgeo;
int _temp713_res_rfse1;
int _temp714_pw_rfse1;
int _temp715_pw_gzrfse1;
int _temp716_pw_gzrfse1a;
int _temp717_pw_gzrfse1d;
float _temp718_a_gzrfse1;
int _temp719_sat_newgeo;
int _temp720_res_rfse2;
int _temp721_pw_rfse2;
int _temp722_pw_gzrfse2;
int _temp723_pw_gzrfse2a;
int _temp724_pw_gzrfse2d;
float _temp725_a_gzrfse2;
int _temp726_pw_rfse3;
int _temp727_sat_newgeo;
int _temp728_res_rfse3;
int _temp729_pw_rfse3;
int _temp730_pw_gzrfse3;
int _temp731_pw_gzrfse3a;
int _temp732_pw_gzrfse3d;
float _temp733_a_gzrfse3;
int _temp734_sat_newgeo;
int _temp735_res_rfse4;
int _temp736_pw_rfse4;
int _temp737_pw_gzrfse4;
int _temp738_pw_gzrfse4a;
int _temp739_pw_gzrfse4d;
float _temp740_a_gzrfse4;
int _temp741_pw_rfse5;
int _temp742_sat_newgeo;
int _temp743_res_rfse5;
int _temp744_pw_rfse5;
int _temp745_pw_gzrfse5;
int _temp746_pw_gzrfse5a;
int _temp747_pw_gzrfse5d;
float _temp748_a_gzrfse5;
int _temp749_sat_newgeo;
int _temp750_res_rfse6;
int _temp751_pw_rfse6;
int _temp752_pw_gzrfse6;
int _temp753_pw_gzrfse6a;
int _temp754_pw_gzrfse6d;
float _temp755_a_gzrfse6;
int _temp756_pw_rfsx1;
int _temp757_res_rfsx1;
int _temp758_pw_rfsx1;
int _temp759_res_rfsx2;
int _temp760_pw_rfsx2;
int _temp761_pw_gxrfsx1;
int _temp762_pw_gxrfsx1a;
int _temp763_pw_gxrfsx1d;
float _temp764_a_gxrfsx1;
int _temp765_pw_gxrfsx2;
int _temp766_pw_gxrfsx2a;
int _temp767_pw_gxrfsx2d;
float _temp768_a_gxrfsx2;
int _temp769_pw_rfsy1;
int _temp770_res_rfsy1;
int _temp771_pw_rfsy1;
int _temp772_res_rfsy2;
int _temp773_pw_rfsy2;
int _temp774_pw_gyrfsy1;
int _temp775_pw_gyrfsy1a;
int _temp776_pw_gyrfsy1d;
float _temp777_a_gyrfsy1;
int _temp778_pw_gyrfsy2;
int _temp779_pw_gyrfsy2a;
int _temp780_pw_gyrfsy2d;
float _temp781_a_gyrfsy2;
int _temp782_pw_rfsz1;
int _temp783_res_rfsz1;
int _temp784_pw_rfsz1;
int _temp785_res_rfsz2;
int _temp786_pw_rfsz2;
int _temp787_pw_gzrfsz1;
int _temp788_pw_gzrfsz1a;
int _temp789_pw_gzrfsz1d;
float _temp790_a_gzrfsz1;
int _temp791_pw_gzrfsz2;
int _temp792_pw_gzrfsz2a;
int _temp793_pw_gzrfsz2d;
float _temp794_a_gzrfsz2;
int _temp795_sat_TGlimit;
int _temp796_sat_TGlimit;
int _temp797_sat_TGlimit;
int _temp798_sat_TGlimit;
int _temp799_off_rfsz1;
int _temp800_off_rfsz2;
int _temp801_sat_TGlimit;
int _temp802_sat_TGlimit;
int _temp803_off_rfsz1;
int _temp804_off_rfsz2;
int _temp805_sat_TGlimit;
int _temp806_sat_TGlimit;
int _temp807_sat_TGlimit;
int _temp808_sat_TGlimit;
int _temp809_sat_TGlimit;
int _temp810_sat_TGlimit;
int _temp811_sat_TGlimit;
int _temp812_ps1_newgeo;
int _temp813_pw_rfcssatcfh;
float _temp814_a_rfcssatcfh;
float _temp815_flip_rfcssatcfh;
int _temp816_pw_rf1cfh;
float _temp817_a_rf1cfh;
float _temp818_flip_rf1cfh;
int _temp819_res_rf1cfh;
int _temp820_wg_rf1cfh;
int _temp821_pw_rf2cfh;
float _temp822_a_rf2cfh;
float _temp823_flip_rf2cfh;
int _temp824_res_rf2cfh;
int _temp825_wg_rf2cfh;
int _temp826_pw_rf3cfh;
float _temp827_a_rf3cfh;
float _temp828_flip_rf3cfh;
int _temp829_res_rf3cfh;
int _temp830_wg_rf3cfh;
int _temp831_pw_rf4cfh;
float _temp832_a_rf4cfh;
float _temp833_flip_rf4cfh;
int _temp834_res_rf4cfh;
int _temp835_wg_rf4cfh;
int _temp836_pw_rf1cfh;
float _temp837_a_rf1cfh;
float _temp838_flip_rf1cfh;
int _temp839_res_rf1cfh;
int _temp840_wg_rf1cfh;
int _temp841_pw_rf2cfh;
float _temp842_a_rf2cfh;
float _temp843_flip_rf2cfh;
int _temp844_res_rf2cfh;
int _temp845_wg_rf2cfh;
int _temp846_pw_rf3cfh;
float _temp847_a_rf3cfh;
float _temp848_flip_rf3cfh;
int _temp849_res_rf3cfh;
int _temp850_wg_rf3cfh;
int _temp851_pw_rf4cfh;
float _temp852_a_rf4cfh;
float _temp853_flip_rf4cfh;
int _temp854_res_rf4cfh;
int _temp855_wg_rf4cfh;
int _temp856_pimrsaps1;
int _temp857_pimrsaps2;
int _temp858_pimrsaps3;
int _temp859_pimrsaps4;
int _temp860_pimrsaps5;
int _temp861_pimrsaps6;
int _temp862_pimrsaps7;
int _temp863_pimrsaps8;
int _temp864_pimrsaps9;
int _temp865_pimrsaps10;
int _temp866_pimrsaps11;
int _temp867_pimrsaps12;
int _temp868_pimrsaps13;
int _temp869_pimrsaps14;
int _temp870_pimrsaps15;
int _temp871_as_newgeo;
float _temp872_a_gxkas;
int _temp873_pw_gxkasa;
int _temp874_pw_gxkas;
int _temp875_pw_gxkasd;
float _temp876_a_gzkas;
int _temp877_pw_gzkasa;
int _temp878_pw_gzkas;
int _temp879_pw_gzkasd;
float _temp880_flip_rfbrs;
int _temp881_ps1_newgeo;
float _temp882_flip_rfbdtg;
int _temp883_ps1_newgeo;
int _temp884_ps1_newgeo;
float _temp885_a_gyrf1mps1;
int _temp886_pw_gyrf1mps1a;
float _temp887_a_gy1mps1;
int _temp888_pw_gy1mps1;
int _temp889_pw_gy1mps1a;
int _temp890_pw_gy1mps1d;
float _temp891_a_gzrf1mps1;
int _temp892_pw_gzrf1mps1a;
float _temp893_a_gz1mps1;
int _temp894_pw_gz1mps1;
int _temp895_pw_gz1mps1a;
int _temp896_pw_gz1mps1d;
float _temp897_a_gzrf2lmps1;
int _temp898_pw_gzrf2lmps1a;
int _temp899_pw_gzrf2lmps1;
int _temp900_pw_gzrf2lmps1d;
float _temp901_a_gzrf2mps1;
float _temp902_a_gxwmps1;
int _temp903_pw_gxwmps1a;
float _temp904_a_gx1mps1;
int _temp905_pw_gx1mps1;
int _temp906_pw_gx1mps1a;
int _temp907_pw_gx1mps1d;
float _temp908_a_gzrf1cfl;
int _temp909_pw_gzrf1cfla;
float _temp910_a_gz1cfl;
int _temp911_pw_gz1cfl;
int _temp912_pw_gz1cfla;
int _temp913_pw_gz1cfld;
float _temp914_a_gykcfl;
int _temp915_pw_gykcfla;
int _temp916_pw_gykcfl;
int _temp917_pw_gykcfld;
float _temp918_a_gxkrcvn;
int _temp919_pw_gxkrcvna;
int _temp920_pw_gxkrcvn;
int _temp921_pw_gxkrcvnd;
float _temp922_a_gykrcvn;
int _temp923_pw_gykrcvna;
int _temp924_pw_gykrcvn;
int _temp925_pw_gykrcvnd;
float _temp926_a_gzkrcvn;
int _temp927_pw_gzkrcvna;
int _temp928_pw_gzkrcvn;
int _temp929_pw_gzkrcvnd;
float _temp930_a_gzrf1as;
int _temp931_pw_gzrf1asa;
float _temp932_a_gz1as;
int _temp933_pw_gz1as;
int _temp934_pw_gz1asa;
int _temp935_pw_gz1asd;
float _temp936_a_gxwas;
int _temp937_pw_gxwasa;
float _temp938_a_gx1as;
int _temp939_pw_gx1as;
int _temp940_pw_gx1asa;
int _temp941_pw_gx1asd;
int _temp942_endview_iampas;
float _temp943_a_gy1asa;
float _temp944_a_gy1asb;
int _temp945_pw_gy1as;
int _temp946_pw_gy1asa;
int _temp947_pw_gy1asd;
int _temp948_pw_gzrf2lcfha;
int _temp949_pw_gzrf2lcfhd;
int _temp950_pw_gzrf2lcfh;
float _temp951_a_gzrf2lcfh;
int _temp952_pw_gzrf2rcfha;
int _temp953_pw_gzrf2rcfhd;
int _temp954_pw_gzrf2rcfh;
float _temp955_a_gzrf2rcfh;
int _temp956_pw_gzrf3rcfha;
int _temp957_pw_gzrf3rcfhd;
int _temp958_pw_gzrf3rcfh;
float _temp959_a_gzrf3rcfh;
int _temp960_pw_rf1cfh;
float _temp961_a_rf1cfh;
float _temp962_flip_rf1cfh;
int _temp963_res_rf1cfh;
int _temp964_wg_rf1cfh;
int _temp965_pw_rf2cfh;
float _temp966_a_rf2cfh;
float _temp967_flip_rf2cfh;
int _temp968_res_rf2cfh;
int _temp969_wg_rf2cfh;
int _temp970_pw_rf3cfh;
float _temp971_a_rf3cfh;
float _temp972_flip_rf3cfh;
int _temp973_res_rf3cfh;
int _temp974_wg_rf3cfh;
int _temp975_pw_rf4cfh;
float _temp976_a_rf4cfh;
float _temp977_flip_rf4cfh;
int _temp978_res_rf4cfh;
int _temp979_wg_rf4cfh;
int _temp980_pw_rf1cfh;
float _temp981_a_rf1cfh;
float _temp982_flip_rf1cfh;
int _temp983_res_rf1cfh;
int _temp984_wg_rf1cfh;
int _temp985_pw_rf2cfh;
float _temp986_a_rf2cfh;
float _temp987_flip_rf2cfh;
int _temp988_res_rf2cfh;
int _temp989_wg_rf2cfh;
int _temp990_pw_rf3cfh;
float _temp991_a_rf3cfh;
float _temp992_flip_rf3cfh;
int _temp993_res_rf3cfh;
int _temp994_wg_rf3cfh;
int _temp995_pw_rf4cfh;
float _temp996_a_rf4cfh;
float _temp997_flip_rf4cfh;
int _temp998_res_rf4cfh;
int _temp999_wg_rf4cfh;
float _temp1000_a_gyrf0kcfh;
int _temp1001_pw_gyrf0kcfha;
int _temp1002_pw_gyrf0kcfh;
int _temp1003_pw_gyrf0kcfhd;
float _temp1004_a_gzrf0cfh;
int _temp1005_pw_gzrf0cfha;
float _temp1006_a_gzrf1cfh;
int _temp1007_pw_gzrf1cfha;
int _temp1008_pw_gxrf2cfha;
int _temp1009_pw_gyrf3cfha;
int _temp1010_pw_gzrf4cfha;
float _temp1011_a_gzrf2rcfh;
int _temp1012_pw_gzrf2rcfha;
int _temp1013_pw_gzrf2rcfh;
int _temp1014_pw_gzrf2rcfhd;
float _temp1015_a_gzrf3rcfh;
int _temp1016_pw_gzrf3rcfha;
int _temp1017_pw_gzrf3rcfh;
int _temp1018_pw_gzrf3rcfhd;
float _temp1019_a_gzrf3rcfh;
int _temp1020_pw_gzrf3rcfha;
int _temp1021_pw_gzrf3rcfh;
int _temp1022_pw_gzrf3rcfhd;
float _temp1023_a_gzrf3lcfh;
int _temp1024_pw_gzrf3lcfha;
int _temp1025_pw_gzrf3lcfh;
int _temp1026_pw_gzrf3lcfhd;
float _temp1027_a_gzrf4rcfh;
int _temp1028_pw_gzrf4rcfha;
int _temp1029_pw_gzrf4rcfh;
int _temp1030_pw_gzrf4rcfhd;
float _temp1031_a_gzrf4lcfh;
int _temp1032_pw_gzrf4lcfha;
int _temp1033_pw_gzrf4lcfh;
int _temp1034_pw_gzrf4lcfhd;
float _temp1035_a_gzrf2rcfh;
int _temp1036_pw_gzrf2rcfha;
int _temp1037_pw_gzrf2rcfh;
int _temp1038_pw_gzrf2rcfhd;
float _temp1039_a_gzrf3lcfh;
int _temp1040_pw_gzrf3lcfha;
int _temp1041_pw_gzrf3lcfh;
int _temp1042_pw_gzrf3lcfhd;
int _temp1043_pw_gxrf2cfha;
int _temp1044_pw_gyrf2cfha;
float _temp1045_a_gzrf2rcfh;
int _temp1046_pw_gzrf2rcfha;
int _temp1047_pw_gzrf2rcfh;
int _temp1048_pw_gzrf2rcfhd;
int _temp1049_dummy_pw;
float _temp1050_a_gx1cfh;
int _temp1051_pw_gx1cfha;
int _temp1052_pw_gx1cfh;
int _temp1053_pw_gx1cfhd;
float _temp1054_a_gy1cfh;
int _temp1055_pw_gy1cfha;
int _temp1056_pw_gy1cfh;
int _temp1057_pw_gy1cfhd;
float _temp1058_a_gykcfh;
int _temp1059_pw_gykcfha;
int _temp1060_pw_gykcfh;
int _temp1061_pw_gykcfhd;
int _temp1062_cfh_newgeo;
float _temp1063_a_gzrf1ftg;
float _temp1064_a_gzrf2ftg;
float _temp1065_a_gzrf3ftg;
int _temp1066_pw_gzrf1ftga;
int _temp1067_pw_gzrf2ftga;
float _temp1068_a_gz1ftg;
int _temp1069_pw_gz1ftg;
int _temp1070_pw_gz1ftga;
int _temp1071_pw_gz1ftgd;
float _temp1072_a_gz2ftg;
int _temp1073_pw_gz2ftg;
int _temp1074_pw_gz2ftga;
int _temp1075_pw_gz2ftgd;
int _temp1076_pw_gzrf3ftga;
float _temp1077_a_gz2bftg;
int _temp1078_pw_gz2bftg;
int _temp1079_pw_gz2bftga;
int _temp1080_pw_gz2bftgd;
float _temp1081_a_gz3ftg;
int _temp1082_pw_gz3ftg;
int _temp1083_pw_gz3ftga;
int _temp1084_pw_gz3ftgd;
float _temp1085_a_gxw1ftg;
float _temp1086_a_gx1ftg;
int _temp1087_pw_gx1ftg;
int _temp1088_pw_gx1ftga;
int _temp1089_pw_gx1ftgd;
float _temp1090_a_gx2test;
int _temp1091_pw_gx2test;
int _temp1092_pw_gx2testa;
int _temp1093_pw_gx2testd;
float _temp1094_a_gx1bftg;
int _temp1095_pw_gx1bftg;
int _temp1096_pw_gx1bftga;
int _temp1097_pw_gx1bftgd;
int _temp1098_pw_gxw1ftga;
float _temp1099_a_postgxw1ftg;
int _temp1100_pw_postgxw1ftg;
int _temp1101_pw_postgxw1ftga;
int _temp1102_pw_postgxw1ftgd;
float _temp1103_a_gxw2ftg;
int _temp1104_pw_gxw2ftga;
float _temp1105_a_gx2ftg;
int _temp1106_pw_gx2ftga;
int _temp1107_pw_gx2ftg;
int _temp1108_pw_gx2ftgd;
float _temp1109_a_gyrf1xtg;
int _temp1110_pw_gyrf1xtga;
float _temp1111_a_gzrf1xtg;
int _temp1112_pw_gzrf1xtga;
float _temp1113_a_gzrf2xtg;
int _temp1114_pw_gzrf2xtga;
float _temp1115_a_gz2xtg;
int _temp1116_pw_gz2xtga;
int _temp1117_pw_gz2xtg;
int _temp1118_pw_gz2xtgd;
float _temp1119_a_gz1xtg;
int _temp1120_pw_gz1xtga;
int _temp1121_pw_gz1xtg;
int _temp1122_pw_gz1xtgd;
float _temp1123_a_gxw1xtg;
int _temp1124_pw_gxw1xtga;
float _temp1125_a_gx1bxtg;
int _temp1126_pw_gx1bxtg;
int _temp1127_pw_gx1bxtga;
int _temp1128_pw_gx1bxtgd;
float _temp1129_a_gykxtgl;
int _temp1130_pw_gykxtgla;
int _temp1131_pw_gykxtgl;
int _temp1132_pw_gykxtgld;
float _temp1133_a_gykxtgr;
int _temp1134_pw_gykxtgra;
int _temp1135_pw_gykxtgr;
int _temp1136_pw_gykxtgrd;
float _temp1137_a_gzrf1rs;
int _temp1138_pw_gzrf1rsa;
float _temp1139_a_gzkbsrs;
int _temp1140_pw_gzkbsrsa;
int _temp1141_pw_gzkbsrs;
int _temp1142_pw_gzkbsrsd;
float _temp1143_a_gz1rs;
int _temp1144_pw_gz1rs;
int _temp1145_pw_gz1rsa;
int _temp1146_pw_gz1rsd;
float _temp1147_a_gzkrs;
int _temp1148_pw_gzkrsa;
int _temp1149_pw_gzkrs;
int _temp1150_pw_gzkrsd;
float _temp1151_a_gxwrs;
int _temp1152_pw_gxwrsa;
float _temp1153_a_gxkbsrs;
int _temp1154_pw_gxkbsrsa;
int _temp1155_pw_gxkbsrs;
int _temp1156_pw_gxkbsrsd;
float _temp1157_a_gx1rs;
int _temp1158_pw_gx1rsa;
int _temp1159_pw_gx1rs;
int _temp1160_pw_gx1rsd;
float _temp1161_a_gxkrs;
int _temp1162_pw_gxkrsa;
int _temp1163_pw_gxkrs;
int _temp1164_pw_gxkrsd;
float _temp1165_a_gx2rs;
int _temp1166_pw_gx2rsa;
int _temp1167_pw_gx2rs;
int _temp1168_pw_gx2rsd;
int _temp1169_endview_iamprs;
float _temp1170_a_gy1rsa;
float _temp1171_a_gy1rsb;
int _temp1172_pw_gy1rs;
int _temp1173_pw_gy1rsa;
int _temp1174_pw_gy1rsd;
float _temp1175_a_gzrf1dtg;
int _temp1176_pw_gzrf1dtga;
float _temp1177_a_gzkbsdtg;
int _temp1178_pw_gzkbsdtga;
int _temp1179_pw_gzkbsdtg;
int _temp1180_pw_gzkbsdtgd;
float _temp1181_a_gz1dtg;
int _temp1182_pw_gz1dtg;
int _temp1183_pw_gz1dtga;
int _temp1184_pw_gz1dtgd;
float _temp1185_a_gzkdtg;
int _temp1186_pw_gzkdtga;
int _temp1187_pw_gzkdtg;
int _temp1188_pw_gzkdtgd;
float _temp1189_a_gxwdtg;
int _temp1190_pw_gxwdtga;
float _temp1191_a_gxkbsdtg;
int _temp1192_pw_gxkbsdtga;
int _temp1193_pw_gxkbsdtg;
int _temp1194_pw_gxkbsdtgd;
float _temp1195_a_gx1dtg;
int _temp1196_pw_gx1dtga;
int _temp1197_pw_gx1dtg;
int _temp1198_pw_gx1dtgd;
float _temp1199_a_gxkdtg;
int _temp1200_pw_gxkdtga;
int _temp1201_pw_gxkdtg;
int _temp1202_pw_gxkdtgd;
float _temp1203_a_gx2dtg;
int _temp1204_pw_gx2dtga;
int _temp1205_pw_gx2dtg;
int _temp1206_pw_gx2dtgd;
int _temp1207_endview_iampdtg;
float _temp1208_a_gy1dtga;
float _temp1209_a_gy1dtgb;
int _temp1210_pw_gy1dtg;
int _temp1211_pw_gy1dtga;
int _temp1212_pw_gy1dtgd;
float _temp1213_a_gzrf1cal;
float _temp1214_cal_amplimit;
int _temp1215_pw_gzrf1cala;
int _temp1216_endviewz_iampcal;
float _temp1217_cal_amplimit;
float _temp1218_a_gzcombcala;
float _temp1219_a_gzcombcalb;
int _temp1220_pw_gzcombcal;
int _temp1221_pw_gzcombcala;
int _temp1222_pw_gzcombcald;
float _temp1223_a_gzprcala;
float _temp1224_a_gzprcalb;
int _temp1225_pw_gzprcal;
int _temp1226_pw_gzprcala;
int _temp1227_pw_gzprcald;
float _temp1228_cal_amplimit;
int _temp1229_pw_gxwcala;
float _temp1230_cal_amplimit;
float _temp1231_a_gx1cal;
int _temp1232_pw_gx1cal;
int _temp1233_pw_gx1cala;
int _temp1234_pw_gx1cald;
int _temp1235_endview_iampcal;
float _temp1236_cal_amplimit;
float _temp1237_a_gy1cala;
float _temp1238_a_gy1calb;
int _temp1239_pw_gy1cal;
int _temp1240_pw_gy1cala;
int _temp1241_pw_gy1cald;
float _temp1242_a_gzrf1coil;
float _temp1243_coil_amplimit;
int _temp1244_pw_gzrf1coila;
int _temp1245_endviewz_iampcoil;
float _temp1246_coil_amplimit;
float _temp1247_a_gzcombcoila;
float _temp1248_a_gzcombcoilb;
int _temp1249_pw_gzcombcoil;
int _temp1250_pw_gzcombcoila;
int _temp1251_pw_gzcombcoild;
float _temp1252_a_gzprcoila;
float _temp1253_a_gzprcoilb;
int _temp1254_pw_gzprcoil;
int _temp1255_pw_gzprcoila;
int _temp1256_pw_gzprcoild;
float _temp1257_coil_amplimit;
int _temp1258_pw_gxwcoila;
float _temp1259_coil_amplimit;
float _temp1260_a_gx1coil;
int _temp1261_pw_gx1coil;
int _temp1262_pw_gx1coila;
int _temp1263_pw_gx1coild;
int _temp1264_endview_iampcoil;
float _temp1265_coil_amplimit;
float _temp1266_a_gy1coila;
float _temp1267_a_gy1coilb;
int _temp1268_pw_gy1coil;
int _temp1269_pw_gy1coila;
int _temp1270_pw_gy1coild;
int _temp1271_tgcap;
int _temp1272_tgwindow;
int _temp1273_min_seqgrad;
int _temp1274_min_seqgrad;
int _temp1275_min_seqgrad;
int _temp1276_min_seqgrad;
int _temp1277_min_seqgrad;
int _temp1278_min_seqgrad;
int _temp1279_min_seqgrad;
int _temp1280_min_seqgrad;
int _temp1281_min_seqgrad;
int _temp1282_min_seqgrad;
int _temp1283_cal_sampledPts;
int _temp1284_min_seqgrad;
int _temp1285_coil_sampledPts;
int _temp1286_pw_gymn1a;
int _temp1287_pw_gymn1;
int _temp1288_pw_gymn1d;
int _temp1289_TGlimit;
float _temp1290_pg_beta;
float _temp1291_pg_beta;
float _temp1292_pg_beta;
float _temp1293_pg_beta;
float _temp1294_pg_beta;
float _temp1295_pg_beta;
float _temp1296_pg_beta;
float _temp1297_pg_beta;
float _temp1298_pg_beta;
float _temp1299_pg_beta;
float _temp1300_pg_beta;
float _temp1301_pg_beta;
float _temp1302_pg_beta;
float _temp1303_pg_beta;
float _temp1304_a_gxwksp;
int _temp1305_pw_gxwkspa;
int _temp1306_pw_gxwksp;
int _temp1307_pw_gxwkspd;
float _temp1308_a_gywksp;
int _temp1309_pw_gywkspa;
int _temp1310_pw_gywksp;
int _temp1311_pw_gywkspd;
float _temp1312_a_gzwksp;
int _temp1313_pw_gzwkspa;
int _temp1314_pw_gzwksp;
int _temp1315_pw_gzwkspd;
float _temp1316_a_gyex1;
int _temp1317_pw_gyex1a;
int _temp1318_pw_gyex1;
int _temp1319_pw_gyex1d;
int _temp1320_pw_gzrf1a;
int _temp1321_pw_gzrf1d;
float _temp1322_a_gzrf2;
int _temp1323_pw_gzrf2a;
int _temp1324_pw_gzrf2d;
float _temp1325_a_gzrf2left;
int _temp1326_pw_gzrf2lefta;
int _temp1327_pw_gzrf2leftd;
float _temp1328_a_gzrf2right;
int _temp1329_pw_gzrf2righta;
int _temp1330_pw_gzrf2rightd;
float _temp1331_a_gyrf2iv;
int _temp1332_pw_gyrf2iva;
int _temp1333_pw_gyrf2iv;
int _temp1334_pw_gyrf2ivd;
float _temp1335_a_gzrf2l1;
int _temp1336_pw_gzrf2l1a;
int _temp1337_pw_gzrf2l1;
int _temp1338_pw_gzrf2l1d;
float _temp1339_a_gzrf2r1;
int _temp1340_pw_gzrf2r1a;
int _temp1341_pw_gzrf2r1;
int _temp1342_pw_gzrf2r1d;
float _temp1343_a_xgradCrusherL;
int _temp1344_pw_xgradCrusherLa;
int _temp1345_pw_xgradCrusherL;
int _temp1346_pw_xgradCrusherLd;
float _temp1347_a_xgradCrusherR;
int _temp1348_pw_xgradCrusherRa;
int _temp1349_pw_xgradCrusherR;
int _temp1350_pw_xgradCrusherRd;
float _temp1351_a_ygradCrusherL;
int _temp1352_pw_ygradCrusherLa;
int _temp1353_pw_ygradCrusherL;
int _temp1354_pw_ygradCrusherLd;
float _temp1355_a_ygradCrusherR;
int _temp1356_pw_ygradCrusherRa;
int _temp1357_pw_ygradCrusherR;
int _temp1358_pw_ygradCrusherRd;
float _temp1359_a_gzrf2leftl1;
int _temp1360_pw_gzrf2leftl1a;
int _temp1361_pw_gzrf2leftl1;
int _temp1362_pw_gzrf2leftl1d;
float _temp1363_a_gzrf2leftr1;
int _temp1364_pw_gzrf2leftr1a;
int _temp1365_pw_gzrf2leftr1;
int _temp1366_pw_gzrf2leftr1d;
float _temp1367_a_gzrf2rightl1;
int _temp1368_pw_gzrf2rightl1a;
int _temp1369_pw_gzrf2rightl1;
int _temp1370_pw_gzrf2rightl1d;
float _temp1371_a_gzrf2rightr1;
int _temp1372_pw_gzrf2rightr1a;
int _temp1373_pw_gzrf2rightr1;
int _temp1374_pw_gzrf2rightr1d;
float _temp1375_a_xgradRightCrusherL;
int _temp1376_pw_xgradRightCrusherLa;
int _temp1377_pw_xgradRightCrusherL;
int _temp1378_pw_xgradRightCrusherLd;
float _temp1379_a_xgradRightCrusherR;
int _temp1380_pw_xgradRightCrusherRa;
int _temp1381_pw_xgradRightCrusherR;
int _temp1382_pw_xgradRightCrusherRd;
float _temp1383_a_ygradRightCrusherL;
int _temp1384_pw_ygradRightCrusherLa;
int _temp1385_pw_ygradRightCrusherL;
int _temp1386_pw_ygradRightCrusherLd;
float _temp1387_a_ygradRightCrusherR;
int _temp1388_pw_ygradRightCrusherRa;
int _temp1389_pw_ygradRightCrusherR;
int _temp1390_pw_ygradRightCrusherRd;
float _temp1391_a_xgradLeftCrusherL;
int _temp1392_pw_xgradLeftCrusherLa;
int _temp1393_pw_xgradLeftCrusherL;
int _temp1394_pw_xgradLeftCrusherLd;
float _temp1395_a_xgradLeftCrusherR;
int _temp1396_pw_xgradLeftCrusherRa;
int _temp1397_pw_xgradLeftCrusherR;
int _temp1398_pw_xgradLeftCrusherRd;
float _temp1399_a_ygradLeftCrusherL;
int _temp1400_pw_ygradLeftCrusherLa;
int _temp1401_pw_ygradLeftCrusherL;
int _temp1402_pw_ygradLeftCrusherLd;
float _temp1403_a_ygradLeftCrusherR;
int _temp1404_pw_ygradLeftCrusherRa;
int _temp1405_pw_ygradLeftCrusherR;
int _temp1406_pw_ygradLeftCrusherRd;
float _temp1407_a_gxiref1;
int _temp1408_pw_gxiref1a;
int _temp1409_pw_gxiref1;
int _temp1410_pw_gxiref1d;
float _temp1411_a_gxirefr;
int _temp1412_pw_gxirefra;
int _temp1413_pw_gxirefr;
int _temp1414_pw_gxirefrd;
float _temp1415_a_gymn2;
int _temp1416_pw_gymn2a;
int _temp1417_pw_gymn2;
int _temp1418_pw_gymn2d;
float _temp1419_a_gymn1;
int _temp1420_pw_gymn1a;
int _temp1421_pw_gymn1;
int _temp1422_pw_gymn1d;
float _temp1423_a_gz1;
int _temp1424_pw_gz1a;
int _temp1425_pw_gz1;
int _temp1426_pw_gz1d;
float _temp1427_a_gzmn;
int _temp1428_pw_gzmna;
int _temp1429_pw_gzmn;
int _temp1430_pw_gzmnd;
float _temp1431_a_gxdl1;
int _temp1432_pw_gxdl1a;
int _temp1433_pw_gxdl1;
int _temp1434_pw_gxdl1d;
float _temp1435_a_gxdr1;
int _temp1436_pw_gxdr1a;
int _temp1437_pw_gxdr1;
int _temp1438_pw_gxdr1d;
float _temp1439_a_gxdl2;
int _temp1440_pw_gxdl2a;
int _temp1441_pw_gxdl2;
int _temp1442_pw_gxdl2d;
float _temp1443_a_gxdr2;
int _temp1444_pw_gxdr2a;
int _temp1445_pw_gxdr2;
int _temp1446_pw_gxdr2d;
float _temp1447_a_gxk;
int _temp1448_pw_gxka;
int _temp1449_pw_gxk;
int _temp1450_pw_gxkd;
float _temp1451_a_gydl1;
int _temp1452_pw_gydl1a;
int _temp1453_pw_gydl1;
int _temp1454_pw_gydl1d;
float _temp1455_a_gydr1;
int _temp1456_pw_gydr1a;
int _temp1457_pw_gydr1;
int _temp1458_pw_gydr1d;
float _temp1459_a_gydl2;
int _temp1460_pw_gydl2a;
int _temp1461_pw_gydl2;
int _temp1462_pw_gydl2d;
float _temp1463_a_gydr2;
int _temp1464_pw_gydr2a;
int _temp1465_pw_gydr2;
int _temp1466_pw_gydr2d;
float _temp1467_a_gyk;
int _temp1468_pw_gyka;
int _temp1469_pw_gyk;
int _temp1470_pw_gykd;
float _temp1471_a_gzdl1;
int _temp1472_pw_gzdl1a;
int _temp1473_pw_gzdl1;
int _temp1474_pw_gzdl1d;
float _temp1475_a_gzdr1;
int _temp1476_pw_gzdr1a;
int _temp1477_pw_gzdr1;
int _temp1478_pw_gzdr1d;
float _temp1479_a_gzdl2;
int _temp1480_pw_gzdl2a;
int _temp1481_pw_gzdl2;
int _temp1482_pw_gzdl2d;
float _temp1483_a_gzdr2;
int _temp1484_pw_gzdr2a;
int _temp1485_pw_gzdr2;
int _temp1486_pw_gzdr2d;
float _temp1487_a_gzk;
int _temp1488_pw_gzka;
int _temp1489_pw_gzk;
int _temp1490_pw_gzkd;
float _temp1491_a_gzrf0;
int _temp1492_pw_gzrf0a;
int _temp1493_pw_gzrf0d;
float _temp1494_a_gyk0;
int _temp1495_pw_gyk0a;
int _temp1496_pw_gyk0;
int _temp1497_pw_gyk0d;
float _temp1498_a_dbgxrfcssat;
int _temp1499_pw_dbgxrfcssata;
int _temp1500_pw_dbgxrfcssat;
int _temp1501_pw_dbgxrfcssatd;
float _temp1502_a_dbgyrfcssat;
int _temp1503_pw_dbgyrfcssata;
int _temp1504_pw_dbgyrfcssat;
int _temp1505_pw_dbgyrfcssatd;
float _temp1506_a_dbgzrfcssat;
int _temp1507_pw_dbgzrfcssata;
int _temp1508_pw_dbgzrfcssat;
int _temp1509_pw_dbgzrfcssatd;
float _temp1510_a_gzrfcs;
int _temp1511_pw_gzrfcsa;
int _temp1512_pw_gzrfcs;
int _temp1513_pw_gzrfcsd;
float _temp1514_a_gykcs;
int _temp1515_pw_gykcsa;
int _temp1516_pw_gykcs;
int _temp1517_pw_gykcsd;
float _temp1518_a_gxkcs;
int _temp1519_pw_gxkcsa;
int _temp1520_pw_gxkcs;
int _temp1521_pw_gxkcsd;
float _temp1522_a_gzkcs;
int _temp1523_pw_gzkcsa;
int _temp1524_pw_gzkcs;
int _temp1525_pw_gzkcsd;
float _temp1526_a_gzrfse1;
int _temp1527_pw_gzrfse1a;
int _temp1528_pw_gzrfse1d;
float _temp1529_a_gykse1;
int _temp1530_pw_gykse1a;
int _temp1531_pw_gykse1;
int _temp1532_pw_gykse1d;
float _temp1533_a_gxkse1;
int _temp1534_pw_gxkse1a;
int _temp1535_pw_gxkse1;
int _temp1536_pw_gxkse1d;
float _temp1537_a_gzrfse2;
int _temp1538_pw_gzrfse2a;
int _temp1539_pw_gzrfse2d;
float _temp1540_a_gykse2;
int _temp1541_pw_gykse2a;
int _temp1542_pw_gykse2;
int _temp1543_pw_gykse2d;
float _temp1544_a_gxkse2;
int _temp1545_pw_gxkse2a;
int _temp1546_pw_gxkse2;
int _temp1547_pw_gxkse2d;
float _temp1548_a_gzrfse3;
int _temp1549_pw_gzrfse3a;
int _temp1550_pw_gzrfse3d;
float _temp1551_a_gykse3;
int _temp1552_pw_gykse3a;
int _temp1553_pw_gykse3;
int _temp1554_pw_gykse3d;
float _temp1555_a_gxkse3;
int _temp1556_pw_gxkse3a;
int _temp1557_pw_gxkse3;
int _temp1558_pw_gxkse3d;
float _temp1559_a_gzrfse4;
int _temp1560_pw_gzrfse4a;
int _temp1561_pw_gzrfse4d;
float _temp1562_a_gykse4;
int _temp1563_pw_gykse4a;
int _temp1564_pw_gykse4;
int _temp1565_pw_gykse4d;
float _temp1566_a_gxkse4;
int _temp1567_pw_gxkse4a;
int _temp1568_pw_gxkse4;
int _temp1569_pw_gxkse4d;
float _temp1570_a_gzrfse5;
int _temp1571_pw_gzrfse5a;
int _temp1572_pw_gzrfse5d;
float _temp1573_a_gykse5;
int _temp1574_pw_gykse5a;
int _temp1575_pw_gykse5;
int _temp1576_pw_gykse5d;
float _temp1577_a_gxkse5;
int _temp1578_pw_gxkse5a;
int _temp1579_pw_gxkse5;
int _temp1580_pw_gxkse5d;
float _temp1581_a_gzrfse6;
int _temp1582_pw_gzrfse6a;
int _temp1583_pw_gzrfse6d;
float _temp1584_a_gykse6;
int _temp1585_pw_gykse6a;
int _temp1586_pw_gykse6;
int _temp1587_pw_gykse6d;
float _temp1588_a_gxkse6;
int _temp1589_pw_gxkse6a;
int _temp1590_pw_gxkse6;
int _temp1591_pw_gxkse6d;
float _temp1592_a_gxrfsx1;
int _temp1593_pw_gxrfsx1a;
int _temp1594_pw_gxrfsx1d;
float _temp1595_a_gyksx1;
int _temp1596_pw_gyksx1a;
int _temp1597_pw_gyksx1;
int _temp1598_pw_gyksx1d;
float _temp1599_a_gxksx1;
int _temp1600_pw_gxksx1a;
int _temp1601_pw_gxksx1;
int _temp1602_pw_gxksx1d;
float _temp1603_a_gxrfsx2;
int _temp1604_pw_gxrfsx2a;
int _temp1605_pw_gxrfsx2d;
float _temp1606_a_gyksx2;
int _temp1607_pw_gyksx2a;
int _temp1608_pw_gyksx2;
int _temp1609_pw_gyksx2d;
float _temp1610_a_gxksx2;
int _temp1611_pw_gxksx2a;
int _temp1612_pw_gxksx2;
int _temp1613_pw_gxksx2d;
float _temp1614_a_gyrfsy1;
int _temp1615_pw_gyrfsy1a;
int _temp1616_pw_gyrfsy1d;
float _temp1617_a_gyksy1;
int _temp1618_pw_gyksy1a;
int _temp1619_pw_gyksy1;
int _temp1620_pw_gyksy1d;
float _temp1621_a_gxksy1;
int _temp1622_pw_gxksy1a;
int _temp1623_pw_gxksy1;
int _temp1624_pw_gxksy1d;
float _temp1625_a_gyrfsy2;
int _temp1626_pw_gyrfsy2a;
int _temp1627_pw_gyrfsy2d;
float _temp1628_a_gyksy2;
int _temp1629_pw_gyksy2a;
int _temp1630_pw_gyksy2;
int _temp1631_pw_gyksy2d;
float _temp1632_a_gxksy2;
int _temp1633_pw_gxksy2a;
int _temp1634_pw_gxksy2;
int _temp1635_pw_gxksy2d;
float _temp1636_a_gzrfsz1;
int _temp1637_pw_gzrfsz1a;
int _temp1638_pw_gzrfsz1d;
float _temp1639_a_gyksz1;
int _temp1640_pw_gyksz1a;
int _temp1641_pw_gyksz1;
int _temp1642_pw_gyksz1d;
float _temp1643_a_gxksz1;
int _temp1644_pw_gxksz1a;
int _temp1645_pw_gxksz1;
int _temp1646_pw_gxksz1d;
float _temp1647_a_gzrfsz2;
int _temp1648_pw_gzrfsz2a;
int _temp1649_pw_gzrfsz2d;
float _temp1650_a_gyksz2;
int _temp1651_pw_gyksz2a;
int _temp1652_pw_gyksz2;
int _temp1653_pw_gyksz2d;
float _temp1654_a_gxksz2;
int _temp1655_pw_gxksz2a;
int _temp1656_pw_gxksz2;
int _temp1657_pw_gxksz2d;
float _temp1658_a_gyrf1mps1;
int _temp1659_pw_gyrf1mps1a;
int _temp1660_pw_gyrf1mps1;
int _temp1661_pw_gyrf1mps1d;
float _temp1662_a_gy1mps1;
int _temp1663_pw_gy1mps1a;
int _temp1664_pw_gy1mps1;
int _temp1665_pw_gy1mps1d;
float _temp1666_a_gzrf1mps1;
int _temp1667_pw_gzrf1mps1a;
int _temp1668_pw_gzrf1mps1;
int _temp1669_pw_gzrf1mps1d;
float _temp1670_a_gz1mps1;
int _temp1671_pw_gz1mps1a;
int _temp1672_pw_gz1mps1;
int _temp1673_pw_gz1mps1d;
float _temp1674_a_gx1mps1;
int _temp1675_pw_gx1mps1a;
int _temp1676_pw_gx1mps1;
int _temp1677_pw_gx1mps1d;
float _temp1678_a_gzrf2mps1;
int _temp1679_pw_gzrf2mps1a;
int _temp1680_pw_gzrf2mps1d;
float _temp1681_a_gzrf2lmps1;
int _temp1682_pw_gzrf2lmps1a;
int _temp1683_pw_gzrf2lmps1;
int _temp1684_pw_gzrf2lmps1d;
float _temp1685_a_gzrf2rmps1;
int _temp1686_pw_gzrf2rmps1a;
int _temp1687_pw_gzrf2rmps1;
int _temp1688_pw_gzrf2rmps1d;
float _temp1689_a_gxwmps1;
int _temp1690_pw_gxwmps1a;
int _temp1691_pw_gxwmps1;
int _temp1692_pw_gxwmps1d;
float _temp1693_a_gzrf1cfl;
int _temp1694_pw_gzrf1cfla;
int _temp1695_pw_gzrf1cfld;
float _temp1696_a_gz1cfl;
int _temp1697_pw_gz1cfla;
int _temp1698_pw_gz1cfl;
int _temp1699_pw_gz1cfld;
float _temp1700_a_gykcfl;
int _temp1701_pw_gykcfla;
int _temp1702_pw_gykcfl;
int _temp1703_pw_gykcfld;
float _temp1704_a_gxkrcvn;
int _temp1705_pw_gxkrcvna;
int _temp1706_pw_gxkrcvn;
int _temp1707_pw_gxkrcvnd;
float _temp1708_a_gykrcvn;
int _temp1709_pw_gykrcvna;
int _temp1710_pw_gykrcvn;
int _temp1711_pw_gykrcvnd;
float _temp1712_a_gzkrcvn;
int _temp1713_pw_gzkrcvna;
int _temp1714_pw_gzkrcvn;
int _temp1715_pw_gzkrcvnd;
float _temp1716_a_gxk2rcvn;
int _temp1717_pw_gxk2rcvna;
int _temp1718_pw_gxk2rcvn;
int _temp1719_pw_gxk2rcvnd;
float _temp1720_a_gyk2rcvn;
int _temp1721_pw_gyk2rcvna;
int _temp1722_pw_gyk2rcvn;
int _temp1723_pw_gyk2rcvnd;
float _temp1724_a_gzk2rcvn;
int _temp1725_pw_gzk2rcvna;
int _temp1726_pw_gzk2rcvn;
int _temp1727_pw_gzk2rcvnd;
float _temp1728_a_gzrf0cfh;
int _temp1729_pw_gzrf0cfha;
int _temp1730_pw_gzrf0cfhd;
float _temp1731_a_gyrf0kcfh;
int _temp1732_pw_gyrf0kcfha;
int _temp1733_pw_gyrf0kcfh;
int _temp1734_pw_gyrf0kcfhd;
float _temp1735_a_gzrf1cfh;
int _temp1736_pw_gzrf1cfha;
int _temp1737_pw_gzrf1cfhd;
float _temp1738_a_gxrf2cfh;
int _temp1739_pw_gxrf2cfha;
int _temp1740_pw_gxrf2cfh;
int _temp1741_pw_gxrf2cfhd;
float _temp1742_a_gyrf2cfh;
int _temp1743_pw_gyrf2cfha;
int _temp1744_pw_gyrf2cfh;
int _temp1745_pw_gyrf2cfhd;
float _temp1746_a_gzrf2lcfh;
int _temp1747_pw_gzrf2lcfha;
int _temp1748_pw_gzrf2lcfh;
int _temp1749_pw_gzrf2lcfhd;
float _temp1750_a_gzrf2rcfh;
int _temp1751_pw_gzrf2rcfha;
int _temp1752_pw_gzrf2rcfh;
int _temp1753_pw_gzrf2rcfhd;
float _temp1754_a_gyrf3cfh;
int _temp1755_pw_gyrf3cfha;
int _temp1756_pw_gyrf3cfh;
int _temp1757_pw_gyrf3cfhd;
float _temp1758_a_gzrf3lcfh;
int _temp1759_pw_gzrf3lcfha;
int _temp1760_pw_gzrf3lcfh;
int _temp1761_pw_gzrf3lcfhd;
float _temp1762_a_gzrf3rcfh;
int _temp1763_pw_gzrf3rcfha;
int _temp1764_pw_gzrf3rcfh;
int _temp1765_pw_gzrf3rcfhd;
float _temp1766_a_gy1cfh;
int _temp1767_pw_gy1cfha;
int _temp1768_pw_gy1cfh;
int _temp1769_pw_gy1cfhd;
float _temp1770_a_gx1cfh;
int _temp1771_pw_gx1cfha;
int _temp1772_pw_gx1cfh;
int _temp1773_pw_gx1cfhd;
float _temp1774_a_gzrf4cfh;
int _temp1775_pw_gzrf4cfha;
int _temp1776_pw_gzrf4cfh;
int _temp1777_pw_gzrf4cfhd;
float _temp1778_a_gzrf4lcfh;
int _temp1779_pw_gzrf4lcfha;
int _temp1780_pw_gzrf4lcfh;
int _temp1781_pw_gzrf4lcfhd;
float _temp1782_a_gzrf4rcfh;
int _temp1783_pw_gzrf4rcfha;
int _temp1784_pw_gzrf4rcfh;
int _temp1785_pw_gzrf4rcfhd;
float _temp1786_a_gykcfh;
int _temp1787_pw_gykcfha;
int _temp1788_pw_gykcfh;
int _temp1789_pw_gykcfhd;
float _temp1790_a_gzrf1ftg;
int _temp1791_pw_gzrf1ftga;
int _temp1792_pw_gzrf1ftgd;
float _temp1793_a_gz1ftg;
int _temp1794_pw_gz1ftga;
int _temp1795_pw_gz1ftg;
int _temp1796_pw_gz1ftgd;
float _temp1797_a_gzrf2ftg;
int _temp1798_pw_gzrf2ftga;
int _temp1799_pw_gzrf2ftgd;
float _temp1800_a_gz2ftg;
int _temp1801_pw_gz2ftga;
int _temp1802_pw_gz2ftg;
int _temp1803_pw_gz2ftgd;
float _temp1804_a_gzrf3ftg;
int _temp1805_pw_gzrf3ftga;
int _temp1806_pw_gzrf3ftgd;
float _temp1807_a_gz3ftg;
int _temp1808_pw_gz3ftga;
int _temp1809_pw_gz3ftg;
int _temp1810_pw_gz3ftgd;
float _temp1811_a_gx1ftg;
int _temp1812_pw_gx1ftga;
int _temp1813_pw_gx1ftg;
int _temp1814_pw_gx1ftgd;
float _temp1815_a_gx1bftg;
int _temp1816_pw_gx1bftga;
int _temp1817_pw_gx1bftg;
int _temp1818_pw_gx1bftgd;
float _temp1819_a_gxw1ftg;
int _temp1820_pw_gxw1ftga;
int _temp1821_pw_gxw1ftg;
int _temp1822_pw_gxw1ftgd;
float _temp1823_a_postgxw1ftg;
int _temp1824_pw_postgxw1ftga;
int _temp1825_pw_postgxw1ftg;
int _temp1826_pw_postgxw1ftgd;
float _temp1827_a_gz2bftg;
int _temp1828_pw_gz2bftga;
int _temp1829_pw_gz2bftg;
int _temp1830_pw_gz2bftgd;
float _temp1831_a_gx2ftg;
int _temp1832_pw_gx2ftga;
int _temp1833_pw_gx2ftg;
int _temp1834_pw_gx2ftgd;
float _temp1835_a_gxw2ftg;
int _temp1836_pw_gxw2ftga;
int _temp1837_pw_gxw2ftg;
int _temp1838_pw_gxw2ftgd;
float _temp1839_a_gx2test;
int _temp1840_pw_gx2testa;
int _temp1841_pw_gx2test;
int _temp1842_pw_gx2testd;
float _temp1843_a_gyrf1xtg;
int _temp1844_pw_gyrf1xtga;
int _temp1845_pw_gyrf1xtg;
int _temp1846_pw_gyrf1xtgd;
float _temp1847_a_gzrf1xtg;
int _temp1848_pw_gzrf1xtga;
int _temp1849_pw_gzrf1xtg;
int _temp1850_pw_gzrf1xtgd;
float _temp1851_a_gykxtgl;
int _temp1852_pw_gykxtgla;
int _temp1853_pw_gykxtgl;
int _temp1854_pw_gykxtgld;
float _temp1855_a_gz1xtg;
int _temp1856_pw_gz1xtga;
int _temp1857_pw_gz1xtg;
int _temp1858_pw_gz1xtgd;
float _temp1859_a_gzrf2xtg;
int _temp1860_pw_gzrf2xtga;
int _temp1861_pw_gzrf2xtgd;
float _temp1862_a_gz2xtg;
int _temp1863_pw_gz2xtga;
int _temp1864_pw_gz2xtg;
int _temp1865_pw_gz2xtgd;
float _temp1866_a_gykxtgr;
int _temp1867_pw_gykxtgra;
int _temp1868_pw_gykxtgr;
int _temp1869_pw_gykxtgrd;
float _temp1870_a_gx1bxtg;
int _temp1871_pw_gx1bxtga;
int _temp1872_pw_gx1bxtg;
int _temp1873_pw_gx1bxtgd;
float _temp1874_a_gxw1xtg;
int _temp1875_pw_gxw1xtga;
int _temp1876_pw_gxw1xtg;
int _temp1877_pw_gxw1xtgd;
float _temp1878_a_gzrf1as;
int _temp1879_pw_gzrf1asa;
int _temp1880_pw_gzrf1asd;
float _temp1881_a_gz1as;
int _temp1882_pw_gz1asa;
int _temp1883_pw_gz1as;
int _temp1884_pw_gz1asd;
float _temp1885_a_gxwas;
int _temp1886_pw_gxwasa;
int _temp1887_pw_gxwas;
int _temp1888_pw_gxwasd;
float _temp1889_a_gx1as;
int _temp1890_pw_gx1asa;
int _temp1891_pw_gx1as;
int _temp1892_pw_gx1asd;
float _temp1893_a_gxkas;
int _temp1894_pw_gxkasa;
int _temp1895_pw_gxkas;
int _temp1896_pw_gxkasd;
float _temp1897_a_gzkas;
int _temp1898_pw_gzkasa;
int _temp1899_pw_gzkas;
int _temp1900_pw_gzkasd;
float _temp1901_a_gzrf1rs;
int _temp1902_pw_gzrf1rsa;
int _temp1903_pw_gzrf1rs;
int _temp1904_pw_gzrf1rsd;
float _temp1905_a_gxkbsrs;
int _temp1906_pw_gxkbsrsa;
int _temp1907_pw_gxkbsrs;
int _temp1908_pw_gxkbsrsd;
float _temp1909_a_gz1rs;
int _temp1910_pw_gz1rsa;
int _temp1911_pw_gz1rs;
int _temp1912_pw_gz1rsd;
float _temp1913_a_gzkbsrs;
int _temp1914_pw_gzkbsrsa;
int _temp1915_pw_gzkbsrs;
int _temp1916_pw_gzkbsrsd;
float _temp1917_a_gxwrs;
int _temp1918_pw_gxwrsa;
int _temp1919_pw_gxwrs;
int _temp1920_pw_gxwrsd;
float _temp1921_a_gx2rs;
int _temp1922_pw_gx2rsa;
int _temp1923_pw_gx2rs;
int _temp1924_pw_gx2rsd;
float _temp1925_a_gxw2rs;
int _temp1926_pw_gxw2rsa;
int _temp1927_pw_gxw2rs;
int _temp1928_pw_gxw2rsd;
float _temp1929_a_gx1rs;
int _temp1930_pw_gx1rsa;
int _temp1931_pw_gx1rs;
int _temp1932_pw_gx1rsd;
float _temp1933_a_gzkrs;
int _temp1934_pw_gzkrsa;
int _temp1935_pw_gzkrs;
int _temp1936_pw_gzkrsd;
float _temp1937_a_gxkrs;
int _temp1938_pw_gxkrsa;
int _temp1939_pw_gxkrs;
int _temp1940_pw_gxkrsd;
float _temp1941_a_gzrf1dtg;
int _temp1942_pw_gzrf1dtga;
int _temp1943_pw_gzrf1dtg;
int _temp1944_pw_gzrf1dtgd;
float _temp1945_a_gxkbsdtg;
int _temp1946_pw_gxkbsdtga;
int _temp1947_pw_gxkbsdtg;
int _temp1948_pw_gxkbsdtgd;
float _temp1949_a_gz1dtg;
int _temp1950_pw_gz1dtga;
int _temp1951_pw_gz1dtg;
int _temp1952_pw_gz1dtgd;
float _temp1953_a_gzkbsdtg;
int _temp1954_pw_gzkbsdtga;
int _temp1955_pw_gzkbsdtg;
int _temp1956_pw_gzkbsdtgd;
float _temp1957_a_gxwdtg;
int _temp1958_pw_gxwdtga;
int _temp1959_pw_gxwdtg;
int _temp1960_pw_gxwdtgd;
float _temp1961_a_gx2dtg;
int _temp1962_pw_gx2dtga;
int _temp1963_pw_gx2dtg;
int _temp1964_pw_gx2dtgd;
float _temp1965_a_gxw2dtg;
int _temp1966_pw_gxw2dtga;
int _temp1967_pw_gxw2dtg;
int _temp1968_pw_gxw2dtgd;
float _temp1969_a_gx1dtg;
int _temp1970_pw_gx1dtga;
int _temp1971_pw_gx1dtg;
int _temp1972_pw_gx1dtgd;
float _temp1973_a_gzkdtg;
int _temp1974_pw_gzkdtga;
int _temp1975_pw_gzkdtg;
int _temp1976_pw_gzkdtgd;
float _temp1977_a_gxkdtg;
int _temp1978_pw_gxkdtga;
int _temp1979_pw_gxkdtg;
int _temp1980_pw_gxkdtgd;
float _temp1981_a_gzrf1cal;
int _temp1982_pw_gzrf1cala;
int _temp1983_pw_gzrf1cal;
int _temp1984_pw_gzrf1cald;
float _temp1985_a_gzcombcal;
int _temp1986_pw_gzcombcala;
int _temp1987_pw_gzcombcal;
int _temp1988_pw_gzcombcald;
float _temp1989_a_gzprcal;
int _temp1990_pw_gzprcala;
int _temp1991_pw_gzprcal;
int _temp1992_pw_gzprcald;
float _temp1993_a_gxwcal;
int _temp1994_pw_gxwcala;
int _temp1995_pw_gxwcal;
int _temp1996_pw_gxwcald;
float _temp1997_a_gx1cal;
int _temp1998_pw_gx1cala;
int _temp1999_pw_gx1cal;
int _temp2000_pw_gx1cald;
float _temp2001_a_gy1cal;
int _temp2002_pw_gy1cala;
int _temp2003_pw_gy1cal;
int _temp2004_pw_gy1cald;
float _temp2005_a_gy1rcal;
int _temp2006_pw_gy1rcala;
int _temp2007_pw_gy1rcal;
int _temp2008_pw_gy1rcald;
float _temp2009_a_gzrf1coil;
int _temp2010_pw_gzrf1coila;
int _temp2011_pw_gzrf1coil;
int _temp2012_pw_gzrf1coild;
float _temp2013_a_gzcombcoil;
int _temp2014_pw_gzcombcoila;
int _temp2015_pw_gzcombcoil;
int _temp2016_pw_gzcombcoild;
float _temp2017_a_gzprcoil;
int _temp2018_pw_gzprcoila;
int _temp2019_pw_gzprcoil;
int _temp2020_pw_gzprcoild;
float _temp2021_a_gxwcoil;
int _temp2022_pw_gxwcoila;
int _temp2023_pw_gxwcoil;
int _temp2024_pw_gxwcoild;
float _temp2025_a_gx1coil;
int _temp2026_pw_gx1coila;
int _temp2027_pw_gx1coil;
int _temp2028_pw_gx1coild;
float _temp2029_a_gy1coil;
int _temp2030_pw_gy1coila;
int _temp2031_pw_gy1coil;
int _temp2032_pw_gy1coild;
float _temp2033_a_gy1rcoil;
int _temp2034_pw_gy1rcoila;
int _temp2035_pw_gy1rcoil;
int _temp2036_pw_gy1rcoild;
float _temp2037_a_gzrf1mon;
int _temp2038_pw_gzrf1mona;
int _temp2039_pw_gzrf1mond;
float _temp2040_a_gyrf1mon;
int _temp2041_pw_gyrf1mona;
int _temp2042_pw_gyrf1mon;
int _temp2043_pw_gyrf1mond;
float _temp2044_a_gz1mon;
int _temp2045_pw_gz1mona;
int _temp2046_pw_gz1mon;
int _temp2047_pw_gz1mond;
float _temp2048_a_gy1mon;
int _temp2049_pw_gy1mona;
int _temp2050_pw_gy1mon;
int _temp2051_pw_gy1mond;
float _temp2052_a_gyrf2mon;
int _temp2053_pw_gyrf2mona;
int _temp2054_pw_gyrf2mond;
float _temp2055_a_gyrf2lmon;
int _temp2056_pw_gyrf2lmona;
int _temp2057_pw_gyrf2lmon;
int _temp2058_pw_gyrf2lmond;
float _temp2059_a_gyrf2rmon;
int _temp2060_pw_gyrf2rmona;
int _temp2061_pw_gyrf2rmon;
int _temp2062_pw_gyrf2rmond;
float _temp2063_a_gxwmon;
int _temp2064_pw_gxwmona;
int _temp2065_pw_gxwmon;
int _temp2066_pw_gxwmond;
float _temp2067_a_gx1mon;
int _temp2068_pw_gx1mona;
int _temp2069_pw_gx1mon;
int _temp2070_pw_gx1mond;
float _temp2071_a_gxfcmon;
int _temp2072_pw_gxfcmona;
int _temp2073_pw_gxfcmon;
int _temp2074_pw_gxfcmond;
float _temp2075_a_gzkmon;
int _temp2076_pw_gzkmona;
int _temp2077_pw_gzkmon;
int _temp2078_pw_gzkmond;
float _temp2079_a_gyrfmontipup;
int _temp2080_pw_gyrfmontipupa;
int _temp2081_pw_gyrfmontipupd;
float _temp2082_a_gzkmontipup;
int _temp2083_pw_gzkmontipupa;
int _temp2084_pw_gzkmontipup;
int _temp2085_pw_gzkmontipupd;

#endif /* h_epi2_hostdecl_h */

