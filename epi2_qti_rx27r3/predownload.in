
{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwksp, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwksp, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwksp.fixedflag ? (_temp1304_a_gxwksp=a_gxwksp,&_temp1304_a_gxwksp) : &a_gxwksp, _pw_gxwkspa.fixedflag ? (_temp1305_pw_gxwkspa=pw_gxwkspa,&_temp1305_pw_gxwkspa) : &pw_gxwkspa, _pw_gxwksp.fixedflag ? (_temp1306_pw_gxwksp=pw_gxwksp,&_temp1306_pw_gxwksp) : &pw_gxwksp,
                      _pw_gxwkspd.fixedflag ? (_temp1307_pw_gxwkspd=pw_gxwkspd,&_temp1307_pw_gxwkspd) : &pw_gxwkspd) == FAILURE)
            return FAILURE;
    }

    ia_gxwksp  = _ia_gxwksp.fixedflag ?     ((void)((int)((a_gxwksp/target)*MAX_PG_IAMP)), ia_gxwksp) : (int)((a_gxwksp/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gywksp, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gywksp, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gywksp.fixedflag ? (_temp1308_a_gywksp=a_gywksp,&_temp1308_a_gywksp) : &a_gywksp, _pw_gywkspa.fixedflag ? (_temp1309_pw_gywkspa=pw_gywkspa,&_temp1309_pw_gywkspa) : &pw_gywkspa, _pw_gywksp.fixedflag ? (_temp1310_pw_gywksp=pw_gywksp,&_temp1310_pw_gywksp) : &pw_gywksp,
                      _pw_gywkspd.fixedflag ? (_temp1311_pw_gywkspd=pw_gywkspd,&_temp1311_pw_gywkspd) : &pw_gywkspd) == FAILURE)
            return FAILURE;
    }

    ia_gywksp  = _ia_gywksp.fixedflag ?     ((void)((int)((a_gywksp/target)*MAX_PG_IAMP)), ia_gywksp) : (int)((a_gywksp/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzwksp, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzwksp, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzwksp.fixedflag ? (_temp1312_a_gzwksp=a_gzwksp,&_temp1312_a_gzwksp) : &a_gzwksp, _pw_gzwkspa.fixedflag ? (_temp1313_pw_gzwkspa=pw_gzwkspa,&_temp1313_pw_gzwkspa) : &pw_gzwkspa, _pw_gzwksp.fixedflag ? (_temp1314_pw_gzwksp=pw_gzwksp,&_temp1314_pw_gzwksp) : &pw_gzwksp,
                      _pw_gzwkspd.fixedflag ? (_temp1315_pw_gzwkspd=pw_gzwkspd,&_temp1315_pw_gzwkspd) : &pw_gzwkspd) == FAILURE)
            return FAILURE;
    }

    ia_gzwksp  = _ia_gzwksp.fixedflag ?     ((void)((int)((a_gzwksp/target)*MAX_PG_IAMP)), ia_gzwksp) : (int)((a_gzwksp/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyex1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyex1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyex1.fixedflag ? (_temp1316_a_gyex1=a_gyex1,&_temp1316_a_gyex1) : &a_gyex1, _pw_gyex1a.fixedflag ? (_temp1317_pw_gyex1a=pw_gyex1a,&_temp1317_pw_gyex1a) : &pw_gyex1a, _pw_gyex1.fixedflag ? (_temp1318_pw_gyex1=pw_gyex1,&_temp1318_pw_gyex1) : &pw_gyex1,
                      _pw_gyex1d.fixedflag ? (_temp1319_pw_gyex1d=pw_gyex1d,&_temp1319_pw_gyex1d) : &pw_gyex1d) == FAILURE)
            return FAILURE;
    }

    ia_gyex1  = _ia_gyex1.fixedflag ?     ((void)((int)((a_gyex1/target)*MAX_PG_IAMP)), ia_gyex1) : (int)((a_gyex1/target)*MAX_PG_IAMP);
}











    if (optramp( _pw_gzrf1a.fixedflag ? (_temp1320_pw_gzrf1a=pw_gzrf1a,&_temp1320_pw_gzrf1a) : &pw_gzrf1a,a_gzrf1,
                 loggrd.tz, loggrd.zrt, 
                 0 ) == FAILURE) {
        return FAILURE;
    }

    if (optramp( _pw_gzrf1d.fixedflag ? (_temp1321_pw_gzrf1d=pw_gzrf1d,&_temp1321_pw_gzrf1d) : &pw_gzrf1d,a_gzrf1,
                 loggrd.tz, loggrd.zft, 
                 0 ) == FAILURE) {
        return FAILURE;
    }

    ia_gzrf1  = _ia_gzrf1.fixedflag ?     ((void)((int)(a_gzrf1*max_pg_iamp/loggrd.tz)), ia_gzrf1) : (int)(a_gzrf1*max_pg_iamp/loggrd.tz);

    ia_rf1  = _ia_rf1.fixedflag ?    ((void)((int)(a_rf1*max_pg_iamp)), ia_rf1) : (int)(a_rf1*max_pg_iamp);

    ia_thetarf1  = _ia_thetarf1.fixedflag ?     ((void)((int)(a_thetarf1*max_pg_iamp/loggrd.tz)), ia_thetarf1) : (int)(a_thetarf1*max_pg_iamp/loggrd.tz);


  if (ampslice(_a_gzrf2.fixedflag ? (_temp1322_a_gzrf2=a_gzrf2,&_temp1322_a_gzrf2) : &a_gzrf2,(long)(4000000*cyc_rf2/
					 pw_rf2),
	       (float)thk_rf2,(float)gscale_rf2,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2a.fixedflag ? (_temp1323_pw_gzrf2a=pw_gzrf2a,&_temp1323_pw_gzrf2a) : &pw_gzrf2a,a_gzrf2,loggrd.tz,
      loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2d.fixedflag ? (_temp1324_pw_gzrf2d=pw_gzrf2d,&_temp1324_pw_gzrf2d) : &pw_gzrf2d,a_gzrf2,loggrd.tz,
          loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf2  = _ia_gzrf2.fixedflag ?    ((void)((int)(a_gzrf2*MAX_PG_IAMP/loggrd.tz)), ia_gzrf2) : (int)(a_gzrf2*MAX_PG_IAMP/loggrd.tz);
			      
  ia_rf2  = _ia_rf2.fixedflag ?    ((void)((int)(a_rf2*MAX_PG_IAMP)), ia_rf2) : (int)(a_rf2*MAX_PG_IAMP);
  if (res_rf2 == 0)
    res_rf2  = _res_rf2.fixedflag ?  ((void)(pw_rf2/(RF_UPDATE_TIME)), res_rf2) : pw_rf2/(RF_UPDATE_TIME);


  if (ampslice(_a_gzrf2left.fixedflag ? (_temp1325_a_gzrf2left=a_gzrf2left,&_temp1325_a_gzrf2left) : &a_gzrf2left,(long)(4000000*cyc_rf2left/
					 pw_rf2left),
	       (float)thk_rf2left,(float)gscale_rf2left,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2lefta.fixedflag ? (_temp1326_pw_gzrf2lefta=pw_gzrf2lefta,&_temp1326_pw_gzrf2lefta) : &pw_gzrf2lefta,a_gzrf2left,loggrd.tz,
      loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2leftd.fixedflag ? (_temp1327_pw_gzrf2leftd=pw_gzrf2leftd,&_temp1327_pw_gzrf2leftd) : &pw_gzrf2leftd,a_gzrf2left,loggrd.tz,
          loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf2left  = _ia_gzrf2left.fixedflag ?    ((void)((int)(a_gzrf2left*MAX_PG_IAMP/loggrd.tz)), ia_gzrf2left) : (int)(a_gzrf2left*MAX_PG_IAMP/loggrd.tz);
			      
  ia_rf2left  = _ia_rf2left.fixedflag ?    ((void)((int)(a_rf2left*MAX_PG_IAMP)), ia_rf2left) : (int)(a_rf2left*MAX_PG_IAMP);
  if (res_rf2left == 0)
    res_rf2left  = _res_rf2left.fixedflag ?  ((void)(pw_rf2left/(RF_UPDATE_TIME)), res_rf2left) : pw_rf2left/(RF_UPDATE_TIME);


  if (ampslice(_a_gzrf2right.fixedflag ? (_temp1328_a_gzrf2right=a_gzrf2right,&_temp1328_a_gzrf2right) : &a_gzrf2right,(long)(4000000*cyc_rf2right/
					 pw_rf2right),
	       (float)thk_rf2right,(float)gscale_rf2right,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2righta.fixedflag ? (_temp1329_pw_gzrf2righta=pw_gzrf2righta,&_temp1329_pw_gzrf2righta) : &pw_gzrf2righta,a_gzrf2right,loggrd.tz,
      loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2rightd.fixedflag ? (_temp1330_pw_gzrf2rightd=pw_gzrf2rightd,&_temp1330_pw_gzrf2rightd) : &pw_gzrf2rightd,a_gzrf2right,loggrd.tz,
          loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf2right  = _ia_gzrf2right.fixedflag ?    ((void)((int)(a_gzrf2right*MAX_PG_IAMP/loggrd.tz)), ia_gzrf2right) : (int)(a_gzrf2right*MAX_PG_IAMP/loggrd.tz);
			      
  ia_rf2right  = _ia_rf2right.fixedflag ?    ((void)((int)(a_rf2right*MAX_PG_IAMP)), ia_rf2right) : (int)(a_rf2right*MAX_PG_IAMP);
  if (res_rf2right == 0)
    res_rf2right  = _res_rf2right.fixedflag ?  ((void)(pw_rf2right/(RF_UPDATE_TIME)), res_rf2right) : pw_rf2right/(RF_UPDATE_TIME);



{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf2iv, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf2iv, &loggrd);
        if (amppwgrad((float)(0.0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf2iv.fixedflag ? (_temp1331_a_gyrf2iv=a_gyrf2iv,&_temp1331_a_gyrf2iv) : &a_gyrf2iv, _pw_gyrf2iva.fixedflag ? (_temp1332_pw_gyrf2iva=pw_gyrf2iva,&_temp1332_pw_gyrf2iva) : &pw_gyrf2iva, _pw_gyrf2iv.fixedflag ? (_temp1333_pw_gyrf2iv=pw_gyrf2iv,&_temp1333_pw_gyrf2iv) : &pw_gyrf2iv,
                      _pw_gyrf2ivd.fixedflag ? (_temp1334_pw_gyrf2ivd=pw_gyrf2ivd,&_temp1334_pw_gyrf2ivd) : &pw_gyrf2ivd) == FAILURE)
            return FAILURE;
    }

    ia_gyrf2iv  = _ia_gyrf2iv.fixedflag ?     ((void)((int)((a_gyrf2iv/target)*MAX_PG_IAMP)), ia_gyrf2iv) : (int)((a_gyrf2iv/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2l1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2l1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2l1.fixedflag ? (_temp1335_a_gzrf2l1=a_gzrf2l1,&_temp1335_a_gzrf2l1) : &a_gzrf2l1, _pw_gzrf2l1a.fixedflag ? (_temp1336_pw_gzrf2l1a=pw_gzrf2l1a,&_temp1336_pw_gzrf2l1a) : &pw_gzrf2l1a, _pw_gzrf2l1.fixedflag ? (_temp1337_pw_gzrf2l1=pw_gzrf2l1,&_temp1337_pw_gzrf2l1) : &pw_gzrf2l1,
                      _pw_gzrf2l1d.fixedflag ? (_temp1338_pw_gzrf2l1d=pw_gzrf2l1d,&_temp1338_pw_gzrf2l1d) : &pw_gzrf2l1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2l1  = _ia_gzrf2l1.fixedflag ?     ((void)((int)((a_gzrf2l1/target)*MAX_PG_IAMP)), ia_gzrf2l1) : (int)((a_gzrf2l1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2r1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2r1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2r1.fixedflag ? (_temp1339_a_gzrf2r1=a_gzrf2r1,&_temp1339_a_gzrf2r1) : &a_gzrf2r1, _pw_gzrf2r1a.fixedflag ? (_temp1340_pw_gzrf2r1a=pw_gzrf2r1a,&_temp1340_pw_gzrf2r1a) : &pw_gzrf2r1a, _pw_gzrf2r1.fixedflag ? (_temp1341_pw_gzrf2r1=pw_gzrf2r1,&_temp1341_pw_gzrf2r1) : &pw_gzrf2r1,
                      _pw_gzrf2r1d.fixedflag ? (_temp1342_pw_gzrf2r1d=pw_gzrf2r1d,&_temp1342_pw_gzrf2r1d) : &pw_gzrf2r1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2r1  = _ia_gzrf2r1.fixedflag ?     ((void)((int)((a_gzrf2r1/target)*MAX_PG_IAMP)), ia_gzrf2r1) : (int)((a_gzrf2r1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_xgradCrusherL, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_xgradCrusherL, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_xgradCrusherL.fixedflag ? (_temp1343_a_xgradCrusherL=a_xgradCrusherL,&_temp1343_a_xgradCrusherL) : &a_xgradCrusherL, _pw_xgradCrusherLa.fixedflag ? (_temp1344_pw_xgradCrusherLa=pw_xgradCrusherLa,&_temp1344_pw_xgradCrusherLa) : &pw_xgradCrusherLa, _pw_xgradCrusherL.fixedflag ? (_temp1345_pw_xgradCrusherL=pw_xgradCrusherL,&_temp1345_pw_xgradCrusherL) : &pw_xgradCrusherL,
                      _pw_xgradCrusherLd.fixedflag ? (_temp1346_pw_xgradCrusherLd=pw_xgradCrusherLd,&_temp1346_pw_xgradCrusherLd) : &pw_xgradCrusherLd) == FAILURE)
            return FAILURE;
    }

    ia_xgradCrusherL  = _ia_xgradCrusherL.fixedflag ?     ((void)((int)((a_xgradCrusherL/target)*MAX_PG_IAMP)), ia_xgradCrusherL) : (int)((a_xgradCrusherL/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_xgradCrusherR, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_xgradCrusherR, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_xgradCrusherR.fixedflag ? (_temp1347_a_xgradCrusherR=a_xgradCrusherR,&_temp1347_a_xgradCrusherR) : &a_xgradCrusherR, _pw_xgradCrusherRa.fixedflag ? (_temp1348_pw_xgradCrusherRa=pw_xgradCrusherRa,&_temp1348_pw_xgradCrusherRa) : &pw_xgradCrusherRa, _pw_xgradCrusherR.fixedflag ? (_temp1349_pw_xgradCrusherR=pw_xgradCrusherR,&_temp1349_pw_xgradCrusherR) : &pw_xgradCrusherR,
                      _pw_xgradCrusherRd.fixedflag ? (_temp1350_pw_xgradCrusherRd=pw_xgradCrusherRd,&_temp1350_pw_xgradCrusherRd) : &pw_xgradCrusherRd) == FAILURE)
            return FAILURE;
    }

    ia_xgradCrusherR  = _ia_xgradCrusherR.fixedflag ?     ((void)((int)((a_xgradCrusherR/target)*MAX_PG_IAMP)), ia_xgradCrusherR) : (int)((a_xgradCrusherR/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_ygradCrusherL, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_ygradCrusherL, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_ygradCrusherL.fixedflag ? (_temp1351_a_ygradCrusherL=a_ygradCrusherL,&_temp1351_a_ygradCrusherL) : &a_ygradCrusherL, _pw_ygradCrusherLa.fixedflag ? (_temp1352_pw_ygradCrusherLa=pw_ygradCrusherLa,&_temp1352_pw_ygradCrusherLa) : &pw_ygradCrusherLa, _pw_ygradCrusherL.fixedflag ? (_temp1353_pw_ygradCrusherL=pw_ygradCrusherL,&_temp1353_pw_ygradCrusherL) : &pw_ygradCrusherL,
                      _pw_ygradCrusherLd.fixedflag ? (_temp1354_pw_ygradCrusherLd=pw_ygradCrusherLd,&_temp1354_pw_ygradCrusherLd) : &pw_ygradCrusherLd) == FAILURE)
            return FAILURE;
    }

    ia_ygradCrusherL  = _ia_ygradCrusherL.fixedflag ?     ((void)((int)((a_ygradCrusherL/target)*MAX_PG_IAMP)), ia_ygradCrusherL) : (int)((a_ygradCrusherL/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_ygradCrusherR, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_ygradCrusherR, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_ygradCrusherR.fixedflag ? (_temp1355_a_ygradCrusherR=a_ygradCrusherR,&_temp1355_a_ygradCrusherR) : &a_ygradCrusherR, _pw_ygradCrusherRa.fixedflag ? (_temp1356_pw_ygradCrusherRa=pw_ygradCrusherRa,&_temp1356_pw_ygradCrusherRa) : &pw_ygradCrusherRa, _pw_ygradCrusherR.fixedflag ? (_temp1357_pw_ygradCrusherR=pw_ygradCrusherR,&_temp1357_pw_ygradCrusherR) : &pw_ygradCrusherR,
                      _pw_ygradCrusherRd.fixedflag ? (_temp1358_pw_ygradCrusherRd=pw_ygradCrusherRd,&_temp1358_pw_ygradCrusherRd) : &pw_ygradCrusherRd) == FAILURE)
            return FAILURE;
    }

    ia_ygradCrusherR  = _ia_ygradCrusherR.fixedflag ?     ((void)((int)((a_ygradCrusherR/target)*MAX_PG_IAMP)), ia_ygradCrusherR) : (int)((a_ygradCrusherR/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2leftl1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2leftl1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2leftl1.fixedflag ? (_temp1359_a_gzrf2leftl1=a_gzrf2leftl1,&_temp1359_a_gzrf2leftl1) : &a_gzrf2leftl1, _pw_gzrf2leftl1a.fixedflag ? (_temp1360_pw_gzrf2leftl1a=pw_gzrf2leftl1a,&_temp1360_pw_gzrf2leftl1a) : &pw_gzrf2leftl1a, _pw_gzrf2leftl1.fixedflag ? (_temp1361_pw_gzrf2leftl1=pw_gzrf2leftl1,&_temp1361_pw_gzrf2leftl1) : &pw_gzrf2leftl1,
                      _pw_gzrf2leftl1d.fixedflag ? (_temp1362_pw_gzrf2leftl1d=pw_gzrf2leftl1d,&_temp1362_pw_gzrf2leftl1d) : &pw_gzrf2leftl1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2leftl1  = _ia_gzrf2leftl1.fixedflag ?     ((void)((int)((a_gzrf2leftl1/target)*MAX_PG_IAMP)), ia_gzrf2leftl1) : (int)((a_gzrf2leftl1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2leftr1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2leftr1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2leftr1.fixedflag ? (_temp1363_a_gzrf2leftr1=a_gzrf2leftr1,&_temp1363_a_gzrf2leftr1) : &a_gzrf2leftr1, _pw_gzrf2leftr1a.fixedflag ? (_temp1364_pw_gzrf2leftr1a=pw_gzrf2leftr1a,&_temp1364_pw_gzrf2leftr1a) : &pw_gzrf2leftr1a, _pw_gzrf2leftr1.fixedflag ? (_temp1365_pw_gzrf2leftr1=pw_gzrf2leftr1,&_temp1365_pw_gzrf2leftr1) : &pw_gzrf2leftr1,
                      _pw_gzrf2leftr1d.fixedflag ? (_temp1366_pw_gzrf2leftr1d=pw_gzrf2leftr1d,&_temp1366_pw_gzrf2leftr1d) : &pw_gzrf2leftr1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2leftr1  = _ia_gzrf2leftr1.fixedflag ?     ((void)((int)((a_gzrf2leftr1/target)*MAX_PG_IAMP)), ia_gzrf2leftr1) : (int)((a_gzrf2leftr1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2rightl1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2rightl1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2rightl1.fixedflag ? (_temp1367_a_gzrf2rightl1=a_gzrf2rightl1,&_temp1367_a_gzrf2rightl1) : &a_gzrf2rightl1, _pw_gzrf2rightl1a.fixedflag ? (_temp1368_pw_gzrf2rightl1a=pw_gzrf2rightl1a,&_temp1368_pw_gzrf2rightl1a) : &pw_gzrf2rightl1a, _pw_gzrf2rightl1.fixedflag ? (_temp1369_pw_gzrf2rightl1=pw_gzrf2rightl1,&_temp1369_pw_gzrf2rightl1) : &pw_gzrf2rightl1,
                      _pw_gzrf2rightl1d.fixedflag ? (_temp1370_pw_gzrf2rightl1d=pw_gzrf2rightl1d,&_temp1370_pw_gzrf2rightl1d) : &pw_gzrf2rightl1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2rightl1  = _ia_gzrf2rightl1.fixedflag ?     ((void)((int)((a_gzrf2rightl1/target)*MAX_PG_IAMP)), ia_gzrf2rightl1) : (int)((a_gzrf2rightl1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2rightr1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2rightr1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2rightr1.fixedflag ? (_temp1371_a_gzrf2rightr1=a_gzrf2rightr1,&_temp1371_a_gzrf2rightr1) : &a_gzrf2rightr1, _pw_gzrf2rightr1a.fixedflag ? (_temp1372_pw_gzrf2rightr1a=pw_gzrf2rightr1a,&_temp1372_pw_gzrf2rightr1a) : &pw_gzrf2rightr1a, _pw_gzrf2rightr1.fixedflag ? (_temp1373_pw_gzrf2rightr1=pw_gzrf2rightr1,&_temp1373_pw_gzrf2rightr1) : &pw_gzrf2rightr1,
                      _pw_gzrf2rightr1d.fixedflag ? (_temp1374_pw_gzrf2rightr1d=pw_gzrf2rightr1d,&_temp1374_pw_gzrf2rightr1d) : &pw_gzrf2rightr1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2rightr1  = _ia_gzrf2rightr1.fixedflag ?     ((void)((int)((a_gzrf2rightr1/target)*MAX_PG_IAMP)), ia_gzrf2rightr1) : (int)((a_gzrf2rightr1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_xgradRightCrusherL, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_xgradRightCrusherL, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_xgradRightCrusherL.fixedflag ? (_temp1375_a_xgradRightCrusherL=a_xgradRightCrusherL,&_temp1375_a_xgradRightCrusherL) : &a_xgradRightCrusherL, _pw_xgradRightCrusherLa.fixedflag ? (_temp1376_pw_xgradRightCrusherLa=pw_xgradRightCrusherLa,&_temp1376_pw_xgradRightCrusherLa) : &pw_xgradRightCrusherLa, _pw_xgradRightCrusherL.fixedflag ? (_temp1377_pw_xgradRightCrusherL=pw_xgradRightCrusherL,&_temp1377_pw_xgradRightCrusherL) : &pw_xgradRightCrusherL,
                      _pw_xgradRightCrusherLd.fixedflag ? (_temp1378_pw_xgradRightCrusherLd=pw_xgradRightCrusherLd,&_temp1378_pw_xgradRightCrusherLd) : &pw_xgradRightCrusherLd) == FAILURE)
            return FAILURE;
    }

    ia_xgradRightCrusherL  = _ia_xgradRightCrusherL.fixedflag ?     ((void)((int)((a_xgradRightCrusherL/target)*MAX_PG_IAMP)), ia_xgradRightCrusherL) : (int)((a_xgradRightCrusherL/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_xgradRightCrusherR, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_xgradRightCrusherR, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_xgradRightCrusherR.fixedflag ? (_temp1379_a_xgradRightCrusherR=a_xgradRightCrusherR,&_temp1379_a_xgradRightCrusherR) : &a_xgradRightCrusherR, _pw_xgradRightCrusherRa.fixedflag ? (_temp1380_pw_xgradRightCrusherRa=pw_xgradRightCrusherRa,&_temp1380_pw_xgradRightCrusherRa) : &pw_xgradRightCrusherRa, _pw_xgradRightCrusherR.fixedflag ? (_temp1381_pw_xgradRightCrusherR=pw_xgradRightCrusherR,&_temp1381_pw_xgradRightCrusherR) : &pw_xgradRightCrusherR,
                      _pw_xgradRightCrusherRd.fixedflag ? (_temp1382_pw_xgradRightCrusherRd=pw_xgradRightCrusherRd,&_temp1382_pw_xgradRightCrusherRd) : &pw_xgradRightCrusherRd) == FAILURE)
            return FAILURE;
    }

    ia_xgradRightCrusherR  = _ia_xgradRightCrusherR.fixedflag ?     ((void)((int)((a_xgradRightCrusherR/target)*MAX_PG_IAMP)), ia_xgradRightCrusherR) : (int)((a_xgradRightCrusherR/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_ygradRightCrusherL, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_ygradRightCrusherL, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_ygradRightCrusherL.fixedflag ? (_temp1383_a_ygradRightCrusherL=a_ygradRightCrusherL,&_temp1383_a_ygradRightCrusherL) : &a_ygradRightCrusherL, _pw_ygradRightCrusherLa.fixedflag ? (_temp1384_pw_ygradRightCrusherLa=pw_ygradRightCrusherLa,&_temp1384_pw_ygradRightCrusherLa) : &pw_ygradRightCrusherLa, _pw_ygradRightCrusherL.fixedflag ? (_temp1385_pw_ygradRightCrusherL=pw_ygradRightCrusherL,&_temp1385_pw_ygradRightCrusherL) : &pw_ygradRightCrusherL,
                      _pw_ygradRightCrusherLd.fixedflag ? (_temp1386_pw_ygradRightCrusherLd=pw_ygradRightCrusherLd,&_temp1386_pw_ygradRightCrusherLd) : &pw_ygradRightCrusherLd) == FAILURE)
            return FAILURE;
    }

    ia_ygradRightCrusherL  = _ia_ygradRightCrusherL.fixedflag ?     ((void)((int)((a_ygradRightCrusherL/target)*MAX_PG_IAMP)), ia_ygradRightCrusherL) : (int)((a_ygradRightCrusherL/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_ygradRightCrusherR, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_ygradRightCrusherR, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_ygradRightCrusherR.fixedflag ? (_temp1387_a_ygradRightCrusherR=a_ygradRightCrusherR,&_temp1387_a_ygradRightCrusherR) : &a_ygradRightCrusherR, _pw_ygradRightCrusherRa.fixedflag ? (_temp1388_pw_ygradRightCrusherRa=pw_ygradRightCrusherRa,&_temp1388_pw_ygradRightCrusherRa) : &pw_ygradRightCrusherRa, _pw_ygradRightCrusherR.fixedflag ? (_temp1389_pw_ygradRightCrusherR=pw_ygradRightCrusherR,&_temp1389_pw_ygradRightCrusherR) : &pw_ygradRightCrusherR,
                      _pw_ygradRightCrusherRd.fixedflag ? (_temp1390_pw_ygradRightCrusherRd=pw_ygradRightCrusherRd,&_temp1390_pw_ygradRightCrusherRd) : &pw_ygradRightCrusherRd) == FAILURE)
            return FAILURE;
    }

    ia_ygradRightCrusherR  = _ia_ygradRightCrusherR.fixedflag ?     ((void)((int)((a_ygradRightCrusherR/target)*MAX_PG_IAMP)), ia_ygradRightCrusherR) : (int)((a_ygradRightCrusherR/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_xgradLeftCrusherL, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_xgradLeftCrusherL, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_xgradLeftCrusherL.fixedflag ? (_temp1391_a_xgradLeftCrusherL=a_xgradLeftCrusherL,&_temp1391_a_xgradLeftCrusherL) : &a_xgradLeftCrusherL, _pw_xgradLeftCrusherLa.fixedflag ? (_temp1392_pw_xgradLeftCrusherLa=pw_xgradLeftCrusherLa,&_temp1392_pw_xgradLeftCrusherLa) : &pw_xgradLeftCrusherLa, _pw_xgradLeftCrusherL.fixedflag ? (_temp1393_pw_xgradLeftCrusherL=pw_xgradLeftCrusherL,&_temp1393_pw_xgradLeftCrusherL) : &pw_xgradLeftCrusherL,
                      _pw_xgradLeftCrusherLd.fixedflag ? (_temp1394_pw_xgradLeftCrusherLd=pw_xgradLeftCrusherLd,&_temp1394_pw_xgradLeftCrusherLd) : &pw_xgradLeftCrusherLd) == FAILURE)
            return FAILURE;
    }

    ia_xgradLeftCrusherL  = _ia_xgradLeftCrusherL.fixedflag ?     ((void)((int)((a_xgradLeftCrusherL/target)*MAX_PG_IAMP)), ia_xgradLeftCrusherL) : (int)((a_xgradLeftCrusherL/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_xgradLeftCrusherR, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_xgradLeftCrusherR, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_xgradLeftCrusherR.fixedflag ? (_temp1395_a_xgradLeftCrusherR=a_xgradLeftCrusherR,&_temp1395_a_xgradLeftCrusherR) : &a_xgradLeftCrusherR, _pw_xgradLeftCrusherRa.fixedflag ? (_temp1396_pw_xgradLeftCrusherRa=pw_xgradLeftCrusherRa,&_temp1396_pw_xgradLeftCrusherRa) : &pw_xgradLeftCrusherRa, _pw_xgradLeftCrusherR.fixedflag ? (_temp1397_pw_xgradLeftCrusherR=pw_xgradLeftCrusherR,&_temp1397_pw_xgradLeftCrusherR) : &pw_xgradLeftCrusherR,
                      _pw_xgradLeftCrusherRd.fixedflag ? (_temp1398_pw_xgradLeftCrusherRd=pw_xgradLeftCrusherRd,&_temp1398_pw_xgradLeftCrusherRd) : &pw_xgradLeftCrusherRd) == FAILURE)
            return FAILURE;
    }

    ia_xgradLeftCrusherR  = _ia_xgradLeftCrusherR.fixedflag ?     ((void)((int)((a_xgradLeftCrusherR/target)*MAX_PG_IAMP)), ia_xgradLeftCrusherR) : (int)((a_xgradLeftCrusherR/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_ygradLeftCrusherL, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_ygradLeftCrusherL, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_ygradLeftCrusherL.fixedflag ? (_temp1399_a_ygradLeftCrusherL=a_ygradLeftCrusherL,&_temp1399_a_ygradLeftCrusherL) : &a_ygradLeftCrusherL, _pw_ygradLeftCrusherLa.fixedflag ? (_temp1400_pw_ygradLeftCrusherLa=pw_ygradLeftCrusherLa,&_temp1400_pw_ygradLeftCrusherLa) : &pw_ygradLeftCrusherLa, _pw_ygradLeftCrusherL.fixedflag ? (_temp1401_pw_ygradLeftCrusherL=pw_ygradLeftCrusherL,&_temp1401_pw_ygradLeftCrusherL) : &pw_ygradLeftCrusherL,
                      _pw_ygradLeftCrusherLd.fixedflag ? (_temp1402_pw_ygradLeftCrusherLd=pw_ygradLeftCrusherLd,&_temp1402_pw_ygradLeftCrusherLd) : &pw_ygradLeftCrusherLd) == FAILURE)
            return FAILURE;
    }

    ia_ygradLeftCrusherL  = _ia_ygradLeftCrusherL.fixedflag ?     ((void)((int)((a_ygradLeftCrusherL/target)*MAX_PG_IAMP)), ia_ygradLeftCrusherL) : (int)((a_ygradLeftCrusherL/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_ygradLeftCrusherR, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_ygradLeftCrusherR, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_ygradLeftCrusherR.fixedflag ? (_temp1403_a_ygradLeftCrusherR=a_ygradLeftCrusherR,&_temp1403_a_ygradLeftCrusherR) : &a_ygradLeftCrusherR, _pw_ygradLeftCrusherRa.fixedflag ? (_temp1404_pw_ygradLeftCrusherRa=pw_ygradLeftCrusherRa,&_temp1404_pw_ygradLeftCrusherRa) : &pw_ygradLeftCrusherRa, _pw_ygradLeftCrusherR.fixedflag ? (_temp1405_pw_ygradLeftCrusherR=pw_ygradLeftCrusherR,&_temp1405_pw_ygradLeftCrusherR) : &pw_ygradLeftCrusherR,
                      _pw_ygradLeftCrusherRd.fixedflag ? (_temp1406_pw_ygradLeftCrusherRd=pw_ygradLeftCrusherRd,&_temp1406_pw_ygradLeftCrusherRd) : &pw_ygradLeftCrusherRd) == FAILURE)
            return FAILURE;
    }

    ia_ygradLeftCrusherR  = _ia_ygradLeftCrusherR.fixedflag ?     ((void)((int)((a_ygradLeftCrusherR/target)*MAX_PG_IAMP)), ia_ygradLeftCrusherR) : (int)((a_ygradLeftCrusherR/target)*MAX_PG_IAMP);
}

    ia_gxcl  = _ia_gxcl.fixedflag ?     ((void)(a_gxcl*max_pg_wamp/epiloggrd.tx), ia_gxcl) : a_gxcl*max_pg_wamp/epiloggrd.tx;
    ia_gxw  = _ia_gxw.fixedflag ?     ((void)(a_gxw*max_pg_wamp/epiloggrd.tx), ia_gxw) : a_gxw*max_pg_wamp/epiloggrd.tx;
    ia_gxcr  = _ia_gxcr.fixedflag ?     ((void)(a_gxcr*max_pg_wamp/epiloggrd.tx), ia_gxcr) : a_gxcr*max_pg_wamp/epiloggrd.tx;
    ia_gyb  = _ia_gyb.fixedflag ?     ((void)(a_gyb*max_pg_iamp/epiloggrd.ty), ia_gyb) : a_gyb*max_pg_iamp/epiloggrd.ty;
    if (1)
    {
        ia_gzb  = _ia_gzb.fixedflag ?     ((void)(a_gzb*max_pg_iamp/epiloggrd.tz), ia_gzb) : a_gzb*max_pg_iamp/epiloggrd.tz;
    }

  ia_rec_unblank  = _ia_rec_unblank.fixedflag ?  ((void)(0), ia_rec_unblank) : 0;

  ia_rec_unblank3  = _ia_rec_unblank3.fixedflag ?  ((void)(0), ia_rec_unblank3) : 0;


  ia_rec_unblank2  = _ia_rec_unblank2.fixedflag ?  ((void)(0), ia_rec_unblank2) : 0;



{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxiref1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxiref1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxiref1.fixedflag ? (_temp1407_a_gxiref1=a_gxiref1,&_temp1407_a_gxiref1) : &a_gxiref1, _pw_gxiref1a.fixedflag ? (_temp1408_pw_gxiref1a=pw_gxiref1a,&_temp1408_pw_gxiref1a) : &pw_gxiref1a, _pw_gxiref1.fixedflag ? (_temp1409_pw_gxiref1=pw_gxiref1,&_temp1409_pw_gxiref1) : &pw_gxiref1,
                      _pw_gxiref1d.fixedflag ? (_temp1410_pw_gxiref1d=pw_gxiref1d,&_temp1410_pw_gxiref1d) : &pw_gxiref1d) == FAILURE)
            return FAILURE;
    }

    ia_gxiref1  = _ia_gxiref1.fixedflag ?     ((void)((int)((a_gxiref1/target)*MAX_PG_IAMP)), ia_gxiref1) : (int)((a_gxiref1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxirefr, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxirefr, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxirefr.fixedflag ? (_temp1411_a_gxirefr=a_gxirefr,&_temp1411_a_gxirefr) : &a_gxirefr, _pw_gxirefra.fixedflag ? (_temp1412_pw_gxirefra=pw_gxirefra,&_temp1412_pw_gxirefra) : &pw_gxirefra, _pw_gxirefr.fixedflag ? (_temp1413_pw_gxirefr=pw_gxirefr,&_temp1413_pw_gxirefr) : &pw_gxirefr,
                      _pw_gxirefrd.fixedflag ? (_temp1414_pw_gxirefrd=pw_gxirefrd,&_temp1414_pw_gxirefrd) : &pw_gxirefrd) == FAILURE)
            return FAILURE;
    }

    ia_gxirefr  = _ia_gxirefr.fixedflag ?     ((void)((int)((a_gxirefr/target)*MAX_PG_IAMP)), ia_gxirefr) : (int)((a_gxirefr/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1,&loggrd);
   ia_gy1  = _ia_gy1.fixedflag ?      
                    ((void)((int)((endview_scale*a_gy1/target)*MAX_PG_IAMP)), ia_gy1) : (int)((endview_scale*a_gy1/target)*MAX_PG_IAMP);
   ia_gy1wa  = _ia_gy1wa.fixedflag ?      
                          ((void)((int)((endview_scale*a_gy1a/target)*MAX_PG_IAMP)), ia_gy1wa) : (int)((endview_scale*a_gy1a/target)*MAX_PG_IAMP);
   ia_gy1wb  = _ia_gy1wb.fixedflag ?      
                      ((void)((int)((endview_scale*a_gy1b/target)*MAX_PG_IAMP)), ia_gy1wb) : (int)((endview_scale*a_gy1b/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gymn2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gymn2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gymn2.fixedflag ? (_temp1415_a_gymn2=a_gymn2,&_temp1415_a_gymn2) : &a_gymn2, _pw_gymn2a.fixedflag ? (_temp1416_pw_gymn2a=pw_gymn2a,&_temp1416_pw_gymn2a) : &pw_gymn2a, _pw_gymn2.fixedflag ? (_temp1417_pw_gymn2=pw_gymn2,&_temp1417_pw_gymn2) : &pw_gymn2,
                      _pw_gymn2d.fixedflag ? (_temp1418_pw_gymn2d=pw_gymn2d,&_temp1418_pw_gymn2d) : &pw_gymn2d) == FAILURE)
            return FAILURE;
    }

    ia_gymn2  = _ia_gymn2.fixedflag ?     ((void)((int)((a_gymn2/target)*MAX_PG_IAMP)), ia_gymn2) : (int)((a_gymn2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gymn1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gymn1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gymn1.fixedflag ? (_temp1419_a_gymn1=a_gymn1,&_temp1419_a_gymn1) : &a_gymn1, _pw_gymn1a.fixedflag ? (_temp1420_pw_gymn1a=pw_gymn1a,&_temp1420_pw_gymn1a) : &pw_gymn1a, _pw_gymn1.fixedflag ? (_temp1421_pw_gymn1=pw_gymn1,&_temp1421_pw_gymn1) : &pw_gymn1,
                      _pw_gymn1d.fixedflag ? (_temp1422_pw_gymn1d=pw_gymn1d,&_temp1422_pw_gymn1d) : &pw_gymn1d) == FAILURE)
            return FAILURE;
    }

    ia_gymn1  = _ia_gymn1.fixedflag ?     ((void)((int)((a_gymn1/target)*MAX_PG_IAMP)), ia_gymn1) : (int)((a_gymn1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1.fixedflag ? (_temp1423_a_gz1=a_gz1,&_temp1423_a_gz1) : &a_gz1, _pw_gz1a.fixedflag ? (_temp1424_pw_gz1a=pw_gz1a,&_temp1424_pw_gz1a) : &pw_gz1a, _pw_gz1.fixedflag ? (_temp1425_pw_gz1=pw_gz1,&_temp1425_pw_gz1) : &pw_gz1,
                      _pw_gz1d.fixedflag ? (_temp1426_pw_gz1d=pw_gz1d,&_temp1426_pw_gz1d) : &pw_gz1d) == FAILURE)
            return FAILURE;
    }

    ia_gz1  = _ia_gz1.fixedflag ?     ((void)((int)((a_gz1/target)*MAX_PG_IAMP)), ia_gz1) : (int)((a_gz1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzmn, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzmn, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzmn.fixedflag ? (_temp1427_a_gzmn=a_gzmn,&_temp1427_a_gzmn) : &a_gzmn, _pw_gzmna.fixedflag ? (_temp1428_pw_gzmna=pw_gzmna,&_temp1428_pw_gzmna) : &pw_gzmna, _pw_gzmn.fixedflag ? (_temp1429_pw_gzmn=pw_gzmn,&_temp1429_pw_gzmn) : &pw_gzmn,
                      _pw_gzmnd.fixedflag ? (_temp1430_pw_gzmnd=pw_gzmnd,&_temp1430_pw_gzmnd) : &pw_gzmnd) == FAILURE)
            return FAILURE;
    }

    ia_gzmn  = _ia_gzmn.fixedflag ?     ((void)((int)((a_gzmn/target)*MAX_PG_IAMP)), ia_gzmn) : (int)((a_gzmn/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxdl1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxdl1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxdl1.fixedflag ? (_temp1431_a_gxdl1=a_gxdl1,&_temp1431_a_gxdl1) : &a_gxdl1, _pw_gxdl1a.fixedflag ? (_temp1432_pw_gxdl1a=pw_gxdl1a,&_temp1432_pw_gxdl1a) : &pw_gxdl1a, _pw_gxdl1.fixedflag ? (_temp1433_pw_gxdl1=pw_gxdl1,&_temp1433_pw_gxdl1) : &pw_gxdl1,
                      _pw_gxdl1d.fixedflag ? (_temp1434_pw_gxdl1d=pw_gxdl1d,&_temp1434_pw_gxdl1d) : &pw_gxdl1d) == FAILURE)
            return FAILURE;
    }

    ia_gxdl1  = _ia_gxdl1.fixedflag ?     ((void)((int)((a_gxdl1/target)*MAX_PG_IAMP)), ia_gxdl1) : (int)((a_gxdl1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxdr1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxdr1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxdr1.fixedflag ? (_temp1435_a_gxdr1=a_gxdr1,&_temp1435_a_gxdr1) : &a_gxdr1, _pw_gxdr1a.fixedflag ? (_temp1436_pw_gxdr1a=pw_gxdr1a,&_temp1436_pw_gxdr1a) : &pw_gxdr1a, _pw_gxdr1.fixedflag ? (_temp1437_pw_gxdr1=pw_gxdr1,&_temp1437_pw_gxdr1) : &pw_gxdr1,
                      _pw_gxdr1d.fixedflag ? (_temp1438_pw_gxdr1d=pw_gxdr1d,&_temp1438_pw_gxdr1d) : &pw_gxdr1d) == FAILURE)
            return FAILURE;
    }

    ia_gxdr1  = _ia_gxdr1.fixedflag ?     ((void)((int)((a_gxdr1/target)*MAX_PG_IAMP)), ia_gxdr1) : (int)((a_gxdr1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxdl2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxdl2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxdl2.fixedflag ? (_temp1439_a_gxdl2=a_gxdl2,&_temp1439_a_gxdl2) : &a_gxdl2, _pw_gxdl2a.fixedflag ? (_temp1440_pw_gxdl2a=pw_gxdl2a,&_temp1440_pw_gxdl2a) : &pw_gxdl2a, _pw_gxdl2.fixedflag ? (_temp1441_pw_gxdl2=pw_gxdl2,&_temp1441_pw_gxdl2) : &pw_gxdl2,
                      _pw_gxdl2d.fixedflag ? (_temp1442_pw_gxdl2d=pw_gxdl2d,&_temp1442_pw_gxdl2d) : &pw_gxdl2d) == FAILURE)
            return FAILURE;
    }

    ia_gxdl2  = _ia_gxdl2.fixedflag ?     ((void)((int)((a_gxdl2/target)*MAX_PG_IAMP)), ia_gxdl2) : (int)((a_gxdl2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxdr2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxdr2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxdr2.fixedflag ? (_temp1443_a_gxdr2=a_gxdr2,&_temp1443_a_gxdr2) : &a_gxdr2, _pw_gxdr2a.fixedflag ? (_temp1444_pw_gxdr2a=pw_gxdr2a,&_temp1444_pw_gxdr2a) : &pw_gxdr2a, _pw_gxdr2.fixedflag ? (_temp1445_pw_gxdr2=pw_gxdr2,&_temp1445_pw_gxdr2) : &pw_gxdr2,
                      _pw_gxdr2d.fixedflag ? (_temp1446_pw_gxdr2d=pw_gxdr2d,&_temp1446_pw_gxdr2d) : &pw_gxdr2d) == FAILURE)
            return FAILURE;
    }

    ia_gxdr2  = _ia_gxdr2.fixedflag ?     ((void)((int)((a_gxdr2/target)*MAX_PG_IAMP)), ia_gxdr2) : (int)((a_gxdr2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxk, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxk, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxk.fixedflag ? (_temp1447_a_gxk=a_gxk,&_temp1447_a_gxk) : &a_gxk, _pw_gxka.fixedflag ? (_temp1448_pw_gxka=pw_gxka,&_temp1448_pw_gxka) : &pw_gxka, _pw_gxk.fixedflag ? (_temp1449_pw_gxk=pw_gxk,&_temp1449_pw_gxk) : &pw_gxk,
                      _pw_gxkd.fixedflag ? (_temp1450_pw_gxkd=pw_gxkd,&_temp1450_pw_gxkd) : &pw_gxkd) == FAILURE)
            return FAILURE;
    }

    ia_gxk  = _ia_gxk.fixedflag ?     ((void)((int)((a_gxk/target)*MAX_PG_IAMP)), ia_gxk) : (int)((a_gxk/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gydl1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gydl1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gydl1.fixedflag ? (_temp1451_a_gydl1=a_gydl1,&_temp1451_a_gydl1) : &a_gydl1, _pw_gydl1a.fixedflag ? (_temp1452_pw_gydl1a=pw_gydl1a,&_temp1452_pw_gydl1a) : &pw_gydl1a, _pw_gydl1.fixedflag ? (_temp1453_pw_gydl1=pw_gydl1,&_temp1453_pw_gydl1) : &pw_gydl1,
                      _pw_gydl1d.fixedflag ? (_temp1454_pw_gydl1d=pw_gydl1d,&_temp1454_pw_gydl1d) : &pw_gydl1d) == FAILURE)
            return FAILURE;
    }

    ia_gydl1  = _ia_gydl1.fixedflag ?     ((void)((int)((a_gydl1/target)*MAX_PG_IAMP)), ia_gydl1) : (int)((a_gydl1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gydr1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gydr1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gydr1.fixedflag ? (_temp1455_a_gydr1=a_gydr1,&_temp1455_a_gydr1) : &a_gydr1, _pw_gydr1a.fixedflag ? (_temp1456_pw_gydr1a=pw_gydr1a,&_temp1456_pw_gydr1a) : &pw_gydr1a, _pw_gydr1.fixedflag ? (_temp1457_pw_gydr1=pw_gydr1,&_temp1457_pw_gydr1) : &pw_gydr1,
                      _pw_gydr1d.fixedflag ? (_temp1458_pw_gydr1d=pw_gydr1d,&_temp1458_pw_gydr1d) : &pw_gydr1d) == FAILURE)
            return FAILURE;
    }

    ia_gydr1  = _ia_gydr1.fixedflag ?     ((void)((int)((a_gydr1/target)*MAX_PG_IAMP)), ia_gydr1) : (int)((a_gydr1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gydl2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gydl2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gydl2.fixedflag ? (_temp1459_a_gydl2=a_gydl2,&_temp1459_a_gydl2) : &a_gydl2, _pw_gydl2a.fixedflag ? (_temp1460_pw_gydl2a=pw_gydl2a,&_temp1460_pw_gydl2a) : &pw_gydl2a, _pw_gydl2.fixedflag ? (_temp1461_pw_gydl2=pw_gydl2,&_temp1461_pw_gydl2) : &pw_gydl2,
                      _pw_gydl2d.fixedflag ? (_temp1462_pw_gydl2d=pw_gydl2d,&_temp1462_pw_gydl2d) : &pw_gydl2d) == FAILURE)
            return FAILURE;
    }

    ia_gydl2  = _ia_gydl2.fixedflag ?     ((void)((int)((a_gydl2/target)*MAX_PG_IAMP)), ia_gydl2) : (int)((a_gydl2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gydr2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gydr2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gydr2.fixedflag ? (_temp1463_a_gydr2=a_gydr2,&_temp1463_a_gydr2) : &a_gydr2, _pw_gydr2a.fixedflag ? (_temp1464_pw_gydr2a=pw_gydr2a,&_temp1464_pw_gydr2a) : &pw_gydr2a, _pw_gydr2.fixedflag ? (_temp1465_pw_gydr2=pw_gydr2,&_temp1465_pw_gydr2) : &pw_gydr2,
                      _pw_gydr2d.fixedflag ? (_temp1466_pw_gydr2d=pw_gydr2d,&_temp1466_pw_gydr2d) : &pw_gydr2d) == FAILURE)
            return FAILURE;
    }

    ia_gydr2  = _ia_gydr2.fixedflag ?     ((void)((int)((a_gydr2/target)*MAX_PG_IAMP)), ia_gydr2) : (int)((a_gydr2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyk, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyk, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyk.fixedflag ? (_temp1467_a_gyk=a_gyk,&_temp1467_a_gyk) : &a_gyk, _pw_gyka.fixedflag ? (_temp1468_pw_gyka=pw_gyka,&_temp1468_pw_gyka) : &pw_gyka, _pw_gyk.fixedflag ? (_temp1469_pw_gyk=pw_gyk,&_temp1469_pw_gyk) : &pw_gyk,
                      _pw_gykd.fixedflag ? (_temp1470_pw_gykd=pw_gykd,&_temp1470_pw_gykd) : &pw_gykd) == FAILURE)
            return FAILURE;
    }

    ia_gyk  = _ia_gyk.fixedflag ?     ((void)((int)((a_gyk/target)*MAX_PG_IAMP)), ia_gyk) : (int)((a_gyk/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzdl1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzdl1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzdl1.fixedflag ? (_temp1471_a_gzdl1=a_gzdl1,&_temp1471_a_gzdl1) : &a_gzdl1, _pw_gzdl1a.fixedflag ? (_temp1472_pw_gzdl1a=pw_gzdl1a,&_temp1472_pw_gzdl1a) : &pw_gzdl1a, _pw_gzdl1.fixedflag ? (_temp1473_pw_gzdl1=pw_gzdl1,&_temp1473_pw_gzdl1) : &pw_gzdl1,
                      _pw_gzdl1d.fixedflag ? (_temp1474_pw_gzdl1d=pw_gzdl1d,&_temp1474_pw_gzdl1d) : &pw_gzdl1d) == FAILURE)
            return FAILURE;
    }

    ia_gzdl1  = _ia_gzdl1.fixedflag ?     ((void)((int)((a_gzdl1/target)*MAX_PG_IAMP)), ia_gzdl1) : (int)((a_gzdl1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzdr1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzdr1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzdr1.fixedflag ? (_temp1475_a_gzdr1=a_gzdr1,&_temp1475_a_gzdr1) : &a_gzdr1, _pw_gzdr1a.fixedflag ? (_temp1476_pw_gzdr1a=pw_gzdr1a,&_temp1476_pw_gzdr1a) : &pw_gzdr1a, _pw_gzdr1.fixedflag ? (_temp1477_pw_gzdr1=pw_gzdr1,&_temp1477_pw_gzdr1) : &pw_gzdr1,
                      _pw_gzdr1d.fixedflag ? (_temp1478_pw_gzdr1d=pw_gzdr1d,&_temp1478_pw_gzdr1d) : &pw_gzdr1d) == FAILURE)
            return FAILURE;
    }

    ia_gzdr1  = _ia_gzdr1.fixedflag ?     ((void)((int)((a_gzdr1/target)*MAX_PG_IAMP)), ia_gzdr1) : (int)((a_gzdr1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzdl2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzdl2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzdl2.fixedflag ? (_temp1479_a_gzdl2=a_gzdl2,&_temp1479_a_gzdl2) : &a_gzdl2, _pw_gzdl2a.fixedflag ? (_temp1480_pw_gzdl2a=pw_gzdl2a,&_temp1480_pw_gzdl2a) : &pw_gzdl2a, _pw_gzdl2.fixedflag ? (_temp1481_pw_gzdl2=pw_gzdl2,&_temp1481_pw_gzdl2) : &pw_gzdl2,
                      _pw_gzdl2d.fixedflag ? (_temp1482_pw_gzdl2d=pw_gzdl2d,&_temp1482_pw_gzdl2d) : &pw_gzdl2d) == FAILURE)
            return FAILURE;
    }

    ia_gzdl2  = _ia_gzdl2.fixedflag ?     ((void)((int)((a_gzdl2/target)*MAX_PG_IAMP)), ia_gzdl2) : (int)((a_gzdl2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzdr2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzdr2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzdr2.fixedflag ? (_temp1483_a_gzdr2=a_gzdr2,&_temp1483_a_gzdr2) : &a_gzdr2, _pw_gzdr2a.fixedflag ? (_temp1484_pw_gzdr2a=pw_gzdr2a,&_temp1484_pw_gzdr2a) : &pw_gzdr2a, _pw_gzdr2.fixedflag ? (_temp1485_pw_gzdr2=pw_gzdr2,&_temp1485_pw_gzdr2) : &pw_gzdr2,
                      _pw_gzdr2d.fixedflag ? (_temp1486_pw_gzdr2d=pw_gzdr2d,&_temp1486_pw_gzdr2d) : &pw_gzdr2d) == FAILURE)
            return FAILURE;
    }

    ia_gzdr2  = _ia_gzdr2.fixedflag ?     ((void)((int)((a_gzdr2/target)*MAX_PG_IAMP)), ia_gzdr2) : (int)((a_gzdr2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzk, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzk, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzk.fixedflag ? (_temp1487_a_gzk=a_gzk,&_temp1487_a_gzk) : &a_gzk, _pw_gzka.fixedflag ? (_temp1488_pw_gzka=pw_gzka,&_temp1488_pw_gzka) : &pw_gzka, _pw_gzk.fixedflag ? (_temp1489_pw_gzk=pw_gzk,&_temp1489_pw_gzk) : &pw_gzk,
                      _pw_gzkd.fixedflag ? (_temp1490_pw_gzkd=pw_gzkd,&_temp1490_pw_gzkd) : &pw_gzkd) == FAILURE)
            return FAILURE;
    }

    ia_gzk  = _ia_gzk.fixedflag ?     ((void)((int)((a_gzk/target)*MAX_PG_IAMP)), ia_gzk) : (int)((a_gzk/target)*MAX_PG_IAMP);
}












  if (ampslice(_a_gzrf0.fixedflag ? (_temp1491_a_gzrf0=a_gzrf0,&_temp1491_a_gzrf0) : &a_gzrf0,(LONG)(4000000*cyc_rf0/
					 pw_rf0),
	       (float)thk_rf0,(float)gscale_rf0,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf0a.fixedflag ? (_temp1492_pw_gzrf0a=pw_gzrf0a,&_temp1492_pw_gzrf0a) : &pw_gzrf0a,a_gzrf0,loggrd.tz,
	      loggrd.zrt,(int)TYPNDEF) 
      == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf0d.fixedflag ? (_temp1493_pw_gzrf0d=pw_gzrf0d,&_temp1493_pw_gzrf0d) : &pw_gzrf0d,a_gzrf0,loggrd.tz,
	      loggrd.zft,(int)TYPNDEF) 
      == FAILURE) return FAILURE;
 
  ia_gzrf0  = _ia_gzrf0.fixedflag ?    ((void)((int)(a_gzrf0*MAX_PG_IAMP/loggrd.tz)), ia_gzrf0) : (int)(a_gzrf0*MAX_PG_IAMP/loggrd.tz);
  ia_rf0  = _ia_rf0.fixedflag ?    ((void)((int)(a_rf0*MAX_PG_IAMP)), ia_rf0) : (int)(a_rf0*MAX_PG_IAMP);


    {
        ia_omegarf0    = _ia_omegarf0.fixedflag ?    ((void)((int)(a_omegarf0*MAX_PG_IAMP)), ia_omegarf0) : (int)(a_omegarf0*MAX_PG_IAMP);
    }

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyk0, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyk0, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyk0.fixedflag ? (_temp1494_a_gyk0=a_gyk0,&_temp1494_a_gyk0) : &a_gyk0, _pw_gyk0a.fixedflag ? (_temp1495_pw_gyk0a=pw_gyk0a,&_temp1495_pw_gyk0a) : &pw_gyk0a, _pw_gyk0.fixedflag ? (_temp1496_pw_gyk0=pw_gyk0,&_temp1496_pw_gyk0) : &pw_gyk0,
                      _pw_gyk0d.fixedflag ? (_temp1497_pw_gyk0d=pw_gyk0d,&_temp1497_pw_gyk0d) : &pw_gyk0d) == FAILURE)
            return FAILURE;
    }

    ia_gyk0  = _ia_gyk0.fixedflag ?     ((void)((int)((a_gyk0/target)*MAX_PG_IAMP)), ia_gyk0) : (int)((a_gyk0/target)*MAX_PG_IAMP);
}


  ia_bline_unblank  = _ia_bline_unblank.fixedflag ?  ((void)(0), ia_bline_unblank) : 0;









{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_dbgxrfcssat, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_dbgxrfcssat, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_dbgxrfcssat.fixedflag ? (_temp1498_a_dbgxrfcssat=a_dbgxrfcssat,&_temp1498_a_dbgxrfcssat) : &a_dbgxrfcssat, _pw_dbgxrfcssata.fixedflag ? (_temp1499_pw_dbgxrfcssata=pw_dbgxrfcssata,&_temp1499_pw_dbgxrfcssata) : &pw_dbgxrfcssata, _pw_dbgxrfcssat.fixedflag ? (_temp1500_pw_dbgxrfcssat=pw_dbgxrfcssat,&_temp1500_pw_dbgxrfcssat) : &pw_dbgxrfcssat,
                      _pw_dbgxrfcssatd.fixedflag ? (_temp1501_pw_dbgxrfcssatd=pw_dbgxrfcssatd,&_temp1501_pw_dbgxrfcssatd) : &pw_dbgxrfcssatd) == FAILURE)
            return FAILURE;
    }

    ia_dbgxrfcssat  = _ia_dbgxrfcssat.fixedflag ?     ((void)((int)((a_dbgxrfcssat/target)*MAX_PG_IAMP)), ia_dbgxrfcssat) : (int)((a_dbgxrfcssat/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_dbgyrfcssat, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_dbgyrfcssat, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_dbgyrfcssat.fixedflag ? (_temp1502_a_dbgyrfcssat=a_dbgyrfcssat,&_temp1502_a_dbgyrfcssat) : &a_dbgyrfcssat, _pw_dbgyrfcssata.fixedflag ? (_temp1503_pw_dbgyrfcssata=pw_dbgyrfcssata,&_temp1503_pw_dbgyrfcssata) : &pw_dbgyrfcssata, _pw_dbgyrfcssat.fixedflag ? (_temp1504_pw_dbgyrfcssat=pw_dbgyrfcssat,&_temp1504_pw_dbgyrfcssat) : &pw_dbgyrfcssat,
                      _pw_dbgyrfcssatd.fixedflag ? (_temp1505_pw_dbgyrfcssatd=pw_dbgyrfcssatd,&_temp1505_pw_dbgyrfcssatd) : &pw_dbgyrfcssatd) == FAILURE)
            return FAILURE;
    }

    ia_dbgyrfcssat  = _ia_dbgyrfcssat.fixedflag ?     ((void)((int)((a_dbgyrfcssat/target)*MAX_PG_IAMP)), ia_dbgyrfcssat) : (int)((a_dbgyrfcssat/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_dbgzrfcssat, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_dbgzrfcssat, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_dbgzrfcssat.fixedflag ? (_temp1506_a_dbgzrfcssat=a_dbgzrfcssat,&_temp1506_a_dbgzrfcssat) : &a_dbgzrfcssat, _pw_dbgzrfcssata.fixedflag ? (_temp1507_pw_dbgzrfcssata=pw_dbgzrfcssata,&_temp1507_pw_dbgzrfcssata) : &pw_dbgzrfcssata, _pw_dbgzrfcssat.fixedflag ? (_temp1508_pw_dbgzrfcssat=pw_dbgzrfcssat,&_temp1508_pw_dbgzrfcssat) : &pw_dbgzrfcssat,
                      _pw_dbgzrfcssatd.fixedflag ? (_temp1509_pw_dbgzrfcssatd=pw_dbgzrfcssatd,&_temp1509_pw_dbgzrfcssatd) : &pw_dbgzrfcssatd) == FAILURE)
            return FAILURE;
    }

    ia_dbgzrfcssat  = _ia_dbgzrfcssat.fixedflag ?     ((void)((int)((a_dbgzrfcssat/target)*MAX_PG_IAMP)), ia_dbgzrfcssat) : (int)((a_dbgzrfcssat/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrfcs, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrfcs, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrfcs.fixedflag ? (_temp1510_a_gzrfcs=a_gzrfcs,&_temp1510_a_gzrfcs) : &a_gzrfcs, _pw_gzrfcsa.fixedflag ? (_temp1511_pw_gzrfcsa=pw_gzrfcsa,&_temp1511_pw_gzrfcsa) : &pw_gzrfcsa, _pw_gzrfcs.fixedflag ? (_temp1512_pw_gzrfcs=pw_gzrfcs,&_temp1512_pw_gzrfcs) : &pw_gzrfcs,
                      _pw_gzrfcsd.fixedflag ? (_temp1513_pw_gzrfcsd=pw_gzrfcsd,&_temp1513_pw_gzrfcsd) : &pw_gzrfcsd) == FAILURE)
            return FAILURE;
    }

    ia_gzrfcs  = _ia_gzrfcs.fixedflag ?     ((void)((int)((a_gzrfcs/target)*MAX_PG_IAMP)), ia_gzrfcs) : (int)((a_gzrfcs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykcs, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykcs, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykcs.fixedflag ? (_temp1514_a_gykcs=a_gykcs,&_temp1514_a_gykcs) : &a_gykcs, _pw_gykcsa.fixedflag ? (_temp1515_pw_gykcsa=pw_gykcsa,&_temp1515_pw_gykcsa) : &pw_gykcsa, _pw_gykcs.fixedflag ? (_temp1516_pw_gykcs=pw_gykcs,&_temp1516_pw_gykcs) : &pw_gykcs,
                      _pw_gykcsd.fixedflag ? (_temp1517_pw_gykcsd=pw_gykcsd,&_temp1517_pw_gykcsd) : &pw_gykcsd) == FAILURE)
            return FAILURE;
    }

    ia_gykcs  = _ia_gykcs.fixedflag ?     ((void)((int)((a_gykcs/target)*MAX_PG_IAMP)), ia_gykcs) : (int)((a_gykcs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkcs, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkcs, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkcs.fixedflag ? (_temp1518_a_gxkcs=a_gxkcs,&_temp1518_a_gxkcs) : &a_gxkcs, _pw_gxkcsa.fixedflag ? (_temp1519_pw_gxkcsa=pw_gxkcsa,&_temp1519_pw_gxkcsa) : &pw_gxkcsa, _pw_gxkcs.fixedflag ? (_temp1520_pw_gxkcs=pw_gxkcs,&_temp1520_pw_gxkcs) : &pw_gxkcs,
                      _pw_gxkcsd.fixedflag ? (_temp1521_pw_gxkcsd=pw_gxkcsd,&_temp1521_pw_gxkcsd) : &pw_gxkcsd) == FAILURE)
            return FAILURE;
    }

    ia_gxkcs  = _ia_gxkcs.fixedflag ?     ((void)((int)((a_gxkcs/target)*MAX_PG_IAMP)), ia_gxkcs) : (int)((a_gxkcs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkcs, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkcs, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkcs.fixedflag ? (_temp1522_a_gzkcs=a_gzkcs,&_temp1522_a_gzkcs) : &a_gzkcs, _pw_gzkcsa.fixedflag ? (_temp1523_pw_gzkcsa=pw_gzkcsa,&_temp1523_pw_gzkcsa) : &pw_gzkcsa, _pw_gzkcs.fixedflag ? (_temp1524_pw_gzkcs=pw_gzkcs,&_temp1524_pw_gzkcs) : &pw_gzkcs,
                      _pw_gzkcsd.fixedflag ? (_temp1525_pw_gzkcsd=pw_gzkcsd,&_temp1525_pw_gzkcsd) : &pw_gzkcsd) == FAILURE)
            return FAILURE;
    }

    ia_gzkcs  = _ia_gzkcs.fixedflag ?     ((void)((int)((a_gzkcs/target)*MAX_PG_IAMP)), ia_gzkcs) : (int)((a_gzkcs/target)*MAX_PG_IAMP);
}




  if (ampslice(_a_gzrfse1.fixedflag ? (_temp1526_a_gzrfse1=a_gzrfse1,&_temp1526_a_gzrfse1) : &a_gzrfse1,(LONG)(4000000*cyc_rfse1/
                                         pw_rfse1),
               (float)thk_rfse1,(float)gscale_rfse1,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse1a.fixedflag ? (_temp1527_pw_gzrfse1a=pw_gzrfse1a,&_temp1527_pw_gzrfse1a) : &pw_gzrfse1a,a_gzrfse1,satloggrd.tz,
      satloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse1d.fixedflag ? (_temp1528_pw_gzrfse1d=pw_gzrfse1d,&_temp1528_pw_gzrfse1d) : &pw_gzrfse1d,a_gzrfse1,satloggrd.tz,
          satloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfse1  = _ia_gzrfse1.fixedflag ?    ((void)((int)(a_gzrfse1*MAX_PG_IAMP/satloggrd.tz)), ia_gzrfse1) : (int)(a_gzrfse1*MAX_PG_IAMP/satloggrd.tz);

  ia_rfse1  = _ia_rfse1.fixedflag ?    ((void)((int)(a_rfse1*MAX_PG_IAMP)), ia_rfse1) : (int)(a_rfse1*MAX_PG_IAMP);
  if (res_rfse1 == 0)
    res_rfse1  = _res_rfse1.fixedflag ?  ((void)(pw_rfse1/(RF_UPDATE_TIME)), res_rfse1) : pw_rfse1/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykse1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykse1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykse1.fixedflag ? (_temp1529_a_gykse1=a_gykse1,&_temp1529_a_gykse1) : &a_gykse1, _pw_gykse1a.fixedflag ? (_temp1530_pw_gykse1a=pw_gykse1a,&_temp1530_pw_gykse1a) : &pw_gykse1a, _pw_gykse1.fixedflag ? (_temp1531_pw_gykse1=pw_gykse1,&_temp1531_pw_gykse1) : &pw_gykse1,
                      _pw_gykse1d.fixedflag ? (_temp1532_pw_gykse1d=pw_gykse1d,&_temp1532_pw_gykse1d) : &pw_gykse1d) == FAILURE)
            return FAILURE;
    }

    ia_gykse1  = _ia_gykse1.fixedflag ?     ((void)((int)((a_gykse1/target)*MAX_PG_IAMP)), ia_gykse1) : (int)((a_gykse1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkse1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkse1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkse1.fixedflag ? (_temp1533_a_gxkse1=a_gxkse1,&_temp1533_a_gxkse1) : &a_gxkse1, _pw_gxkse1a.fixedflag ? (_temp1534_pw_gxkse1a=pw_gxkse1a,&_temp1534_pw_gxkse1a) : &pw_gxkse1a, _pw_gxkse1.fixedflag ? (_temp1535_pw_gxkse1=pw_gxkse1,&_temp1535_pw_gxkse1) : &pw_gxkse1,
                      _pw_gxkse1d.fixedflag ? (_temp1536_pw_gxkse1d=pw_gxkse1d,&_temp1536_pw_gxkse1d) : &pw_gxkse1d) == FAILURE)
            return FAILURE;
    }

    ia_gxkse1  = _ia_gxkse1.fixedflag ?     ((void)((int)((a_gxkse1/target)*MAX_PG_IAMP)), ia_gxkse1) : (int)((a_gxkse1/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfse2.fixedflag ? (_temp1537_a_gzrfse2=a_gzrfse2,&_temp1537_a_gzrfse2) : &a_gzrfse2,(LONG)(4000000*cyc_rfse2/
                                         pw_rfse2),
               (float)thk_rfse2,(float)gscale_rfse2,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse2a.fixedflag ? (_temp1538_pw_gzrfse2a=pw_gzrfse2a,&_temp1538_pw_gzrfse2a) : &pw_gzrfse2a,a_gzrfse2,satloggrd.tz,
      satloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse2d.fixedflag ? (_temp1539_pw_gzrfse2d=pw_gzrfse2d,&_temp1539_pw_gzrfse2d) : &pw_gzrfse2d,a_gzrfse2,satloggrd.tz,
          satloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfse2  = _ia_gzrfse2.fixedflag ?    ((void)((int)(a_gzrfse2*MAX_PG_IAMP/satloggrd.tz)), ia_gzrfse2) : (int)(a_gzrfse2*MAX_PG_IAMP/satloggrd.tz);

  ia_rfse2  = _ia_rfse2.fixedflag ?    ((void)((int)(a_rfse2*MAX_PG_IAMP)), ia_rfse2) : (int)(a_rfse2*MAX_PG_IAMP);
  if (res_rfse2 == 0)
    res_rfse2  = _res_rfse2.fixedflag ?  ((void)(pw_rfse2/(RF_UPDATE_TIME)), res_rfse2) : pw_rfse2/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykse2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykse2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykse2.fixedflag ? (_temp1540_a_gykse2=a_gykse2,&_temp1540_a_gykse2) : &a_gykse2, _pw_gykse2a.fixedflag ? (_temp1541_pw_gykse2a=pw_gykse2a,&_temp1541_pw_gykse2a) : &pw_gykse2a, _pw_gykse2.fixedflag ? (_temp1542_pw_gykse2=pw_gykse2,&_temp1542_pw_gykse2) : &pw_gykse2,
                      _pw_gykse2d.fixedflag ? (_temp1543_pw_gykse2d=pw_gykse2d,&_temp1543_pw_gykse2d) : &pw_gykse2d) == FAILURE)
            return FAILURE;
    }

    ia_gykse2  = _ia_gykse2.fixedflag ?     ((void)((int)((a_gykse2/target)*MAX_PG_IAMP)), ia_gykse2) : (int)((a_gykse2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkse2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkse2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkse2.fixedflag ? (_temp1544_a_gxkse2=a_gxkse2,&_temp1544_a_gxkse2) : &a_gxkse2, _pw_gxkse2a.fixedflag ? (_temp1545_pw_gxkse2a=pw_gxkse2a,&_temp1545_pw_gxkse2a) : &pw_gxkse2a, _pw_gxkse2.fixedflag ? (_temp1546_pw_gxkse2=pw_gxkse2,&_temp1546_pw_gxkse2) : &pw_gxkse2,
                      _pw_gxkse2d.fixedflag ? (_temp1547_pw_gxkse2d=pw_gxkse2d,&_temp1547_pw_gxkse2d) : &pw_gxkse2d) == FAILURE)
            return FAILURE;
    }

    ia_gxkse2  = _ia_gxkse2.fixedflag ?     ((void)((int)((a_gxkse2/target)*MAX_PG_IAMP)), ia_gxkse2) : (int)((a_gxkse2/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfse3.fixedflag ? (_temp1548_a_gzrfse3=a_gzrfse3,&_temp1548_a_gzrfse3) : &a_gzrfse3,(LONG)(4000000*cyc_rfse3/
                                         pw_rfse3),
               (float)thk_rfse3,(float)gscale_rfse3,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse3a.fixedflag ? (_temp1549_pw_gzrfse3a=pw_gzrfse3a,&_temp1549_pw_gzrfse3a) : &pw_gzrfse3a,a_gzrfse3,satloggrd.tz,
      satloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse3d.fixedflag ? (_temp1550_pw_gzrfse3d=pw_gzrfse3d,&_temp1550_pw_gzrfse3d) : &pw_gzrfse3d,a_gzrfse3,satloggrd.tz,
          satloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfse3  = _ia_gzrfse3.fixedflag ?    ((void)((int)(a_gzrfse3*MAX_PG_IAMP/satloggrd.tz)), ia_gzrfse3) : (int)(a_gzrfse3*MAX_PG_IAMP/satloggrd.tz);

  ia_rfse3  = _ia_rfse3.fixedflag ?    ((void)((int)(a_rfse3*MAX_PG_IAMP)), ia_rfse3) : (int)(a_rfse3*MAX_PG_IAMP);
  if (res_rfse3 == 0)
    res_rfse3  = _res_rfse3.fixedflag ?  ((void)(pw_rfse3/(RF_UPDATE_TIME)), res_rfse3) : pw_rfse3/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykse3, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykse3, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykse3.fixedflag ? (_temp1551_a_gykse3=a_gykse3,&_temp1551_a_gykse3) : &a_gykse3, _pw_gykse3a.fixedflag ? (_temp1552_pw_gykse3a=pw_gykse3a,&_temp1552_pw_gykse3a) : &pw_gykse3a, _pw_gykse3.fixedflag ? (_temp1553_pw_gykse3=pw_gykse3,&_temp1553_pw_gykse3) : &pw_gykse3,
                      _pw_gykse3d.fixedflag ? (_temp1554_pw_gykse3d=pw_gykse3d,&_temp1554_pw_gykse3d) : &pw_gykse3d) == FAILURE)
            return FAILURE;
    }

    ia_gykse3  = _ia_gykse3.fixedflag ?     ((void)((int)((a_gykse3/target)*MAX_PG_IAMP)), ia_gykse3) : (int)((a_gykse3/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkse3, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkse3, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkse3.fixedflag ? (_temp1555_a_gxkse3=a_gxkse3,&_temp1555_a_gxkse3) : &a_gxkse3, _pw_gxkse3a.fixedflag ? (_temp1556_pw_gxkse3a=pw_gxkse3a,&_temp1556_pw_gxkse3a) : &pw_gxkse3a, _pw_gxkse3.fixedflag ? (_temp1557_pw_gxkse3=pw_gxkse3,&_temp1557_pw_gxkse3) : &pw_gxkse3,
                      _pw_gxkse3d.fixedflag ? (_temp1558_pw_gxkse3d=pw_gxkse3d,&_temp1558_pw_gxkse3d) : &pw_gxkse3d) == FAILURE)
            return FAILURE;
    }

    ia_gxkse3  = _ia_gxkse3.fixedflag ?     ((void)((int)((a_gxkse3/target)*MAX_PG_IAMP)), ia_gxkse3) : (int)((a_gxkse3/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfse4.fixedflag ? (_temp1559_a_gzrfse4=a_gzrfse4,&_temp1559_a_gzrfse4) : &a_gzrfse4,(LONG)(4000000*cyc_rfse4/
                                         pw_rfse4),
               (float)thk_rfse4,(float)gscale_rfse4,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse4a.fixedflag ? (_temp1560_pw_gzrfse4a=pw_gzrfse4a,&_temp1560_pw_gzrfse4a) : &pw_gzrfse4a,a_gzrfse4,satloggrd.tz,
      satloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse4d.fixedflag ? (_temp1561_pw_gzrfse4d=pw_gzrfse4d,&_temp1561_pw_gzrfse4d) : &pw_gzrfse4d,a_gzrfse4,satloggrd.tz,
          satloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfse4  = _ia_gzrfse4.fixedflag ?    ((void)((int)(a_gzrfse4*MAX_PG_IAMP/satloggrd.tz)), ia_gzrfse4) : (int)(a_gzrfse4*MAX_PG_IAMP/satloggrd.tz);

  ia_rfse4  = _ia_rfse4.fixedflag ?    ((void)((int)(a_rfse4*MAX_PG_IAMP)), ia_rfse4) : (int)(a_rfse4*MAX_PG_IAMP);
  if (res_rfse4 == 0)
    res_rfse4  = _res_rfse4.fixedflag ?  ((void)(pw_rfse4/(RF_UPDATE_TIME)), res_rfse4) : pw_rfse4/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykse4, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykse4, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykse4.fixedflag ? (_temp1562_a_gykse4=a_gykse4,&_temp1562_a_gykse4) : &a_gykse4, _pw_gykse4a.fixedflag ? (_temp1563_pw_gykse4a=pw_gykse4a,&_temp1563_pw_gykse4a) : &pw_gykse4a, _pw_gykse4.fixedflag ? (_temp1564_pw_gykse4=pw_gykse4,&_temp1564_pw_gykse4) : &pw_gykse4,
                      _pw_gykse4d.fixedflag ? (_temp1565_pw_gykse4d=pw_gykse4d,&_temp1565_pw_gykse4d) : &pw_gykse4d) == FAILURE)
            return FAILURE;
    }

    ia_gykse4  = _ia_gykse4.fixedflag ?     ((void)((int)((a_gykse4/target)*MAX_PG_IAMP)), ia_gykse4) : (int)((a_gykse4/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkse4, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkse4, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkse4.fixedflag ? (_temp1566_a_gxkse4=a_gxkse4,&_temp1566_a_gxkse4) : &a_gxkse4, _pw_gxkse4a.fixedflag ? (_temp1567_pw_gxkse4a=pw_gxkse4a,&_temp1567_pw_gxkse4a) : &pw_gxkse4a, _pw_gxkse4.fixedflag ? (_temp1568_pw_gxkse4=pw_gxkse4,&_temp1568_pw_gxkse4) : &pw_gxkse4,
                      _pw_gxkse4d.fixedflag ? (_temp1569_pw_gxkse4d=pw_gxkse4d,&_temp1569_pw_gxkse4d) : &pw_gxkse4d) == FAILURE)
            return FAILURE;
    }

    ia_gxkse4  = _ia_gxkse4.fixedflag ?     ((void)((int)((a_gxkse4/target)*MAX_PG_IAMP)), ia_gxkse4) : (int)((a_gxkse4/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfse5.fixedflag ? (_temp1570_a_gzrfse5=a_gzrfse5,&_temp1570_a_gzrfse5) : &a_gzrfse5,(LONG)(4000000*cyc_rfse5/
                                         pw_rfse5),
               (float)thk_rfse5,(float)gscale_rfse5,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse5a.fixedflag ? (_temp1571_pw_gzrfse5a=pw_gzrfse5a,&_temp1571_pw_gzrfse5a) : &pw_gzrfse5a,a_gzrfse5,satloggrd.tz,
      satloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse5d.fixedflag ? (_temp1572_pw_gzrfse5d=pw_gzrfse5d,&_temp1572_pw_gzrfse5d) : &pw_gzrfse5d,a_gzrfse5,satloggrd.tz,
          satloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfse5  = _ia_gzrfse5.fixedflag ?    ((void)((int)(a_gzrfse5*MAX_PG_IAMP/satloggrd.tz)), ia_gzrfse5) : (int)(a_gzrfse5*MAX_PG_IAMP/satloggrd.tz);

  ia_rfse5  = _ia_rfse5.fixedflag ?    ((void)((int)(a_rfse5*MAX_PG_IAMP)), ia_rfse5) : (int)(a_rfse5*MAX_PG_IAMP);
  if (res_rfse5 == 0)
    res_rfse5  = _res_rfse5.fixedflag ?  ((void)(pw_rfse5/(RF_UPDATE_TIME)), res_rfse5) : pw_rfse5/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykse5, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykse5, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykse5.fixedflag ? (_temp1573_a_gykse5=a_gykse5,&_temp1573_a_gykse5) : &a_gykse5, _pw_gykse5a.fixedflag ? (_temp1574_pw_gykse5a=pw_gykse5a,&_temp1574_pw_gykse5a) : &pw_gykse5a, _pw_gykse5.fixedflag ? (_temp1575_pw_gykse5=pw_gykse5,&_temp1575_pw_gykse5) : &pw_gykse5,
                      _pw_gykse5d.fixedflag ? (_temp1576_pw_gykse5d=pw_gykse5d,&_temp1576_pw_gykse5d) : &pw_gykse5d) == FAILURE)
            return FAILURE;
    }

    ia_gykse5  = _ia_gykse5.fixedflag ?     ((void)((int)((a_gykse5/target)*MAX_PG_IAMP)), ia_gykse5) : (int)((a_gykse5/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkse5, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkse5, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkse5.fixedflag ? (_temp1577_a_gxkse5=a_gxkse5,&_temp1577_a_gxkse5) : &a_gxkse5, _pw_gxkse5a.fixedflag ? (_temp1578_pw_gxkse5a=pw_gxkse5a,&_temp1578_pw_gxkse5a) : &pw_gxkse5a, _pw_gxkse5.fixedflag ? (_temp1579_pw_gxkse5=pw_gxkse5,&_temp1579_pw_gxkse5) : &pw_gxkse5,
                      _pw_gxkse5d.fixedflag ? (_temp1580_pw_gxkse5d=pw_gxkse5d,&_temp1580_pw_gxkse5d) : &pw_gxkse5d) == FAILURE)
            return FAILURE;
    }

    ia_gxkse5  = _ia_gxkse5.fixedflag ?     ((void)((int)((a_gxkse5/target)*MAX_PG_IAMP)), ia_gxkse5) : (int)((a_gxkse5/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfse6.fixedflag ? (_temp1581_a_gzrfse6=a_gzrfse6,&_temp1581_a_gzrfse6) : &a_gzrfse6,(LONG)(4000000*cyc_rfse6/
                                         pw_rfse6),
               (float)thk_rfse6,(float)gscale_rfse6,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse6a.fixedflag ? (_temp1582_pw_gzrfse6a=pw_gzrfse6a,&_temp1582_pw_gzrfse6a) : &pw_gzrfse6a,a_gzrfse6,satloggrd.tz,
      satloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfse6d.fixedflag ? (_temp1583_pw_gzrfse6d=pw_gzrfse6d,&_temp1583_pw_gzrfse6d) : &pw_gzrfse6d,a_gzrfse6,satloggrd.tz,
          satloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfse6  = _ia_gzrfse6.fixedflag ?    ((void)((int)(a_gzrfse6*MAX_PG_IAMP/satloggrd.tz)), ia_gzrfse6) : (int)(a_gzrfse6*MAX_PG_IAMP/satloggrd.tz);

  ia_rfse6  = _ia_rfse6.fixedflag ?    ((void)((int)(a_rfse6*MAX_PG_IAMP)), ia_rfse6) : (int)(a_rfse6*MAX_PG_IAMP);
  if (res_rfse6 == 0)
    res_rfse6  = _res_rfse6.fixedflag ?  ((void)(pw_rfse6/(RF_UPDATE_TIME)), res_rfse6) : pw_rfse6/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykse6, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykse6, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykse6.fixedflag ? (_temp1584_a_gykse6=a_gykse6,&_temp1584_a_gykse6) : &a_gykse6, _pw_gykse6a.fixedflag ? (_temp1585_pw_gykse6a=pw_gykse6a,&_temp1585_pw_gykse6a) : &pw_gykse6a, _pw_gykse6.fixedflag ? (_temp1586_pw_gykse6=pw_gykse6,&_temp1586_pw_gykse6) : &pw_gykse6,
                      _pw_gykse6d.fixedflag ? (_temp1587_pw_gykse6d=pw_gykse6d,&_temp1587_pw_gykse6d) : &pw_gykse6d) == FAILURE)
            return FAILURE;
    }

    ia_gykse6  = _ia_gykse6.fixedflag ?     ((void)((int)((a_gykse6/target)*MAX_PG_IAMP)), ia_gykse6) : (int)((a_gykse6/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkse6, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkse6, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkse6.fixedflag ? (_temp1588_a_gxkse6=a_gxkse6,&_temp1588_a_gxkse6) : &a_gxkse6, _pw_gxkse6a.fixedflag ? (_temp1589_pw_gxkse6a=pw_gxkse6a,&_temp1589_pw_gxkse6a) : &pw_gxkse6a, _pw_gxkse6.fixedflag ? (_temp1590_pw_gxkse6=pw_gxkse6,&_temp1590_pw_gxkse6) : &pw_gxkse6,
                      _pw_gxkse6d.fixedflag ? (_temp1591_pw_gxkse6d=pw_gxkse6d,&_temp1591_pw_gxkse6d) : &pw_gxkse6d) == FAILURE)
            return FAILURE;
    }

    ia_gxkse6  = _ia_gxkse6.fixedflag ?     ((void)((int)((a_gxkse6/target)*MAX_PG_IAMP)), ia_gxkse6) : (int)((a_gxkse6/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gxrfsx1.fixedflag ? (_temp1592_a_gxrfsx1=a_gxrfsx1,&_temp1592_a_gxrfsx1) : &a_gxrfsx1,(LONG)(4000000*cyc_rfsx1/
                                         pw_rfsx1),
               (float)thk_rfsx1,(float)gscale_rfsx1,
               (int)TYPNDEF)== FAILURE) return FAILURE;
  if (optramp(_pw_gxrfsx1a.fixedflag ? (_temp1593_pw_gxrfsx1a=pw_gxrfsx1a,&_temp1593_pw_gxrfsx1a) : &pw_gxrfsx1a,a_gxrfsx1,loggrd.tx,
              loggrd.xrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gxrfsx1d.fixedflag ? (_temp1594_pw_gxrfsx1d=pw_gxrfsx1d,&_temp1594_pw_gxrfsx1d) : &pw_gxrfsx1d,a_gxrfsx1,loggrd.tx,
                  loggrd.xft,TYPNDEF)
      == FAILURE) return FAILURE;

  ia_gxrfsx1  = _ia_gxrfsx1.fixedflag ?    ((void)((int)(a_gxrfsx1*MAX_PG_IAMP/loggrd.tx)), ia_gxrfsx1) : (int)(a_gxrfsx1*MAX_PG_IAMP/loggrd.tx);

  ia_rfsx1  = _ia_rfsx1.fixedflag ?    ((void)((int)(a_rfsx1*MAX_PG_IAMP)), ia_rfsx1) : (int)(a_rfsx1*MAX_PG_IAMP);
  if (res_rfsx1 == 0)
    res_rfsx1  = _res_rfsx1.fixedflag ?  ((void)(pw_rfsx1/(RF_UPDATE_TIME)), res_rfsx1) : pw_rfsx1/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyksx1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyksx1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyksx1.fixedflag ? (_temp1595_a_gyksx1=a_gyksx1,&_temp1595_a_gyksx1) : &a_gyksx1, _pw_gyksx1a.fixedflag ? (_temp1596_pw_gyksx1a=pw_gyksx1a,&_temp1596_pw_gyksx1a) : &pw_gyksx1a, _pw_gyksx1.fixedflag ? (_temp1597_pw_gyksx1=pw_gyksx1,&_temp1597_pw_gyksx1) : &pw_gyksx1,
                      _pw_gyksx1d.fixedflag ? (_temp1598_pw_gyksx1d=pw_gyksx1d,&_temp1598_pw_gyksx1d) : &pw_gyksx1d) == FAILURE)
            return FAILURE;
    }

    ia_gyksx1  = _ia_gyksx1.fixedflag ?     ((void)((int)((a_gyksx1/target)*MAX_PG_IAMP)), ia_gyksx1) : (int)((a_gyksx1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxksx1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxksx1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxksx1.fixedflag ? (_temp1599_a_gxksx1=a_gxksx1,&_temp1599_a_gxksx1) : &a_gxksx1, _pw_gxksx1a.fixedflag ? (_temp1600_pw_gxksx1a=pw_gxksx1a,&_temp1600_pw_gxksx1a) : &pw_gxksx1a, _pw_gxksx1.fixedflag ? (_temp1601_pw_gxksx1=pw_gxksx1,&_temp1601_pw_gxksx1) : &pw_gxksx1,
                      _pw_gxksx1d.fixedflag ? (_temp1602_pw_gxksx1d=pw_gxksx1d,&_temp1602_pw_gxksx1d) : &pw_gxksx1d) == FAILURE)
            return FAILURE;
    }

    ia_gxksx1  = _ia_gxksx1.fixedflag ?     ((void)((int)((a_gxksx1/target)*MAX_PG_IAMP)), ia_gxksx1) : (int)((a_gxksx1/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gxrfsx2.fixedflag ? (_temp1603_a_gxrfsx2=a_gxrfsx2,&_temp1603_a_gxrfsx2) : &a_gxrfsx2,(LONG)(4000000*cyc_rfsx2/
                                         pw_rfsx2),
               (float)thk_rfsx2,(float)gscale_rfsx2,
               (int)TYPNDEF)== FAILURE) return FAILURE;
  if (optramp(_pw_gxrfsx2a.fixedflag ? (_temp1604_pw_gxrfsx2a=pw_gxrfsx2a,&_temp1604_pw_gxrfsx2a) : &pw_gxrfsx2a,a_gxrfsx2,loggrd.tx,
              loggrd.xrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gxrfsx2d.fixedflag ? (_temp1605_pw_gxrfsx2d=pw_gxrfsx2d,&_temp1605_pw_gxrfsx2d) : &pw_gxrfsx2d,a_gxrfsx2,loggrd.tx,
                  loggrd.xft,TYPNDEF)
      == FAILURE) return FAILURE;

  ia_gxrfsx2  = _ia_gxrfsx2.fixedflag ?    ((void)((int)(a_gxrfsx2*MAX_PG_IAMP/loggrd.tx)), ia_gxrfsx2) : (int)(a_gxrfsx2*MAX_PG_IAMP/loggrd.tx);

  ia_rfsx2  = _ia_rfsx2.fixedflag ?    ((void)((int)(a_rfsx2*MAX_PG_IAMP)), ia_rfsx2) : (int)(a_rfsx2*MAX_PG_IAMP);
  if (res_rfsx2 == 0)
    res_rfsx2  = _res_rfsx2.fixedflag ?  ((void)(pw_rfsx2/(RF_UPDATE_TIME)), res_rfsx2) : pw_rfsx2/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyksx2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyksx2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyksx2.fixedflag ? (_temp1606_a_gyksx2=a_gyksx2,&_temp1606_a_gyksx2) : &a_gyksx2, _pw_gyksx2a.fixedflag ? (_temp1607_pw_gyksx2a=pw_gyksx2a,&_temp1607_pw_gyksx2a) : &pw_gyksx2a, _pw_gyksx2.fixedflag ? (_temp1608_pw_gyksx2=pw_gyksx2,&_temp1608_pw_gyksx2) : &pw_gyksx2,
                      _pw_gyksx2d.fixedflag ? (_temp1609_pw_gyksx2d=pw_gyksx2d,&_temp1609_pw_gyksx2d) : &pw_gyksx2d) == FAILURE)
            return FAILURE;
    }

    ia_gyksx2  = _ia_gyksx2.fixedflag ?     ((void)((int)((a_gyksx2/target)*MAX_PG_IAMP)), ia_gyksx2) : (int)((a_gyksx2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxksx2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxksx2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxksx2.fixedflag ? (_temp1610_a_gxksx2=a_gxksx2,&_temp1610_a_gxksx2) : &a_gxksx2, _pw_gxksx2a.fixedflag ? (_temp1611_pw_gxksx2a=pw_gxksx2a,&_temp1611_pw_gxksx2a) : &pw_gxksx2a, _pw_gxksx2.fixedflag ? (_temp1612_pw_gxksx2=pw_gxksx2,&_temp1612_pw_gxksx2) : &pw_gxksx2,
                      _pw_gxksx2d.fixedflag ? (_temp1613_pw_gxksx2d=pw_gxksx2d,&_temp1613_pw_gxksx2d) : &pw_gxksx2d) == FAILURE)
            return FAILURE;
    }

    ia_gxksx2  = _ia_gxksx2.fixedflag ?     ((void)((int)((a_gxksx2/target)*MAX_PG_IAMP)), ia_gxksx2) : (int)((a_gxksx2/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gyrfsy1.fixedflag ? (_temp1614_a_gyrfsy1=a_gyrfsy1,&_temp1614_a_gyrfsy1) : &a_gyrfsy1,(LONG)(4000000*cyc_rfsy1/
                                         pw_rfsy1),
               (float)thk_rfsy1,(float)gscale_rfsy1,
               (int)TYPNDEF)== FAILURE) return FAILURE;
  if (optramp(_pw_gyrfsy1a.fixedflag ? (_temp1615_pw_gyrfsy1a=pw_gyrfsy1a,&_temp1615_pw_gyrfsy1a) : &pw_gyrfsy1a,a_gyrfsy1,loggrd.ty,
                  loggrd.yrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gyrfsy1d.fixedflag ? (_temp1616_pw_gyrfsy1d=pw_gyrfsy1d,&_temp1616_pw_gyrfsy1d) : &pw_gyrfsy1d,a_gyrfsy1,loggrd.ty,
              loggrd.yft,TYPNDEF) == FAILURE) return FAILURE;

  ia_gyrfsy1  = _ia_gyrfsy1.fixedflag ?    ((void)((int)(a_gyrfsy1*MAX_PG_IAMP/loggrd.ty)), ia_gyrfsy1) : (int)(a_gyrfsy1*MAX_PG_IAMP/loggrd.ty);

  ia_rfsy1  = _ia_rfsy1.fixedflag ?    ((void)((int)(a_rfsy1*MAX_PG_IAMP)), ia_rfsy1) : (int)(a_rfsy1*MAX_PG_IAMP);
  if (res_rfsy1 == 0)
    res_rfsy1  = _res_rfsy1.fixedflag ?  ((void)(pw_rfsy1/(RF_UPDATE_TIME)), res_rfsy1) : pw_rfsy1/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyksy1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyksy1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyksy1.fixedflag ? (_temp1617_a_gyksy1=a_gyksy1,&_temp1617_a_gyksy1) : &a_gyksy1, _pw_gyksy1a.fixedflag ? (_temp1618_pw_gyksy1a=pw_gyksy1a,&_temp1618_pw_gyksy1a) : &pw_gyksy1a, _pw_gyksy1.fixedflag ? (_temp1619_pw_gyksy1=pw_gyksy1,&_temp1619_pw_gyksy1) : &pw_gyksy1,
                      _pw_gyksy1d.fixedflag ? (_temp1620_pw_gyksy1d=pw_gyksy1d,&_temp1620_pw_gyksy1d) : &pw_gyksy1d) == FAILURE)
            return FAILURE;
    }

    ia_gyksy1  = _ia_gyksy1.fixedflag ?     ((void)((int)((a_gyksy1/target)*MAX_PG_IAMP)), ia_gyksy1) : (int)((a_gyksy1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxksy1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxksy1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxksy1.fixedflag ? (_temp1621_a_gxksy1=a_gxksy1,&_temp1621_a_gxksy1) : &a_gxksy1, _pw_gxksy1a.fixedflag ? (_temp1622_pw_gxksy1a=pw_gxksy1a,&_temp1622_pw_gxksy1a) : &pw_gxksy1a, _pw_gxksy1.fixedflag ? (_temp1623_pw_gxksy1=pw_gxksy1,&_temp1623_pw_gxksy1) : &pw_gxksy1,
                      _pw_gxksy1d.fixedflag ? (_temp1624_pw_gxksy1d=pw_gxksy1d,&_temp1624_pw_gxksy1d) : &pw_gxksy1d) == FAILURE)
            return FAILURE;
    }

    ia_gxksy1  = _ia_gxksy1.fixedflag ?     ((void)((int)((a_gxksy1/target)*MAX_PG_IAMP)), ia_gxksy1) : (int)((a_gxksy1/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gyrfsy2.fixedflag ? (_temp1625_a_gyrfsy2=a_gyrfsy2,&_temp1625_a_gyrfsy2) : &a_gyrfsy2,(LONG)(4000000*cyc_rfsy2/
                                         pw_rfsy2),
               (float)thk_rfsy2,(float)gscale_rfsy2,
               (int)TYPNDEF)== FAILURE) return FAILURE;
  if (optramp(_pw_gyrfsy2a.fixedflag ? (_temp1626_pw_gyrfsy2a=pw_gyrfsy2a,&_temp1626_pw_gyrfsy2a) : &pw_gyrfsy2a,a_gyrfsy2,loggrd.ty,
                  loggrd.yrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gyrfsy2d.fixedflag ? (_temp1627_pw_gyrfsy2d=pw_gyrfsy2d,&_temp1627_pw_gyrfsy2d) : &pw_gyrfsy2d,a_gyrfsy2,loggrd.ty,
              loggrd.yft,TYPNDEF) == FAILURE) return FAILURE;

  ia_gyrfsy2  = _ia_gyrfsy2.fixedflag ?    ((void)((int)(a_gyrfsy2*MAX_PG_IAMP/loggrd.ty)), ia_gyrfsy2) : (int)(a_gyrfsy2*MAX_PG_IAMP/loggrd.ty);

  ia_rfsy2  = _ia_rfsy2.fixedflag ?    ((void)((int)(a_rfsy2*MAX_PG_IAMP)), ia_rfsy2) : (int)(a_rfsy2*MAX_PG_IAMP);
  if (res_rfsy2 == 0)
    res_rfsy2  = _res_rfsy2.fixedflag ?  ((void)(pw_rfsy2/(RF_UPDATE_TIME)), res_rfsy2) : pw_rfsy2/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyksy2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyksy2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyksy2.fixedflag ? (_temp1628_a_gyksy2=a_gyksy2,&_temp1628_a_gyksy2) : &a_gyksy2, _pw_gyksy2a.fixedflag ? (_temp1629_pw_gyksy2a=pw_gyksy2a,&_temp1629_pw_gyksy2a) : &pw_gyksy2a, _pw_gyksy2.fixedflag ? (_temp1630_pw_gyksy2=pw_gyksy2,&_temp1630_pw_gyksy2) : &pw_gyksy2,
                      _pw_gyksy2d.fixedflag ? (_temp1631_pw_gyksy2d=pw_gyksy2d,&_temp1631_pw_gyksy2d) : &pw_gyksy2d) == FAILURE)
            return FAILURE;
    }

    ia_gyksy2  = _ia_gyksy2.fixedflag ?     ((void)((int)((a_gyksy2/target)*MAX_PG_IAMP)), ia_gyksy2) : (int)((a_gyksy2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxksy2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxksy2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxksy2.fixedflag ? (_temp1632_a_gxksy2=a_gxksy2,&_temp1632_a_gxksy2) : &a_gxksy2, _pw_gxksy2a.fixedflag ? (_temp1633_pw_gxksy2a=pw_gxksy2a,&_temp1633_pw_gxksy2a) : &pw_gxksy2a, _pw_gxksy2.fixedflag ? (_temp1634_pw_gxksy2=pw_gxksy2,&_temp1634_pw_gxksy2) : &pw_gxksy2,
                      _pw_gxksy2d.fixedflag ? (_temp1635_pw_gxksy2d=pw_gxksy2d,&_temp1635_pw_gxksy2d) : &pw_gxksy2d) == FAILURE)
            return FAILURE;
    }

    ia_gxksy2  = _ia_gxksy2.fixedflag ?     ((void)((int)((a_gxksy2/target)*MAX_PG_IAMP)), ia_gxksy2) : (int)((a_gxksy2/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfsz1.fixedflag ? (_temp1636_a_gzrfsz1=a_gzrfsz1,&_temp1636_a_gzrfsz1) : &a_gzrfsz1,(LONG)(4000000*cyc_rfsz1/
                                         pw_rfsz1),
               (float)thk_rfsz1,(float)gscale_rfsz1,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfsz1a.fixedflag ? (_temp1637_pw_gzrfsz1a=pw_gzrfsz1a,&_temp1637_pw_gzrfsz1a) : &pw_gzrfsz1a,a_gzrfsz1,loggrd.tz,
      loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfsz1d.fixedflag ? (_temp1638_pw_gzrfsz1d=pw_gzrfsz1d,&_temp1638_pw_gzrfsz1d) : &pw_gzrfsz1d,a_gzrfsz1,loggrd.tz,
          loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfsz1  = _ia_gzrfsz1.fixedflag ?    ((void)((int)(a_gzrfsz1*MAX_PG_IAMP/loggrd.tz)), ia_gzrfsz1) : (int)(a_gzrfsz1*MAX_PG_IAMP/loggrd.tz);

  ia_rfsz1  = _ia_rfsz1.fixedflag ?    ((void)((int)(a_rfsz1*MAX_PG_IAMP)), ia_rfsz1) : (int)(a_rfsz1*MAX_PG_IAMP);
  if (res_rfsz1 == 0)
    res_rfsz1  = _res_rfsz1.fixedflag ?  ((void)(pw_rfsz1/(RF_UPDATE_TIME)), res_rfsz1) : pw_rfsz1/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyksz1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyksz1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyksz1.fixedflag ? (_temp1639_a_gyksz1=a_gyksz1,&_temp1639_a_gyksz1) : &a_gyksz1, _pw_gyksz1a.fixedflag ? (_temp1640_pw_gyksz1a=pw_gyksz1a,&_temp1640_pw_gyksz1a) : &pw_gyksz1a, _pw_gyksz1.fixedflag ? (_temp1641_pw_gyksz1=pw_gyksz1,&_temp1641_pw_gyksz1) : &pw_gyksz1,
                      _pw_gyksz1d.fixedflag ? (_temp1642_pw_gyksz1d=pw_gyksz1d,&_temp1642_pw_gyksz1d) : &pw_gyksz1d) == FAILURE)
            return FAILURE;
    }

    ia_gyksz1  = _ia_gyksz1.fixedflag ?     ((void)((int)((a_gyksz1/target)*MAX_PG_IAMP)), ia_gyksz1) : (int)((a_gyksz1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxksz1, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxksz1, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxksz1.fixedflag ? (_temp1643_a_gxksz1=a_gxksz1,&_temp1643_a_gxksz1) : &a_gxksz1, _pw_gxksz1a.fixedflag ? (_temp1644_pw_gxksz1a=pw_gxksz1a,&_temp1644_pw_gxksz1a) : &pw_gxksz1a, _pw_gxksz1.fixedflag ? (_temp1645_pw_gxksz1=pw_gxksz1,&_temp1645_pw_gxksz1) : &pw_gxksz1,
                      _pw_gxksz1d.fixedflag ? (_temp1646_pw_gxksz1d=pw_gxksz1d,&_temp1646_pw_gxksz1d) : &pw_gxksz1d) == FAILURE)
            return FAILURE;
    }

    ia_gxksz1  = _ia_gxksz1.fixedflag ?     ((void)((int)((a_gxksz1/target)*MAX_PG_IAMP)), ia_gxksz1) : (int)((a_gxksz1/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrfsz2.fixedflag ? (_temp1647_a_gzrfsz2=a_gzrfsz2,&_temp1647_a_gzrfsz2) : &a_gzrfsz2,(LONG)(4000000*cyc_rfsz2/
                                         pw_rfsz2),
               (float)thk_rfsz2,(float)gscale_rfsz2,
               (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfsz2a.fixedflag ? (_temp1648_pw_gzrfsz2a=pw_gzrfsz2a,&_temp1648_pw_gzrfsz2a) : &pw_gzrfsz2a,a_gzrfsz2,loggrd.tz,
      loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrfsz2d.fixedflag ? (_temp1649_pw_gzrfsz2d=pw_gzrfsz2d,&_temp1649_pw_gzrfsz2d) : &pw_gzrfsz2d,a_gzrfsz2,loggrd.tz,
          loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrfsz2  = _ia_gzrfsz2.fixedflag ?    ((void)((int)(a_gzrfsz2*MAX_PG_IAMP/loggrd.tz)), ia_gzrfsz2) : (int)(a_gzrfsz2*MAX_PG_IAMP/loggrd.tz);

  ia_rfsz2  = _ia_rfsz2.fixedflag ?    ((void)((int)(a_rfsz2*MAX_PG_IAMP)), ia_rfsz2) : (int)(a_rfsz2*MAX_PG_IAMP);
  if (res_rfsz2 == 0)
    res_rfsz2  = _res_rfsz2.fixedflag ?  ((void)(pw_rfsz2/(RF_UPDATE_TIME)), res_rfsz2) : pw_rfsz2/(RF_UPDATE_TIME);




{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyksz2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyksz2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyksz2.fixedflag ? (_temp1650_a_gyksz2=a_gyksz2,&_temp1650_a_gyksz2) : &a_gyksz2, _pw_gyksz2a.fixedflag ? (_temp1651_pw_gyksz2a=pw_gyksz2a,&_temp1651_pw_gyksz2a) : &pw_gyksz2a, _pw_gyksz2.fixedflag ? (_temp1652_pw_gyksz2=pw_gyksz2,&_temp1652_pw_gyksz2) : &pw_gyksz2,
                      _pw_gyksz2d.fixedflag ? (_temp1653_pw_gyksz2d=pw_gyksz2d,&_temp1653_pw_gyksz2d) : &pw_gyksz2d) == FAILURE)
            return FAILURE;
    }

    ia_gyksz2  = _ia_gyksz2.fixedflag ?     ((void)((int)((a_gyksz2/target)*MAX_PG_IAMP)), ia_gyksz2) : (int)((a_gyksz2/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxksz2, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxksz2, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxksz2.fixedflag ? (_temp1654_a_gxksz2=a_gxksz2,&_temp1654_a_gxksz2) : &a_gxksz2, _pw_gxksz2a.fixedflag ? (_temp1655_pw_gxksz2a=pw_gxksz2a,&_temp1655_pw_gxksz2a) : &pw_gxksz2a, _pw_gxksz2.fixedflag ? (_temp1656_pw_gxksz2=pw_gxksz2,&_temp1656_pw_gxksz2) : &pw_gxksz2,
                      _pw_gxksz2d.fixedflag ? (_temp1657_pw_gxksz2d=pw_gxksz2d,&_temp1657_pw_gxksz2d) : &pw_gxksz2d) == FAILURE)
            return FAILURE;
    }

    ia_gxksz2  = _ia_gxksz2.fixedflag ?     ((void)((int)((a_gxksz2/target)*MAX_PG_IAMP)), ia_gxksz2) : (int)((a_gxksz2/target)*MAX_PG_IAMP);
}






{
  float target;
  gettarget(&target,(WF_PROCESSOR)wg_rf1mps1,&ps1loggrd);
  if ((wg_rf1mps1==TYPRHO1)||(wg_rf1mps1==TYPRHO2)
        ||(wg_rf1mps1==TYPOMEGA)||(wg_rf1mps1==TYPTHETA))
    {
      if (res_rf1mps1 == 0)
        {
          res_rf1mps1  = _res_rf1mps1.fixedflag ?  ((void)(pw_rf1mps1/(RF_UPDATE_TIME)), res_rf1mps1) : pw_rf1mps1/(RF_UPDATE_TIME);
        }
      ia_rf1mps1  = _ia_rf1mps1.fixedflag ?    ((void)((int)(a_rf1mps1*MAX_PG_IAMP)), ia_rf1mps1) : (int)(a_rf1mps1*MAX_PG_IAMP);
    }    
  else
    {
      if (res_rf1mps1 == 0)
        {
          res_rf1mps1  = _res_rf1mps1.fixedflag ?  ((void)(pw_rf1mps1/(GRAD_UPDATE_TIME)), res_rf1mps1) : pw_rf1mps1/(GRAD_UPDATE_TIME);
        }
      ia_rf1mps1  = _ia_rf1mps1.fixedflag ?     ((void)((int)((a_rf1mps1/target)*MAX_PG_IAMP)), ia_rf1mps1) : (int)((a_rf1mps1/target)*MAX_PG_IAMP);
    }    
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf1mps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf1mps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf1mps1.fixedflag ? (_temp1658_a_gyrf1mps1=a_gyrf1mps1,&_temp1658_a_gyrf1mps1) : &a_gyrf1mps1, _pw_gyrf1mps1a.fixedflag ? (_temp1659_pw_gyrf1mps1a=pw_gyrf1mps1a,&_temp1659_pw_gyrf1mps1a) : &pw_gyrf1mps1a, _pw_gyrf1mps1.fixedflag ? (_temp1660_pw_gyrf1mps1=pw_gyrf1mps1,&_temp1660_pw_gyrf1mps1) : &pw_gyrf1mps1,
                      _pw_gyrf1mps1d.fixedflag ? (_temp1661_pw_gyrf1mps1d=pw_gyrf1mps1d,&_temp1661_pw_gyrf1mps1d) : &pw_gyrf1mps1d) == FAILURE)
            return FAILURE;
    }

    ia_gyrf1mps1  = _ia_gyrf1mps1.fixedflag ?     ((void)((int)((a_gyrf1mps1/target)*MAX_PG_IAMP)), ia_gyrf1mps1) : (int)((a_gyrf1mps1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gy1mps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1mps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gy1mps1.fixedflag ? (_temp1662_a_gy1mps1=a_gy1mps1,&_temp1662_a_gy1mps1) : &a_gy1mps1, _pw_gy1mps1a.fixedflag ? (_temp1663_pw_gy1mps1a=pw_gy1mps1a,&_temp1663_pw_gy1mps1a) : &pw_gy1mps1a, _pw_gy1mps1.fixedflag ? (_temp1664_pw_gy1mps1=pw_gy1mps1,&_temp1664_pw_gy1mps1) : &pw_gy1mps1,
                      _pw_gy1mps1d.fixedflag ? (_temp1665_pw_gy1mps1d=pw_gy1mps1d,&_temp1665_pw_gy1mps1d) : &pw_gy1mps1d) == FAILURE)
            return FAILURE;
    }

    ia_gy1mps1  = _ia_gy1mps1.fixedflag ?     ((void)((int)((a_gy1mps1/target)*MAX_PG_IAMP)), ia_gy1mps1) : (int)((a_gy1mps1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf1mps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf1mps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf1mps1.fixedflag ? (_temp1666_a_gzrf1mps1=a_gzrf1mps1,&_temp1666_a_gzrf1mps1) : &a_gzrf1mps1, _pw_gzrf1mps1a.fixedflag ? (_temp1667_pw_gzrf1mps1a=pw_gzrf1mps1a,&_temp1667_pw_gzrf1mps1a) : &pw_gzrf1mps1a, _pw_gzrf1mps1.fixedflag ? (_temp1668_pw_gzrf1mps1=pw_gzrf1mps1,&_temp1668_pw_gzrf1mps1) : &pw_gzrf1mps1,
                      _pw_gzrf1mps1d.fixedflag ? (_temp1669_pw_gzrf1mps1d=pw_gzrf1mps1d,&_temp1669_pw_gzrf1mps1d) : &pw_gzrf1mps1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf1mps1  = _ia_gzrf1mps1.fixedflag ?     ((void)((int)((a_gzrf1mps1/target)*MAX_PG_IAMP)), ia_gzrf1mps1) : (int)((a_gzrf1mps1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1mps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1mps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1mps1.fixedflag ? (_temp1670_a_gz1mps1=a_gz1mps1,&_temp1670_a_gz1mps1) : &a_gz1mps1, _pw_gz1mps1a.fixedflag ? (_temp1671_pw_gz1mps1a=pw_gz1mps1a,&_temp1671_pw_gz1mps1a) : &pw_gz1mps1a, _pw_gz1mps1.fixedflag ? (_temp1672_pw_gz1mps1=pw_gz1mps1,&_temp1672_pw_gz1mps1) : &pw_gz1mps1,
                      _pw_gz1mps1d.fixedflag ? (_temp1673_pw_gz1mps1d=pw_gz1mps1d,&_temp1673_pw_gz1mps1d) : &pw_gz1mps1d) == FAILURE)
            return FAILURE;
    }

    ia_gz1mps1  = _ia_gz1mps1.fixedflag ?     ((void)((int)((a_gz1mps1/target)*MAX_PG_IAMP)), ia_gz1mps1) : (int)((a_gz1mps1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1mps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1mps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1mps1.fixedflag ? (_temp1674_a_gx1mps1=a_gx1mps1,&_temp1674_a_gx1mps1) : &a_gx1mps1, _pw_gx1mps1a.fixedflag ? (_temp1675_pw_gx1mps1a=pw_gx1mps1a,&_temp1675_pw_gx1mps1a) : &pw_gx1mps1a, _pw_gx1mps1.fixedflag ? (_temp1676_pw_gx1mps1=pw_gx1mps1,&_temp1676_pw_gx1mps1) : &pw_gx1mps1,
                      _pw_gx1mps1d.fixedflag ? (_temp1677_pw_gx1mps1d=pw_gx1mps1d,&_temp1677_pw_gx1mps1d) : &pw_gx1mps1d) == FAILURE)
            return FAILURE;
    }

    ia_gx1mps1  = _ia_gx1mps1.fixedflag ?     ((void)((int)((a_gx1mps1/target)*MAX_PG_IAMP)), ia_gx1mps1) : (int)((a_gx1mps1/target)*MAX_PG_IAMP);
}

  if (ampslice(_a_gzrf2mps1.fixedflag ? (_temp1678_a_gzrf2mps1=a_gzrf2mps1,&_temp1678_a_gzrf2mps1) : &a_gzrf2mps1,(LONG)(4000000*cyc_rf2mps1/
					 pw_rf2mps1),
	       (float)thk_rf2mps1,(float)gscale_rf2mps1,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2mps1a.fixedflag ? (_temp1679_pw_gzrf2mps1a=pw_gzrf2mps1a,&_temp1679_pw_gzrf2mps1a) : &pw_gzrf2mps1a,a_gzrf2mps1,ps1loggrd.tz,
      ps1loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2mps1d.fixedflag ? (_temp1680_pw_gzrf2mps1d=pw_gzrf2mps1d,&_temp1680_pw_gzrf2mps1d) : &pw_gzrf2mps1d,a_gzrf2mps1,ps1loggrd.tz,
	  ps1loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf2mps1  = _ia_gzrf2mps1.fixedflag ?    ((void)((int)(a_gzrf2mps1*MAX_PG_IAMP/ps1loggrd.tz)), ia_gzrf2mps1) : (int)(a_gzrf2mps1*MAX_PG_IAMP/ps1loggrd.tz);
			      
  ia_rf2mps1  = _ia_rf2mps1.fixedflag ?    ((void)((int)(a_rf2mps1*MAX_PG_IAMP)), ia_rf2mps1) : (int)(a_rf2mps1*MAX_PG_IAMP);
  if (res_rf2mps1 == 0)
    res_rf2mps1  = _res_rf2mps1.fixedflag ?  ((void)(pw_rf2mps1/(RF_UPDATE_TIME)), res_rf2mps1) : pw_rf2mps1/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2lmps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2lmps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2lmps1.fixedflag ? (_temp1681_a_gzrf2lmps1=a_gzrf2lmps1,&_temp1681_a_gzrf2lmps1) : &a_gzrf2lmps1, _pw_gzrf2lmps1a.fixedflag ? (_temp1682_pw_gzrf2lmps1a=pw_gzrf2lmps1a,&_temp1682_pw_gzrf2lmps1a) : &pw_gzrf2lmps1a, _pw_gzrf2lmps1.fixedflag ? (_temp1683_pw_gzrf2lmps1=pw_gzrf2lmps1,&_temp1683_pw_gzrf2lmps1) : &pw_gzrf2lmps1,
                      _pw_gzrf2lmps1d.fixedflag ? (_temp1684_pw_gzrf2lmps1d=pw_gzrf2lmps1d,&_temp1684_pw_gzrf2lmps1d) : &pw_gzrf2lmps1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2lmps1  = _ia_gzrf2lmps1.fixedflag ?     ((void)((int)((a_gzrf2lmps1/target)*MAX_PG_IAMP)), ia_gzrf2lmps1) : (int)((a_gzrf2lmps1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2rmps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2rmps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2rmps1.fixedflag ? (_temp1685_a_gzrf2rmps1=a_gzrf2rmps1,&_temp1685_a_gzrf2rmps1) : &a_gzrf2rmps1, _pw_gzrf2rmps1a.fixedflag ? (_temp1686_pw_gzrf2rmps1a=pw_gzrf2rmps1a,&_temp1686_pw_gzrf2rmps1a) : &pw_gzrf2rmps1a, _pw_gzrf2rmps1.fixedflag ? (_temp1687_pw_gzrf2rmps1=pw_gzrf2rmps1,&_temp1687_pw_gzrf2rmps1) : &pw_gzrf2rmps1,
                      _pw_gzrf2rmps1d.fixedflag ? (_temp1688_pw_gzrf2rmps1d=pw_gzrf2rmps1d,&_temp1688_pw_gzrf2rmps1d) : &pw_gzrf2rmps1d) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2rmps1  = _ia_gzrf2rmps1.fixedflag ?     ((void)((int)((a_gzrf2rmps1/target)*MAX_PG_IAMP)), ia_gzrf2rmps1) : (int)((a_gzrf2rmps1/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwmps1, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwmps1, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwmps1.fixedflag ? (_temp1689_a_gxwmps1=a_gxwmps1,&_temp1689_a_gxwmps1) : &a_gxwmps1, _pw_gxwmps1a.fixedflag ? (_temp1690_pw_gxwmps1a=pw_gxwmps1a,&_temp1690_pw_gxwmps1a) : &pw_gxwmps1a, _pw_gxwmps1.fixedflag ? (_temp1691_pw_gxwmps1=pw_gxwmps1,&_temp1691_pw_gxwmps1) : &pw_gxwmps1,
                      _pw_gxwmps1d.fixedflag ? (_temp1692_pw_gxwmps1d=pw_gxwmps1d,&_temp1692_pw_gxwmps1d) : &pw_gxwmps1d) == FAILURE)
            return FAILURE;
    }

    ia_gxwmps1  = _ia_gxwmps1.fixedflag ?     ((void)((int)((a_gxwmps1/target)*MAX_PG_IAMP)), ia_gxwmps1) : (int)((a_gxwmps1/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrf1cfl.fixedflag ? (_temp1693_a_gzrf1cfl=a_gzrf1cfl,&_temp1693_a_gzrf1cfl) : &a_gzrf1cfl,(LONG)(4000000*cyc_rf1cfl/
					 pw_rf1cfl),
	       (float)thk_rf1cfl,(float)gscale_rf1cfl,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1cfla.fixedflag ? (_temp1694_pw_gzrf1cfla=pw_gzrf1cfla,&_temp1694_pw_gzrf1cfla) : &pw_gzrf1cfla,a_gzrf1cfl,cflloggrd.tz,
      cflloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1cfld.fixedflag ? (_temp1695_pw_gzrf1cfld=pw_gzrf1cfld,&_temp1695_pw_gzrf1cfld) : &pw_gzrf1cfld,a_gzrf1cfl,cflloggrd.tz,
	  cflloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf1cfl  = _ia_gzrf1cfl.fixedflag ?    ((void)((int)(a_gzrf1cfl*MAX_PG_IAMP/cflloggrd.tz)), ia_gzrf1cfl) : (int)(a_gzrf1cfl*MAX_PG_IAMP/cflloggrd.tz);
			      
  ia_rf1cfl  = _ia_rf1cfl.fixedflag ?    ((void)((int)(a_rf1cfl*MAX_PG_IAMP)), ia_rf1cfl) : (int)(a_rf1cfl*MAX_PG_IAMP);
  if (res_rf1cfl == 0)
    res_rf1cfl  = _res_rf1cfl.fixedflag ?  ((void)(pw_rf1cfl/(RF_UPDATE_TIME)), res_rf1cfl) : pw_rf1cfl/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1cfl, &cflloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1cfl, &cflloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1cfl.fixedflag ? (_temp1696_a_gz1cfl=a_gz1cfl,&_temp1696_a_gz1cfl) : &a_gz1cfl, _pw_gz1cfla.fixedflag ? (_temp1697_pw_gz1cfla=pw_gz1cfla,&_temp1697_pw_gz1cfla) : &pw_gz1cfla, _pw_gz1cfl.fixedflag ? (_temp1698_pw_gz1cfl=pw_gz1cfl,&_temp1698_pw_gz1cfl) : &pw_gz1cfl,
                      _pw_gz1cfld.fixedflag ? (_temp1699_pw_gz1cfld=pw_gz1cfld,&_temp1699_pw_gz1cfld) : &pw_gz1cfld) == FAILURE)
            return FAILURE;
    }

    ia_gz1cfl  = _ia_gz1cfl.fixedflag ?     ((void)((int)((a_gz1cfl/target)*MAX_PG_IAMP)), ia_gz1cfl) : (int)((a_gz1cfl/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykcfl, &cflloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykcfl, &cflloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykcfl.fixedflag ? (_temp1700_a_gykcfl=a_gykcfl,&_temp1700_a_gykcfl) : &a_gykcfl, _pw_gykcfla.fixedflag ? (_temp1701_pw_gykcfla=pw_gykcfla,&_temp1701_pw_gykcfla) : &pw_gykcfla, _pw_gykcfl.fixedflag ? (_temp1702_pw_gykcfl=pw_gykcfl,&_temp1702_pw_gykcfl) : &pw_gykcfl,
                      _pw_gykcfld.fixedflag ? (_temp1703_pw_gykcfld=pw_gykcfld,&_temp1703_pw_gykcfld) : &pw_gykcfld) == FAILURE)
            return FAILURE;
    }

    ia_gykcfl  = _ia_gykcfl.fixedflag ?     ((void)((int)((a_gykcfl/target)*MAX_PG_IAMP)), ia_gykcfl) : (int)((a_gykcfl/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkrcvn, &rcvnloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkrcvn, &rcvnloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkrcvn.fixedflag ? (_temp1704_a_gxkrcvn=a_gxkrcvn,&_temp1704_a_gxkrcvn) : &a_gxkrcvn, _pw_gxkrcvna.fixedflag ? (_temp1705_pw_gxkrcvna=pw_gxkrcvna,&_temp1705_pw_gxkrcvna) : &pw_gxkrcvna, _pw_gxkrcvn.fixedflag ? (_temp1706_pw_gxkrcvn=pw_gxkrcvn,&_temp1706_pw_gxkrcvn) : &pw_gxkrcvn,
                      _pw_gxkrcvnd.fixedflag ? (_temp1707_pw_gxkrcvnd=pw_gxkrcvnd,&_temp1707_pw_gxkrcvnd) : &pw_gxkrcvnd) == FAILURE)
            return FAILURE;
    }

    ia_gxkrcvn  = _ia_gxkrcvn.fixedflag ?     ((void)((int)((a_gxkrcvn/target)*MAX_PG_IAMP)), ia_gxkrcvn) : (int)((a_gxkrcvn/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykrcvn, &rcvnloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykrcvn, &rcvnloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykrcvn.fixedflag ? (_temp1708_a_gykrcvn=a_gykrcvn,&_temp1708_a_gykrcvn) : &a_gykrcvn, _pw_gykrcvna.fixedflag ? (_temp1709_pw_gykrcvna=pw_gykrcvna,&_temp1709_pw_gykrcvna) : &pw_gykrcvna, _pw_gykrcvn.fixedflag ? (_temp1710_pw_gykrcvn=pw_gykrcvn,&_temp1710_pw_gykrcvn) : &pw_gykrcvn,
                      _pw_gykrcvnd.fixedflag ? (_temp1711_pw_gykrcvnd=pw_gykrcvnd,&_temp1711_pw_gykrcvnd) : &pw_gykrcvnd) == FAILURE)
            return FAILURE;
    }

    ia_gykrcvn  = _ia_gykrcvn.fixedflag ?     ((void)((int)((a_gykrcvn/target)*MAX_PG_IAMP)), ia_gykrcvn) : (int)((a_gykrcvn/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkrcvn, &rcvnloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkrcvn, &rcvnloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkrcvn.fixedflag ? (_temp1712_a_gzkrcvn=a_gzkrcvn,&_temp1712_a_gzkrcvn) : &a_gzkrcvn, _pw_gzkrcvna.fixedflag ? (_temp1713_pw_gzkrcvna=pw_gzkrcvna,&_temp1713_pw_gzkrcvna) : &pw_gzkrcvna, _pw_gzkrcvn.fixedflag ? (_temp1714_pw_gzkrcvn=pw_gzkrcvn,&_temp1714_pw_gzkrcvn) : &pw_gzkrcvn,
                      _pw_gzkrcvnd.fixedflag ? (_temp1715_pw_gzkrcvnd=pw_gzkrcvnd,&_temp1715_pw_gzkrcvnd) : &pw_gzkrcvnd) == FAILURE)
            return FAILURE;
    }

    ia_gzkrcvn  = _ia_gzkrcvn.fixedflag ?     ((void)((int)((a_gzkrcvn/target)*MAX_PG_IAMP)), ia_gzkrcvn) : (int)((a_gzkrcvn/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxk2rcvn, &rcvnloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxk2rcvn, &rcvnloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxk2rcvn.fixedflag ? (_temp1716_a_gxk2rcvn=a_gxk2rcvn,&_temp1716_a_gxk2rcvn) : &a_gxk2rcvn, _pw_gxk2rcvna.fixedflag ? (_temp1717_pw_gxk2rcvna=pw_gxk2rcvna,&_temp1717_pw_gxk2rcvna) : &pw_gxk2rcvna, _pw_gxk2rcvn.fixedflag ? (_temp1718_pw_gxk2rcvn=pw_gxk2rcvn,&_temp1718_pw_gxk2rcvn) : &pw_gxk2rcvn,
                      _pw_gxk2rcvnd.fixedflag ? (_temp1719_pw_gxk2rcvnd=pw_gxk2rcvnd,&_temp1719_pw_gxk2rcvnd) : &pw_gxk2rcvnd) == FAILURE)
            return FAILURE;
    }

    ia_gxk2rcvn  = _ia_gxk2rcvn.fixedflag ?     ((void)((int)((a_gxk2rcvn/target)*MAX_PG_IAMP)), ia_gxk2rcvn) : (int)((a_gxk2rcvn/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyk2rcvn, &rcvnloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyk2rcvn, &rcvnloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyk2rcvn.fixedflag ? (_temp1720_a_gyk2rcvn=a_gyk2rcvn,&_temp1720_a_gyk2rcvn) : &a_gyk2rcvn, _pw_gyk2rcvna.fixedflag ? (_temp1721_pw_gyk2rcvna=pw_gyk2rcvna,&_temp1721_pw_gyk2rcvna) : &pw_gyk2rcvna, _pw_gyk2rcvn.fixedflag ? (_temp1722_pw_gyk2rcvn=pw_gyk2rcvn,&_temp1722_pw_gyk2rcvn) : &pw_gyk2rcvn,
                      _pw_gyk2rcvnd.fixedflag ? (_temp1723_pw_gyk2rcvnd=pw_gyk2rcvnd,&_temp1723_pw_gyk2rcvnd) : &pw_gyk2rcvnd) == FAILURE)
            return FAILURE;
    }

    ia_gyk2rcvn  = _ia_gyk2rcvn.fixedflag ?     ((void)((int)((a_gyk2rcvn/target)*MAX_PG_IAMP)), ia_gyk2rcvn) : (int)((a_gyk2rcvn/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzk2rcvn, &rcvnloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzk2rcvn, &rcvnloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzk2rcvn.fixedflag ? (_temp1724_a_gzk2rcvn=a_gzk2rcvn,&_temp1724_a_gzk2rcvn) : &a_gzk2rcvn, _pw_gzk2rcvna.fixedflag ? (_temp1725_pw_gzk2rcvna=pw_gzk2rcvna,&_temp1725_pw_gzk2rcvna) : &pw_gzk2rcvna, _pw_gzk2rcvn.fixedflag ? (_temp1726_pw_gzk2rcvn=pw_gzk2rcvn,&_temp1726_pw_gzk2rcvn) : &pw_gzk2rcvn,
                      _pw_gzk2rcvnd.fixedflag ? (_temp1727_pw_gzk2rcvnd=pw_gzk2rcvnd,&_temp1727_pw_gzk2rcvnd) : &pw_gzk2rcvnd) == FAILURE)
            return FAILURE;
    }

    ia_gzk2rcvn  = _ia_gzk2rcvn.fixedflag ?     ((void)((int)((a_gzk2rcvn/target)*MAX_PG_IAMP)), ia_gzk2rcvn) : (int)((a_gzk2rcvn/target)*MAX_PG_IAMP);
}



  ia_rcvrbl  = _ia_rcvrbl.fixedflag ?  ((void)(0), ia_rcvrbl) : 0;


  ia_rcvrbl2  = _ia_rcvrbl2.fixedflag ?  ((void)(0), ia_rcvrbl2) : 0;


  if (ampslice(_a_gzrf0cfh.fixedflag ? (_temp1728_a_gzrf0cfh=a_gzrf0cfh,&_temp1728_a_gzrf0cfh) : &a_gzrf0cfh,(LONG)(4000000*cyc_rf0cfh/
					 pw_rf0cfh),
	       (float)thk_rf0cfh,(float)gscale_rf0cfh,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf0cfha.fixedflag ? (_temp1729_pw_gzrf0cfha=pw_gzrf0cfha,&_temp1729_pw_gzrf0cfha) : &pw_gzrf0cfha,a_gzrf0cfh,cfhloggrd.tz,
	      cfhloggrd.zrt,(int)TYPNDEF) 
      == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf0cfhd.fixedflag ? (_temp1730_pw_gzrf0cfhd=pw_gzrf0cfhd,&_temp1730_pw_gzrf0cfhd) : &pw_gzrf0cfhd,a_gzrf0cfh,cfhloggrd.tz,
	      cfhloggrd.zft,(int)TYPNDEF) 
      == FAILURE) return FAILURE;
 
  ia_gzrf0cfh  = _ia_gzrf0cfh.fixedflag ?    ((void)((int)(a_gzrf0cfh*MAX_PG_IAMP/cfhloggrd.tz)), ia_gzrf0cfh) : (int)(a_gzrf0cfh*MAX_PG_IAMP/cfhloggrd.tz);
  ia_rf0cfh  = _ia_rf0cfh.fixedflag ?    ((void)((int)(a_rf0cfh*MAX_PG_IAMP)), ia_rf0cfh) : (int)(a_rf0cfh*MAX_PG_IAMP);


    {
        ia_omegarf0cfh    = _ia_omegarf0cfh.fixedflag ?    ((void)((int)(a_omegarf0cfh*MAX_PG_IAMP)), ia_omegarf0cfh) : (int)(a_omegarf0cfh*MAX_PG_IAMP);
    }

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf0kcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf0kcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf0kcfh.fixedflag ? (_temp1731_a_gyrf0kcfh=a_gyrf0kcfh,&_temp1731_a_gyrf0kcfh) : &a_gyrf0kcfh, _pw_gyrf0kcfha.fixedflag ? (_temp1732_pw_gyrf0kcfha=pw_gyrf0kcfha,&_temp1732_pw_gyrf0kcfha) : &pw_gyrf0kcfha, _pw_gyrf0kcfh.fixedflag ? (_temp1733_pw_gyrf0kcfh=pw_gyrf0kcfh,&_temp1733_pw_gyrf0kcfh) : &pw_gyrf0kcfh,
                      _pw_gyrf0kcfhd.fixedflag ? (_temp1734_pw_gyrf0kcfhd=pw_gyrf0kcfhd,&_temp1734_pw_gyrf0kcfhd) : &pw_gyrf0kcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gyrf0kcfh  = _ia_gyrf0kcfh.fixedflag ?     ((void)((int)((a_gyrf0kcfh/target)*MAX_PG_IAMP)), ia_gyrf0kcfh) : (int)((a_gyrf0kcfh/target)*MAX_PG_IAMP);
}






  if (ampslice(_a_gzrf1cfh.fixedflag ? (_temp1735_a_gzrf1cfh=a_gzrf1cfh,&_temp1735_a_gzrf1cfh) : &a_gzrf1cfh,(LONG)(4000000*cyc_rf1cfh/
					 pw_rf1cfh),
	       (float)thk_rf1cfh,(float)gscale_rf1cfh,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1cfha.fixedflag ? (_temp1736_pw_gzrf1cfha=pw_gzrf1cfha,&_temp1736_pw_gzrf1cfha) : &pw_gzrf1cfha,a_gzrf1cfh,cfhloggrd.tz,
      cfhloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1cfhd.fixedflag ? (_temp1737_pw_gzrf1cfhd=pw_gzrf1cfhd,&_temp1737_pw_gzrf1cfhd) : &pw_gzrf1cfhd,a_gzrf1cfh,cfhloggrd.tz,
	  cfhloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf1cfh  = _ia_gzrf1cfh.fixedflag ?    ((void)((int)(a_gzrf1cfh*MAX_PG_IAMP/cfhloggrd.tz)), ia_gzrf1cfh) : (int)(a_gzrf1cfh*MAX_PG_IAMP/cfhloggrd.tz);
			      
  ia_rf1cfh  = _ia_rf1cfh.fixedflag ?    ((void)((int)(a_rf1cfh*MAX_PG_IAMP)), ia_rf1cfh) : (int)(a_rf1cfh*MAX_PG_IAMP);
  if (res_rf1cfh == 0)
    res_rf1cfh  = _res_rf1cfh.fixedflag ?  ((void)(pw_rf1cfh/(RF_UPDATE_TIME)), res_rf1cfh) : pw_rf1cfh/(RF_UPDATE_TIME);


{
  float target;
  gettarget(&target,(WF_PROCESSOR)wg_rf2cfh,&cfhloggrd);
  if ((wg_rf2cfh==TYPRHO1)||(wg_rf2cfh==TYPRHO2)
        ||(wg_rf2cfh==TYPOMEGA)||(wg_rf2cfh==TYPTHETA))
    {
      if (res_rf2cfh == 0)
        {
          res_rf2cfh  = _res_rf2cfh.fixedflag ?  ((void)(pw_rf2cfh/(RF_UPDATE_TIME)), res_rf2cfh) : pw_rf2cfh/(RF_UPDATE_TIME);
        }
      ia_rf2cfh  = _ia_rf2cfh.fixedflag ?    ((void)((int)(a_rf2cfh*MAX_PG_IAMP)), ia_rf2cfh) : (int)(a_rf2cfh*MAX_PG_IAMP);
    }    
  else
    {
      if (res_rf2cfh == 0)
        {
          res_rf2cfh  = _res_rf2cfh.fixedflag ?  ((void)(pw_rf2cfh/(GRAD_UPDATE_TIME)), res_rf2cfh) : pw_rf2cfh/(GRAD_UPDATE_TIME);
        }
      ia_rf2cfh  = _ia_rf2cfh.fixedflag ?     ((void)((int)((a_rf2cfh/target)*MAX_PG_IAMP)), ia_rf2cfh) : (int)((a_rf2cfh/target)*MAX_PG_IAMP);
    }    
}

{
  float target;
  gettarget(&target,(WF_PROCESSOR)wg_rf3cfh,&cfhloggrd);
  if ((wg_rf3cfh==TYPRHO1)||(wg_rf3cfh==TYPRHO2)
        ||(wg_rf3cfh==TYPOMEGA)||(wg_rf3cfh==TYPTHETA))
    {
      if (res_rf3cfh == 0)
        {
          res_rf3cfh  = _res_rf3cfh.fixedflag ?  ((void)(pw_rf3cfh/(RF_UPDATE_TIME)), res_rf3cfh) : pw_rf3cfh/(RF_UPDATE_TIME);
        }
      ia_rf3cfh  = _ia_rf3cfh.fixedflag ?    ((void)((int)(a_rf3cfh*MAX_PG_IAMP)), ia_rf3cfh) : (int)(a_rf3cfh*MAX_PG_IAMP);
    }    
  else
    {
      if (res_rf3cfh == 0)
        {
          res_rf3cfh  = _res_rf3cfh.fixedflag ?  ((void)(pw_rf3cfh/(GRAD_UPDATE_TIME)), res_rf3cfh) : pw_rf3cfh/(GRAD_UPDATE_TIME);
        }
      ia_rf3cfh  = _ia_rf3cfh.fixedflag ?     ((void)((int)((a_rf3cfh/target)*MAX_PG_IAMP)), ia_rf3cfh) : (int)((a_rf3cfh/target)*MAX_PG_IAMP);
    }    
}

{
  float target;
  gettarget(&target,(WF_PROCESSOR)wg_rf4cfh,&loggrd);
  if ((wg_rf4cfh==TYPRHO1)||(wg_rf4cfh==TYPRHO2)
        ||(wg_rf4cfh==TYPOMEGA)||(wg_rf4cfh==TYPTHETA))
    {
      if (res_rf4cfh == 0)
        {
          res_rf4cfh  = _res_rf4cfh.fixedflag ?  ((void)(pw_rf4cfh/(RF_UPDATE_TIME)), res_rf4cfh) : pw_rf4cfh/(RF_UPDATE_TIME);
        }
      ia_rf4cfh  = _ia_rf4cfh.fixedflag ?    ((void)((int)(a_rf4cfh*MAX_PG_IAMP)), ia_rf4cfh) : (int)(a_rf4cfh*MAX_PG_IAMP);
    }    
  else
    {
      if (res_rf4cfh == 0)
        {
          res_rf4cfh  = _res_rf4cfh.fixedflag ?  ((void)(pw_rf4cfh/(GRAD_UPDATE_TIME)), res_rf4cfh) : pw_rf4cfh/(GRAD_UPDATE_TIME);
        }
      ia_rf4cfh  = _ia_rf4cfh.fixedflag ?     ((void)((int)((a_rf4cfh/target)*MAX_PG_IAMP)), ia_rf4cfh) : (int)((a_rf4cfh/target)*MAX_PG_IAMP);
    }    
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxrf2cfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxrf2cfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxrf2cfh.fixedflag ? (_temp1738_a_gxrf2cfh=a_gxrf2cfh,&_temp1738_a_gxrf2cfh) : &a_gxrf2cfh, _pw_gxrf2cfha.fixedflag ? (_temp1739_pw_gxrf2cfha=pw_gxrf2cfha,&_temp1739_pw_gxrf2cfha) : &pw_gxrf2cfha, _pw_gxrf2cfh.fixedflag ? (_temp1740_pw_gxrf2cfh=pw_gxrf2cfh,&_temp1740_pw_gxrf2cfh) : &pw_gxrf2cfh,
                      _pw_gxrf2cfhd.fixedflag ? (_temp1741_pw_gxrf2cfhd=pw_gxrf2cfhd,&_temp1741_pw_gxrf2cfhd) : &pw_gxrf2cfhd) == FAILURE)
            return FAILURE;
    }

    ia_gxrf2cfh  = _ia_gxrf2cfh.fixedflag ?     ((void)((int)((a_gxrf2cfh/target)*MAX_PG_IAMP)), ia_gxrf2cfh) : (int)((a_gxrf2cfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf2cfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf2cfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf2cfh.fixedflag ? (_temp1742_a_gyrf2cfh=a_gyrf2cfh,&_temp1742_a_gyrf2cfh) : &a_gyrf2cfh, _pw_gyrf2cfha.fixedflag ? (_temp1743_pw_gyrf2cfha=pw_gyrf2cfha,&_temp1743_pw_gyrf2cfha) : &pw_gyrf2cfha, _pw_gyrf2cfh.fixedflag ? (_temp1744_pw_gyrf2cfh=pw_gyrf2cfh,&_temp1744_pw_gyrf2cfh) : &pw_gyrf2cfh,
                      _pw_gyrf2cfhd.fixedflag ? (_temp1745_pw_gyrf2cfhd=pw_gyrf2cfhd,&_temp1745_pw_gyrf2cfhd) : &pw_gyrf2cfhd) == FAILURE)
            return FAILURE;
    }

    ia_gyrf2cfh  = _ia_gyrf2cfh.fixedflag ?     ((void)((int)((a_gyrf2cfh/target)*MAX_PG_IAMP)), ia_gyrf2cfh) : (int)((a_gyrf2cfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2lcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2lcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2lcfh.fixedflag ? (_temp1746_a_gzrf2lcfh=a_gzrf2lcfh,&_temp1746_a_gzrf2lcfh) : &a_gzrf2lcfh, _pw_gzrf2lcfha.fixedflag ? (_temp1747_pw_gzrf2lcfha=pw_gzrf2lcfha,&_temp1747_pw_gzrf2lcfha) : &pw_gzrf2lcfha, _pw_gzrf2lcfh.fixedflag ? (_temp1748_pw_gzrf2lcfh=pw_gzrf2lcfh,&_temp1748_pw_gzrf2lcfh) : &pw_gzrf2lcfh,
                      _pw_gzrf2lcfhd.fixedflag ? (_temp1749_pw_gzrf2lcfhd=pw_gzrf2lcfhd,&_temp1749_pw_gzrf2lcfhd) : &pw_gzrf2lcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2lcfh  = _ia_gzrf2lcfh.fixedflag ?     ((void)((int)((a_gzrf2lcfh/target)*MAX_PG_IAMP)), ia_gzrf2lcfh) : (int)((a_gzrf2lcfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf2rcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf2rcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf2rcfh.fixedflag ? (_temp1750_a_gzrf2rcfh=a_gzrf2rcfh,&_temp1750_a_gzrf2rcfh) : &a_gzrf2rcfh, _pw_gzrf2rcfha.fixedflag ? (_temp1751_pw_gzrf2rcfha=pw_gzrf2rcfha,&_temp1751_pw_gzrf2rcfha) : &pw_gzrf2rcfha, _pw_gzrf2rcfh.fixedflag ? (_temp1752_pw_gzrf2rcfh=pw_gzrf2rcfh,&_temp1752_pw_gzrf2rcfh) : &pw_gzrf2rcfh,
                      _pw_gzrf2rcfhd.fixedflag ? (_temp1753_pw_gzrf2rcfhd=pw_gzrf2rcfhd,&_temp1753_pw_gzrf2rcfhd) : &pw_gzrf2rcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf2rcfh  = _ia_gzrf2rcfh.fixedflag ?     ((void)((int)((a_gzrf2rcfh/target)*MAX_PG_IAMP)), ia_gzrf2rcfh) : (int)((a_gzrf2rcfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf3cfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf3cfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf3cfh.fixedflag ? (_temp1754_a_gyrf3cfh=a_gyrf3cfh,&_temp1754_a_gyrf3cfh) : &a_gyrf3cfh, _pw_gyrf3cfha.fixedflag ? (_temp1755_pw_gyrf3cfha=pw_gyrf3cfha,&_temp1755_pw_gyrf3cfha) : &pw_gyrf3cfha, _pw_gyrf3cfh.fixedflag ? (_temp1756_pw_gyrf3cfh=pw_gyrf3cfh,&_temp1756_pw_gyrf3cfh) : &pw_gyrf3cfh,
                      _pw_gyrf3cfhd.fixedflag ? (_temp1757_pw_gyrf3cfhd=pw_gyrf3cfhd,&_temp1757_pw_gyrf3cfhd) : &pw_gyrf3cfhd) == FAILURE)
            return FAILURE;
    }

    ia_gyrf3cfh  = _ia_gyrf3cfh.fixedflag ?     ((void)((int)((a_gyrf3cfh/target)*MAX_PG_IAMP)), ia_gyrf3cfh) : (int)((a_gyrf3cfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf3lcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf3lcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf3lcfh.fixedflag ? (_temp1758_a_gzrf3lcfh=a_gzrf3lcfh,&_temp1758_a_gzrf3lcfh) : &a_gzrf3lcfh, _pw_gzrf3lcfha.fixedflag ? (_temp1759_pw_gzrf3lcfha=pw_gzrf3lcfha,&_temp1759_pw_gzrf3lcfha) : &pw_gzrf3lcfha, _pw_gzrf3lcfh.fixedflag ? (_temp1760_pw_gzrf3lcfh=pw_gzrf3lcfh,&_temp1760_pw_gzrf3lcfh) : &pw_gzrf3lcfh,
                      _pw_gzrf3lcfhd.fixedflag ? (_temp1761_pw_gzrf3lcfhd=pw_gzrf3lcfhd,&_temp1761_pw_gzrf3lcfhd) : &pw_gzrf3lcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf3lcfh  = _ia_gzrf3lcfh.fixedflag ?     ((void)((int)((a_gzrf3lcfh/target)*MAX_PG_IAMP)), ia_gzrf3lcfh) : (int)((a_gzrf3lcfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf3rcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf3rcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf3rcfh.fixedflag ? (_temp1762_a_gzrf3rcfh=a_gzrf3rcfh,&_temp1762_a_gzrf3rcfh) : &a_gzrf3rcfh, _pw_gzrf3rcfha.fixedflag ? (_temp1763_pw_gzrf3rcfha=pw_gzrf3rcfha,&_temp1763_pw_gzrf3rcfha) : &pw_gzrf3rcfha, _pw_gzrf3rcfh.fixedflag ? (_temp1764_pw_gzrf3rcfh=pw_gzrf3rcfh,&_temp1764_pw_gzrf3rcfh) : &pw_gzrf3rcfh,
                      _pw_gzrf3rcfhd.fixedflag ? (_temp1765_pw_gzrf3rcfhd=pw_gzrf3rcfhd,&_temp1765_pw_gzrf3rcfhd) : &pw_gzrf3rcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf3rcfh  = _ia_gzrf3rcfh.fixedflag ?     ((void)((int)((a_gzrf3rcfh/target)*MAX_PG_IAMP)), ia_gzrf3rcfh) : (int)((a_gzrf3rcfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gy1cfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1cfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gy1cfh.fixedflag ? (_temp1766_a_gy1cfh=a_gy1cfh,&_temp1766_a_gy1cfh) : &a_gy1cfh, _pw_gy1cfha.fixedflag ? (_temp1767_pw_gy1cfha=pw_gy1cfha,&_temp1767_pw_gy1cfha) : &pw_gy1cfha, _pw_gy1cfh.fixedflag ? (_temp1768_pw_gy1cfh=pw_gy1cfh,&_temp1768_pw_gy1cfh) : &pw_gy1cfh,
                      _pw_gy1cfhd.fixedflag ? (_temp1769_pw_gy1cfhd=pw_gy1cfhd,&_temp1769_pw_gy1cfhd) : &pw_gy1cfhd) == FAILURE)
            return FAILURE;
    }

    ia_gy1cfh  = _ia_gy1cfh.fixedflag ?     ((void)((int)((a_gy1cfh/target)*MAX_PG_IAMP)), ia_gy1cfh) : (int)((a_gy1cfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1cfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1cfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1cfh.fixedflag ? (_temp1770_a_gx1cfh=a_gx1cfh,&_temp1770_a_gx1cfh) : &a_gx1cfh, _pw_gx1cfha.fixedflag ? (_temp1771_pw_gx1cfha=pw_gx1cfha,&_temp1771_pw_gx1cfha) : &pw_gx1cfha, _pw_gx1cfh.fixedflag ? (_temp1772_pw_gx1cfh=pw_gx1cfh,&_temp1772_pw_gx1cfh) : &pw_gx1cfh,
                      _pw_gx1cfhd.fixedflag ? (_temp1773_pw_gx1cfhd=pw_gx1cfhd,&_temp1773_pw_gx1cfhd) : &pw_gx1cfhd) == FAILURE)
            return FAILURE;
    }

    ia_gx1cfh  = _ia_gx1cfh.fixedflag ?     ((void)((int)((a_gx1cfh/target)*MAX_PG_IAMP)), ia_gx1cfh) : (int)((a_gx1cfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf4cfh, &loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf4cfh, &loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf4cfh.fixedflag ? (_temp1774_a_gzrf4cfh=a_gzrf4cfh,&_temp1774_a_gzrf4cfh) : &a_gzrf4cfh, _pw_gzrf4cfha.fixedflag ? (_temp1775_pw_gzrf4cfha=pw_gzrf4cfha,&_temp1775_pw_gzrf4cfha) : &pw_gzrf4cfha, _pw_gzrf4cfh.fixedflag ? (_temp1776_pw_gzrf4cfh=pw_gzrf4cfh,&_temp1776_pw_gzrf4cfh) : &pw_gzrf4cfh,
                      _pw_gzrf4cfhd.fixedflag ? (_temp1777_pw_gzrf4cfhd=pw_gzrf4cfhd,&_temp1777_pw_gzrf4cfhd) : &pw_gzrf4cfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf4cfh  = _ia_gzrf4cfh.fixedflag ?     ((void)((int)((a_gzrf4cfh/target)*MAX_PG_IAMP)), ia_gzrf4cfh) : (int)((a_gzrf4cfh/target)*MAX_PG_IAMP);
}





{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf4lcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf4lcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf4lcfh.fixedflag ? (_temp1778_a_gzrf4lcfh=a_gzrf4lcfh,&_temp1778_a_gzrf4lcfh) : &a_gzrf4lcfh, _pw_gzrf4lcfha.fixedflag ? (_temp1779_pw_gzrf4lcfha=pw_gzrf4lcfha,&_temp1779_pw_gzrf4lcfha) : &pw_gzrf4lcfha, _pw_gzrf4lcfh.fixedflag ? (_temp1780_pw_gzrf4lcfh=pw_gzrf4lcfh,&_temp1780_pw_gzrf4lcfh) : &pw_gzrf4lcfh,
                      _pw_gzrf4lcfhd.fixedflag ? (_temp1781_pw_gzrf4lcfhd=pw_gzrf4lcfhd,&_temp1781_pw_gzrf4lcfhd) : &pw_gzrf4lcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf4lcfh  = _ia_gzrf4lcfh.fixedflag ?     ((void)((int)((a_gzrf4lcfh/target)*MAX_PG_IAMP)), ia_gzrf4lcfh) : (int)((a_gzrf4lcfh/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf4rcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf4rcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf4rcfh.fixedflag ? (_temp1782_a_gzrf4rcfh=a_gzrf4rcfh,&_temp1782_a_gzrf4rcfh) : &a_gzrf4rcfh, _pw_gzrf4rcfha.fixedflag ? (_temp1783_pw_gzrf4rcfha=pw_gzrf4rcfha,&_temp1783_pw_gzrf4rcfha) : &pw_gzrf4rcfha, _pw_gzrf4rcfh.fixedflag ? (_temp1784_pw_gzrf4rcfh=pw_gzrf4rcfh,&_temp1784_pw_gzrf4rcfh) : &pw_gzrf4rcfh,
                      _pw_gzrf4rcfhd.fixedflag ? (_temp1785_pw_gzrf4rcfhd=pw_gzrf4rcfhd,&_temp1785_pw_gzrf4rcfhd) : &pw_gzrf4rcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf4rcfh  = _ia_gzrf4rcfh.fixedflag ?     ((void)((int)((a_gzrf4rcfh/target)*MAX_PG_IAMP)), ia_gzrf4rcfh) : (int)((a_gzrf4rcfh/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykcfh, &cfhloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykcfh, &cfhloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykcfh.fixedflag ? (_temp1786_a_gykcfh=a_gykcfh,&_temp1786_a_gykcfh) : &a_gykcfh, _pw_gykcfha.fixedflag ? (_temp1787_pw_gykcfha=pw_gykcfha,&_temp1787_pw_gykcfha) : &pw_gykcfha, _pw_gykcfh.fixedflag ? (_temp1788_pw_gykcfh=pw_gykcfh,&_temp1788_pw_gykcfh) : &pw_gykcfh,
                      _pw_gykcfhd.fixedflag ? (_temp1789_pw_gykcfhd=pw_gykcfhd,&_temp1789_pw_gykcfhd) : &pw_gykcfhd) == FAILURE)
            return FAILURE;
    }

    ia_gykcfh  = _ia_gykcfh.fixedflag ?     ((void)((int)((a_gykcfh/target)*MAX_PG_IAMP)), ia_gykcfh) : (int)((a_gykcfh/target)*MAX_PG_IAMP);
}








  if (ampslice(_a_gzrf1ftg.fixedflag ? (_temp1790_a_gzrf1ftg=a_gzrf1ftg,&_temp1790_a_gzrf1ftg) : &a_gzrf1ftg,(LONG)(4000000*cyc_rf1ftg/
					 pw_rf1ftg),
	       (float)thk_rf1ftg,(float)gscale_rf1ftg,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1ftga.fixedflag ? (_temp1791_pw_gzrf1ftga=pw_gzrf1ftga,&_temp1791_pw_gzrf1ftga) : &pw_gzrf1ftga,a_gzrf1ftg,ps1loggrd.tz,
      ps1loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1ftgd.fixedflag ? (_temp1792_pw_gzrf1ftgd=pw_gzrf1ftgd,&_temp1792_pw_gzrf1ftgd) : &pw_gzrf1ftgd,a_gzrf1ftg,ps1loggrd.tz,
	  ps1loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf1ftg  = _ia_gzrf1ftg.fixedflag ?    ((void)((int)(a_gzrf1ftg*MAX_PG_IAMP/ps1loggrd.tz)), ia_gzrf1ftg) : (int)(a_gzrf1ftg*MAX_PG_IAMP/ps1loggrd.tz);
			      
  ia_rf1ftg  = _ia_rf1ftg.fixedflag ?    ((void)((int)(a_rf1ftg*MAX_PG_IAMP)), ia_rf1ftg) : (int)(a_rf1ftg*MAX_PG_IAMP);
  if (res_rf1ftg == 0)
    res_rf1ftg  = _res_rf1ftg.fixedflag ?  ((void)(pw_rf1ftg/(RF_UPDATE_TIME)), res_rf1ftg) : pw_rf1ftg/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1ftg.fixedflag ? (_temp1793_a_gz1ftg=a_gz1ftg,&_temp1793_a_gz1ftg) : &a_gz1ftg, _pw_gz1ftga.fixedflag ? (_temp1794_pw_gz1ftga=pw_gz1ftga,&_temp1794_pw_gz1ftga) : &pw_gz1ftga, _pw_gz1ftg.fixedflag ? (_temp1795_pw_gz1ftg=pw_gz1ftg,&_temp1795_pw_gz1ftg) : &pw_gz1ftg,
                      _pw_gz1ftgd.fixedflag ? (_temp1796_pw_gz1ftgd=pw_gz1ftgd,&_temp1796_pw_gz1ftgd) : &pw_gz1ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gz1ftg  = _ia_gz1ftg.fixedflag ?     ((void)((int)((a_gz1ftg/target)*MAX_PG_IAMP)), ia_gz1ftg) : (int)((a_gz1ftg/target)*MAX_PG_IAMP);
}

  if (ampslice(_a_gzrf2ftg.fixedflag ? (_temp1797_a_gzrf2ftg=a_gzrf2ftg,&_temp1797_a_gzrf2ftg) : &a_gzrf2ftg,(LONG)(4000000*cyc_rf2ftg/
					 pw_rf2ftg),
	       (float)thk_rf2ftg,(float)gscale_rf2ftg,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2ftga.fixedflag ? (_temp1798_pw_gzrf2ftga=pw_gzrf2ftga,&_temp1798_pw_gzrf2ftga) : &pw_gzrf2ftga,a_gzrf2ftg,ps1loggrd.tz,
      ps1loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2ftgd.fixedflag ? (_temp1799_pw_gzrf2ftgd=pw_gzrf2ftgd,&_temp1799_pw_gzrf2ftgd) : &pw_gzrf2ftgd,a_gzrf2ftg,ps1loggrd.tz,
	  ps1loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf2ftg  = _ia_gzrf2ftg.fixedflag ?    ((void)((int)(a_gzrf2ftg*MAX_PG_IAMP/ps1loggrd.tz)), ia_gzrf2ftg) : (int)(a_gzrf2ftg*MAX_PG_IAMP/ps1loggrd.tz);
			      
  ia_rf2ftg  = _ia_rf2ftg.fixedflag ?    ((void)((int)(a_rf2ftg*MAX_PG_IAMP)), ia_rf2ftg) : (int)(a_rf2ftg*MAX_PG_IAMP);
  if (res_rf2ftg == 0)
    res_rf2ftg  = _res_rf2ftg.fixedflag ?  ((void)(pw_rf2ftg/(RF_UPDATE_TIME)), res_rf2ftg) : pw_rf2ftg/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz2ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz2ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz2ftg.fixedflag ? (_temp1800_a_gz2ftg=a_gz2ftg,&_temp1800_a_gz2ftg) : &a_gz2ftg, _pw_gz2ftga.fixedflag ? (_temp1801_pw_gz2ftga=pw_gz2ftga,&_temp1801_pw_gz2ftga) : &pw_gz2ftga, _pw_gz2ftg.fixedflag ? (_temp1802_pw_gz2ftg=pw_gz2ftg,&_temp1802_pw_gz2ftg) : &pw_gz2ftg,
                      _pw_gz2ftgd.fixedflag ? (_temp1803_pw_gz2ftgd=pw_gz2ftgd,&_temp1803_pw_gz2ftgd) : &pw_gz2ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gz2ftg  = _ia_gz2ftg.fixedflag ?     ((void)((int)((a_gz2ftg/target)*MAX_PG_IAMP)), ia_gz2ftg) : (int)((a_gz2ftg/target)*MAX_PG_IAMP);
}

  if (ampslice(_a_gzrf3ftg.fixedflag ? (_temp1804_a_gzrf3ftg=a_gzrf3ftg,&_temp1804_a_gzrf3ftg) : &a_gzrf3ftg,(LONG)(4000000*cyc_rf3ftg/
					 pw_rf3ftg),
	       (float)thk_rf3ftg,(float)gscale_rf3ftg,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf3ftga.fixedflag ? (_temp1805_pw_gzrf3ftga=pw_gzrf3ftga,&_temp1805_pw_gzrf3ftga) : &pw_gzrf3ftga,a_gzrf3ftg,ps1loggrd.tz,
      ps1loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf3ftgd.fixedflag ? (_temp1806_pw_gzrf3ftgd=pw_gzrf3ftgd,&_temp1806_pw_gzrf3ftgd) : &pw_gzrf3ftgd,a_gzrf3ftg,ps1loggrd.tz,
	  ps1loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf3ftg  = _ia_gzrf3ftg.fixedflag ?    ((void)((int)(a_gzrf3ftg*MAX_PG_IAMP/ps1loggrd.tz)), ia_gzrf3ftg) : (int)(a_gzrf3ftg*MAX_PG_IAMP/ps1loggrd.tz);
			      
  ia_rf3ftg  = _ia_rf3ftg.fixedflag ?    ((void)((int)(a_rf3ftg*MAX_PG_IAMP)), ia_rf3ftg) : (int)(a_rf3ftg*MAX_PG_IAMP);
  if (res_rf3ftg == 0)
    res_rf3ftg  = _res_rf3ftg.fixedflag ?  ((void)(pw_rf3ftg/(RF_UPDATE_TIME)), res_rf3ftg) : pw_rf3ftg/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz3ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz3ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz3ftg.fixedflag ? (_temp1807_a_gz3ftg=a_gz3ftg,&_temp1807_a_gz3ftg) : &a_gz3ftg, _pw_gz3ftga.fixedflag ? (_temp1808_pw_gz3ftga=pw_gz3ftga,&_temp1808_pw_gz3ftga) : &pw_gz3ftga, _pw_gz3ftg.fixedflag ? (_temp1809_pw_gz3ftg=pw_gz3ftg,&_temp1809_pw_gz3ftg) : &pw_gz3ftg,
                      _pw_gz3ftgd.fixedflag ? (_temp1810_pw_gz3ftgd=pw_gz3ftgd,&_temp1810_pw_gz3ftgd) : &pw_gz3ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gz3ftg  = _ia_gz3ftg.fixedflag ?     ((void)((int)((a_gz3ftg/target)*MAX_PG_IAMP)), ia_gz3ftg) : (int)((a_gz3ftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1ftg.fixedflag ? (_temp1811_a_gx1ftg=a_gx1ftg,&_temp1811_a_gx1ftg) : &a_gx1ftg, _pw_gx1ftga.fixedflag ? (_temp1812_pw_gx1ftga=pw_gx1ftga,&_temp1812_pw_gx1ftga) : &pw_gx1ftga, _pw_gx1ftg.fixedflag ? (_temp1813_pw_gx1ftg=pw_gx1ftg,&_temp1813_pw_gx1ftg) : &pw_gx1ftg,
                      _pw_gx1ftgd.fixedflag ? (_temp1814_pw_gx1ftgd=pw_gx1ftgd,&_temp1814_pw_gx1ftgd) : &pw_gx1ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gx1ftg  = _ia_gx1ftg.fixedflag ?     ((void)((int)((a_gx1ftg/target)*MAX_PG_IAMP)), ia_gx1ftg) : (int)((a_gx1ftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1bftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1bftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1bftg.fixedflag ? (_temp1815_a_gx1bftg=a_gx1bftg,&_temp1815_a_gx1bftg) : &a_gx1bftg, _pw_gx1bftga.fixedflag ? (_temp1816_pw_gx1bftga=pw_gx1bftga,&_temp1816_pw_gx1bftga) : &pw_gx1bftga, _pw_gx1bftg.fixedflag ? (_temp1817_pw_gx1bftg=pw_gx1bftg,&_temp1817_pw_gx1bftg) : &pw_gx1bftg,
                      _pw_gx1bftgd.fixedflag ? (_temp1818_pw_gx1bftgd=pw_gx1bftgd,&_temp1818_pw_gx1bftgd) : &pw_gx1bftgd) == FAILURE)
            return FAILURE;
    }

    ia_gx1bftg  = _ia_gx1bftg.fixedflag ?     ((void)((int)((a_gx1bftg/target)*MAX_PG_IAMP)), ia_gx1bftg) : (int)((a_gx1bftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxw1ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxw1ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxw1ftg.fixedflag ? (_temp1819_a_gxw1ftg=a_gxw1ftg,&_temp1819_a_gxw1ftg) : &a_gxw1ftg, _pw_gxw1ftga.fixedflag ? (_temp1820_pw_gxw1ftga=pw_gxw1ftga,&_temp1820_pw_gxw1ftga) : &pw_gxw1ftga, _pw_gxw1ftg.fixedflag ? (_temp1821_pw_gxw1ftg=pw_gxw1ftg,&_temp1821_pw_gxw1ftg) : &pw_gxw1ftg,
                      _pw_gxw1ftgd.fixedflag ? (_temp1822_pw_gxw1ftgd=pw_gxw1ftgd,&_temp1822_pw_gxw1ftgd) : &pw_gxw1ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gxw1ftg  = _ia_gxw1ftg.fixedflag ?     ((void)((int)((a_gxw1ftg/target)*MAX_PG_IAMP)), ia_gxw1ftg) : (int)((a_gxw1ftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_postgxw1ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_postgxw1ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_postgxw1ftg.fixedflag ? (_temp1823_a_postgxw1ftg=a_postgxw1ftg,&_temp1823_a_postgxw1ftg) : &a_postgxw1ftg, _pw_postgxw1ftga.fixedflag ? (_temp1824_pw_postgxw1ftga=pw_postgxw1ftga,&_temp1824_pw_postgxw1ftga) : &pw_postgxw1ftga, _pw_postgxw1ftg.fixedflag ? (_temp1825_pw_postgxw1ftg=pw_postgxw1ftg,&_temp1825_pw_postgxw1ftg) : &pw_postgxw1ftg,
                      _pw_postgxw1ftgd.fixedflag ? (_temp1826_pw_postgxw1ftgd=pw_postgxw1ftgd,&_temp1826_pw_postgxw1ftgd) : &pw_postgxw1ftgd) == FAILURE)
            return FAILURE;
    }

    ia_postgxw1ftg  = _ia_postgxw1ftg.fixedflag ?     ((void)((int)((a_postgxw1ftg/target)*MAX_PG_IAMP)), ia_postgxw1ftg) : (int)((a_postgxw1ftg/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz2bftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz2bftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz2bftg.fixedflag ? (_temp1827_a_gz2bftg=a_gz2bftg,&_temp1827_a_gz2bftg) : &a_gz2bftg, _pw_gz2bftga.fixedflag ? (_temp1828_pw_gz2bftga=pw_gz2bftga,&_temp1828_pw_gz2bftga) : &pw_gz2bftga, _pw_gz2bftg.fixedflag ? (_temp1829_pw_gz2bftg=pw_gz2bftg,&_temp1829_pw_gz2bftg) : &pw_gz2bftg,
                      _pw_gz2bftgd.fixedflag ? (_temp1830_pw_gz2bftgd=pw_gz2bftgd,&_temp1830_pw_gz2bftgd) : &pw_gz2bftgd) == FAILURE)
            return FAILURE;
    }

    ia_gz2bftg  = _ia_gz2bftg.fixedflag ?     ((void)((int)((a_gz2bftg/target)*MAX_PG_IAMP)), ia_gz2bftg) : (int)((a_gz2bftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx2ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx2ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx2ftg.fixedflag ? (_temp1831_a_gx2ftg=a_gx2ftg,&_temp1831_a_gx2ftg) : &a_gx2ftg, _pw_gx2ftga.fixedflag ? (_temp1832_pw_gx2ftga=pw_gx2ftga,&_temp1832_pw_gx2ftga) : &pw_gx2ftga, _pw_gx2ftg.fixedflag ? (_temp1833_pw_gx2ftg=pw_gx2ftg,&_temp1833_pw_gx2ftg) : &pw_gx2ftg,
                      _pw_gx2ftgd.fixedflag ? (_temp1834_pw_gx2ftgd=pw_gx2ftgd,&_temp1834_pw_gx2ftgd) : &pw_gx2ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gx2ftg  = _ia_gx2ftg.fixedflag ?     ((void)((int)((a_gx2ftg/target)*MAX_PG_IAMP)), ia_gx2ftg) : (int)((a_gx2ftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxw2ftg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxw2ftg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxw2ftg.fixedflag ? (_temp1835_a_gxw2ftg=a_gxw2ftg,&_temp1835_a_gxw2ftg) : &a_gxw2ftg, _pw_gxw2ftga.fixedflag ? (_temp1836_pw_gxw2ftga=pw_gxw2ftga,&_temp1836_pw_gxw2ftga) : &pw_gxw2ftga, _pw_gxw2ftg.fixedflag ? (_temp1837_pw_gxw2ftg=pw_gxw2ftg,&_temp1837_pw_gxw2ftg) : &pw_gxw2ftg,
                      _pw_gxw2ftgd.fixedflag ? (_temp1838_pw_gxw2ftgd=pw_gxw2ftgd,&_temp1838_pw_gxw2ftgd) : &pw_gxw2ftgd) == FAILURE)
            return FAILURE;
    }

    ia_gxw2ftg  = _ia_gxw2ftg.fixedflag ?     ((void)((int)((a_gxw2ftg/target)*MAX_PG_IAMP)), ia_gxw2ftg) : (int)((a_gxw2ftg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx2test, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx2test, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx2test.fixedflag ? (_temp1839_a_gx2test=a_gx2test,&_temp1839_a_gx2test) : &a_gx2test, _pw_gx2testa.fixedflag ? (_temp1840_pw_gx2testa=pw_gx2testa,&_temp1840_pw_gx2testa) : &pw_gx2testa, _pw_gx2test.fixedflag ? (_temp1841_pw_gx2test=pw_gx2test,&_temp1841_pw_gx2test) : &pw_gx2test,
                      _pw_gx2testd.fixedflag ? (_temp1842_pw_gx2testd=pw_gx2testd,&_temp1842_pw_gx2testd) : &pw_gx2testd) == FAILURE)
            return FAILURE;
    }

    ia_gx2test  = _ia_gx2test.fixedflag ?     ((void)((int)((a_gx2test/target)*MAX_PG_IAMP)), ia_gx2test) : (int)((a_gx2test/target)*MAX_PG_IAMP);
}



{
  float target;
  gettarget(&target,(WF_PROCESSOR)wg_rf1xtg,&ps1loggrd);
  if ((wg_rf1xtg==TYPRHO1)||(wg_rf1xtg==TYPRHO2)
        ||(wg_rf1xtg==TYPOMEGA)||(wg_rf1xtg==TYPTHETA))
    {
      if (res_rf1xtg == 0)
        {
          res_rf1xtg  = _res_rf1xtg.fixedflag ?  ((void)(pw_rf1xtg/(RF_UPDATE_TIME)), res_rf1xtg) : pw_rf1xtg/(RF_UPDATE_TIME);
        }
      ia_rf1xtg  = _ia_rf1xtg.fixedflag ?    ((void)((int)(a_rf1xtg*MAX_PG_IAMP)), ia_rf1xtg) : (int)(a_rf1xtg*MAX_PG_IAMP);
    }    
  else
    {
      if (res_rf1xtg == 0)
        {
          res_rf1xtg  = _res_rf1xtg.fixedflag ?  ((void)(pw_rf1xtg/(GRAD_UPDATE_TIME)), res_rf1xtg) : pw_rf1xtg/(GRAD_UPDATE_TIME);
        }
      ia_rf1xtg  = _ia_rf1xtg.fixedflag ?     ((void)((int)((a_rf1xtg/target)*MAX_PG_IAMP)), ia_rf1xtg) : (int)((a_rf1xtg/target)*MAX_PG_IAMP);
    }    
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf1xtg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf1xtg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf1xtg.fixedflag ? (_temp1843_a_gyrf1xtg=a_gyrf1xtg,&_temp1843_a_gyrf1xtg) : &a_gyrf1xtg, _pw_gyrf1xtga.fixedflag ? (_temp1844_pw_gyrf1xtga=pw_gyrf1xtga,&_temp1844_pw_gyrf1xtga) : &pw_gyrf1xtga, _pw_gyrf1xtg.fixedflag ? (_temp1845_pw_gyrf1xtg=pw_gyrf1xtg,&_temp1845_pw_gyrf1xtg) : &pw_gyrf1xtg,
                      _pw_gyrf1xtgd.fixedflag ? (_temp1846_pw_gyrf1xtgd=pw_gyrf1xtgd,&_temp1846_pw_gyrf1xtgd) : &pw_gyrf1xtgd) == FAILURE)
            return FAILURE;
    }

    ia_gyrf1xtg  = _ia_gyrf1xtg.fixedflag ?     ((void)((int)((a_gyrf1xtg/target)*MAX_PG_IAMP)), ia_gyrf1xtg) : (int)((a_gyrf1xtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf1xtg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf1xtg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf1xtg.fixedflag ? (_temp1847_a_gzrf1xtg=a_gzrf1xtg,&_temp1847_a_gzrf1xtg) : &a_gzrf1xtg, _pw_gzrf1xtga.fixedflag ? (_temp1848_pw_gzrf1xtga=pw_gzrf1xtga,&_temp1848_pw_gzrf1xtga) : &pw_gzrf1xtga, _pw_gzrf1xtg.fixedflag ? (_temp1849_pw_gzrf1xtg=pw_gzrf1xtg,&_temp1849_pw_gzrf1xtg) : &pw_gzrf1xtg,
                      _pw_gzrf1xtgd.fixedflag ? (_temp1850_pw_gzrf1xtgd=pw_gzrf1xtgd,&_temp1850_pw_gzrf1xtgd) : &pw_gzrf1xtgd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf1xtg  = _ia_gzrf1xtg.fixedflag ?     ((void)((int)((a_gzrf1xtg/target)*MAX_PG_IAMP)), ia_gzrf1xtg) : (int)((a_gzrf1xtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykxtgl, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykxtgl, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykxtgl.fixedflag ? (_temp1851_a_gykxtgl=a_gykxtgl,&_temp1851_a_gykxtgl) : &a_gykxtgl, _pw_gykxtgla.fixedflag ? (_temp1852_pw_gykxtgla=pw_gykxtgla,&_temp1852_pw_gykxtgla) : &pw_gykxtgla, _pw_gykxtgl.fixedflag ? (_temp1853_pw_gykxtgl=pw_gykxtgl,&_temp1853_pw_gykxtgl) : &pw_gykxtgl,
                      _pw_gykxtgld.fixedflag ? (_temp1854_pw_gykxtgld=pw_gykxtgld,&_temp1854_pw_gykxtgld) : &pw_gykxtgld) == FAILURE)
            return FAILURE;
    }

    ia_gykxtgl  = _ia_gykxtgl.fixedflag ?     ((void)((int)((a_gykxtgl/target)*MAX_PG_IAMP)), ia_gykxtgl) : (int)((a_gykxtgl/target)*MAX_PG_IAMP);
}


            ia_rf3xtg  = _ia_rf3xtg.fixedflag ?    ((void)((int)(a_rf3xtg*MAX_PG_IAMP)), ia_rf3xtg) : (int)(a_rf3xtg*MAX_PG_IAMP);
            if (res_rf3xtg == 0)
                res_rf3xtg  = _res_rf3xtg.fixedflag ?  ((void)(RES_FERMI_BLS), res_rf3xtg) : RES_FERMI_BLS;

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1xtg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1xtg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1xtg.fixedflag ? (_temp1855_a_gz1xtg=a_gz1xtg,&_temp1855_a_gz1xtg) : &a_gz1xtg, _pw_gz1xtga.fixedflag ? (_temp1856_pw_gz1xtga=pw_gz1xtga,&_temp1856_pw_gz1xtga) : &pw_gz1xtga, _pw_gz1xtg.fixedflag ? (_temp1857_pw_gz1xtg=pw_gz1xtg,&_temp1857_pw_gz1xtg) : &pw_gz1xtg,
                      _pw_gz1xtgd.fixedflag ? (_temp1858_pw_gz1xtgd=pw_gz1xtgd,&_temp1858_pw_gz1xtgd) : &pw_gz1xtgd) == FAILURE)
            return FAILURE;
    }

    ia_gz1xtg  = _ia_gz1xtg.fixedflag ?     ((void)((int)((a_gz1xtg/target)*MAX_PG_IAMP)), ia_gz1xtg) : (int)((a_gz1xtg/target)*MAX_PG_IAMP);
}

  if (ampslice(_a_gzrf2xtg.fixedflag ? (_temp1859_a_gzrf2xtg=a_gzrf2xtg,&_temp1859_a_gzrf2xtg) : &a_gzrf2xtg,(LONG)(4000000*cyc_rf2xtg/
					 pw_rf2xtg),
	       (float)thk_rf2xtg,(float)gscale_rf2xtg,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2xtga.fixedflag ? (_temp1860_pw_gzrf2xtga=pw_gzrf2xtga,&_temp1860_pw_gzrf2xtga) : &pw_gzrf2xtga,a_gzrf2xtg,ps1loggrd.tz,
      ps1loggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf2xtgd.fixedflag ? (_temp1861_pw_gzrf2xtgd=pw_gzrf2xtgd,&_temp1861_pw_gzrf2xtgd) : &pw_gzrf2xtgd,a_gzrf2xtg,ps1loggrd.tz,
	  ps1loggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf2xtg  = _ia_gzrf2xtg.fixedflag ?    ((void)((int)(a_gzrf2xtg*MAX_PG_IAMP/ps1loggrd.tz)), ia_gzrf2xtg) : (int)(a_gzrf2xtg*MAX_PG_IAMP/ps1loggrd.tz);
			      
  ia_rf2xtg  = _ia_rf2xtg.fixedflag ?    ((void)((int)(a_rf2xtg*MAX_PG_IAMP)), ia_rf2xtg) : (int)(a_rf2xtg*MAX_PG_IAMP);
  if (res_rf2xtg == 0)
    res_rf2xtg  = _res_rf2xtg.fixedflag ?  ((void)(pw_rf2xtg/(RF_UPDATE_TIME)), res_rf2xtg) : pw_rf2xtg/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz2xtg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz2xtg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz2xtg.fixedflag ? (_temp1862_a_gz2xtg=a_gz2xtg,&_temp1862_a_gz2xtg) : &a_gz2xtg, _pw_gz2xtga.fixedflag ? (_temp1863_pw_gz2xtga=pw_gz2xtga,&_temp1863_pw_gz2xtga) : &pw_gz2xtga, _pw_gz2xtg.fixedflag ? (_temp1864_pw_gz2xtg=pw_gz2xtg,&_temp1864_pw_gz2xtg) : &pw_gz2xtg,
                      _pw_gz2xtgd.fixedflag ? (_temp1865_pw_gz2xtgd=pw_gz2xtgd,&_temp1865_pw_gz2xtgd) : &pw_gz2xtgd) == FAILURE)
            return FAILURE;
    }

    ia_gz2xtg  = _ia_gz2xtg.fixedflag ?     ((void)((int)((a_gz2xtg/target)*MAX_PG_IAMP)), ia_gz2xtg) : (int)((a_gz2xtg/target)*MAX_PG_IAMP);
}


            ia_rf4xtg  = _ia_rf4xtg.fixedflag ?    ((void)((int)(a_rf4xtg*MAX_PG_IAMP)), ia_rf4xtg) : (int)(a_rf4xtg*MAX_PG_IAMP);
            if (res_rf4xtg == 0)
                res_rf4xtg  = _res_rf4xtg.fixedflag ?  ((void)(RES_FERMI_BLS), res_rf4xtg) : RES_FERMI_BLS;

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gykxtgr, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gykxtgr, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gykxtgr.fixedflag ? (_temp1866_a_gykxtgr=a_gykxtgr,&_temp1866_a_gykxtgr) : &a_gykxtgr, _pw_gykxtgra.fixedflag ? (_temp1867_pw_gykxtgra=pw_gykxtgra,&_temp1867_pw_gykxtgra) : &pw_gykxtgra, _pw_gykxtgr.fixedflag ? (_temp1868_pw_gykxtgr=pw_gykxtgr,&_temp1868_pw_gykxtgr) : &pw_gykxtgr,
                      _pw_gykxtgrd.fixedflag ? (_temp1869_pw_gykxtgrd=pw_gykxtgrd,&_temp1869_pw_gykxtgrd) : &pw_gykxtgrd) == FAILURE)
            return FAILURE;
    }

    ia_gykxtgr  = _ia_gykxtgr.fixedflag ?     ((void)((int)((a_gykxtgr/target)*MAX_PG_IAMP)), ia_gykxtgr) : (int)((a_gykxtgr/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1bxtg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1bxtg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1bxtg.fixedflag ? (_temp1870_a_gx1bxtg=a_gx1bxtg,&_temp1870_a_gx1bxtg) : &a_gx1bxtg, _pw_gx1bxtga.fixedflag ? (_temp1871_pw_gx1bxtga=pw_gx1bxtga,&_temp1871_pw_gx1bxtga) : &pw_gx1bxtga, _pw_gx1bxtg.fixedflag ? (_temp1872_pw_gx1bxtg=pw_gx1bxtg,&_temp1872_pw_gx1bxtg) : &pw_gx1bxtg,
                      _pw_gx1bxtgd.fixedflag ? (_temp1873_pw_gx1bxtgd=pw_gx1bxtgd,&_temp1873_pw_gx1bxtgd) : &pw_gx1bxtgd) == FAILURE)
            return FAILURE;
    }

    ia_gx1bxtg  = _ia_gx1bxtg.fixedflag ?     ((void)((int)((a_gx1bxtg/target)*MAX_PG_IAMP)), ia_gx1bxtg) : (int)((a_gx1bxtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxw1xtg, &ps1loggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxw1xtg, &ps1loggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxw1xtg.fixedflag ? (_temp1874_a_gxw1xtg=a_gxw1xtg,&_temp1874_a_gxw1xtg) : &a_gxw1xtg, _pw_gxw1xtga.fixedflag ? (_temp1875_pw_gxw1xtga=pw_gxw1xtga,&_temp1875_pw_gxw1xtga) : &pw_gxw1xtga, _pw_gxw1xtg.fixedflag ? (_temp1876_pw_gxw1xtg=pw_gxw1xtg,&_temp1876_pw_gxw1xtg) : &pw_gxw1xtg,
                      _pw_gxw1xtgd.fixedflag ? (_temp1877_pw_gxw1xtgd=pw_gxw1xtgd,&_temp1877_pw_gxw1xtgd) : &pw_gxw1xtgd) == FAILURE)
            return FAILURE;
    }

    ia_gxw1xtg  = _ia_gxw1xtg.fixedflag ?     ((void)((int)((a_gxw1xtg/target)*MAX_PG_IAMP)), ia_gxw1xtg) : (int)((a_gxw1xtg/target)*MAX_PG_IAMP);
}



  if (ampslice(_a_gzrf1as.fixedflag ? (_temp1878_a_gzrf1as=a_gzrf1as,&_temp1878_a_gzrf1as) : &a_gzrf1as,(LONG)(4000000*cyc_rf1as/
					 pw_rf1as),
	       (float)thk_rf1as,(float)gscale_rf1as,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1asa.fixedflag ? (_temp1879_pw_gzrf1asa=pw_gzrf1asa,&_temp1879_pw_gzrf1asa) : &pw_gzrf1asa,a_gzrf1as,asloggrd.tz,
      asloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1asd.fixedflag ? (_temp1880_pw_gzrf1asd=pw_gzrf1asd,&_temp1880_pw_gzrf1asd) : &pw_gzrf1asd,a_gzrf1as,asloggrd.tz,
	  asloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf1as  = _ia_gzrf1as.fixedflag ?    ((void)((int)(a_gzrf1as*MAX_PG_IAMP/asloggrd.tz)), ia_gzrf1as) : (int)(a_gzrf1as*MAX_PG_IAMP/asloggrd.tz);
			      
  ia_rf1as  = _ia_rf1as.fixedflag ?    ((void)((int)(a_rf1as*MAX_PG_IAMP)), ia_rf1as) : (int)(a_rf1as*MAX_PG_IAMP);
  if (res_rf1as == 0)
    res_rf1as  = _res_rf1as.fixedflag ?  ((void)(pw_rf1as/(RF_UPDATE_TIME)), res_rf1as) : pw_rf1as/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1as, &asloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1as, &asloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1as.fixedflag ? (_temp1881_a_gz1as=a_gz1as,&_temp1881_a_gz1as) : &a_gz1as, _pw_gz1asa.fixedflag ? (_temp1882_pw_gz1asa=pw_gz1asa,&_temp1882_pw_gz1asa) : &pw_gz1asa, _pw_gz1as.fixedflag ? (_temp1883_pw_gz1as=pw_gz1as,&_temp1883_pw_gz1as) : &pw_gz1as,
                      _pw_gz1asd.fixedflag ? (_temp1884_pw_gz1asd=pw_gz1asd,&_temp1884_pw_gz1asd) : &pw_gz1asd) == FAILURE)
            return FAILURE;
    }

    ia_gz1as  = _ia_gz1as.fixedflag ?     ((void)((int)((a_gz1as/target)*MAX_PG_IAMP)), ia_gz1as) : (int)((a_gz1as/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwas, &asloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwas, &asloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwas.fixedflag ? (_temp1885_a_gxwas=a_gxwas,&_temp1885_a_gxwas) : &a_gxwas, _pw_gxwasa.fixedflag ? (_temp1886_pw_gxwasa=pw_gxwasa,&_temp1886_pw_gxwasa) : &pw_gxwasa, _pw_gxwas.fixedflag ? (_temp1887_pw_gxwas=pw_gxwas,&_temp1887_pw_gxwas) : &pw_gxwas,
                      _pw_gxwasd.fixedflag ? (_temp1888_pw_gxwasd=pw_gxwasd,&_temp1888_pw_gxwasd) : &pw_gxwasd) == FAILURE)
            return FAILURE;
    }

    ia_gxwas  = _ia_gxwas.fixedflag ?     ((void)((int)((a_gxwas/target)*MAX_PG_IAMP)), ia_gxwas) : (int)((a_gxwas/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1as, &asloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1as, &asloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1as.fixedflag ? (_temp1889_a_gx1as=a_gx1as,&_temp1889_a_gx1as) : &a_gx1as, _pw_gx1asa.fixedflag ? (_temp1890_pw_gx1asa=pw_gx1asa,&_temp1890_pw_gx1asa) : &pw_gx1asa, _pw_gx1as.fixedflag ? (_temp1891_pw_gx1as=pw_gx1as,&_temp1891_pw_gx1as) : &pw_gx1as,
                      _pw_gx1asd.fixedflag ? (_temp1892_pw_gx1asd=pw_gx1asd,&_temp1892_pw_gx1asd) : &pw_gx1asd) == FAILURE)
            return FAILURE;
    }

    ia_gx1as  = _ia_gx1as.fixedflag ?     ((void)((int)((a_gx1as/target)*MAX_PG_IAMP)), ia_gx1as) : (int)((a_gx1as/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1as,&asloggrd);
   ia_gy1as  = _ia_gy1as.fixedflag ?      
                    ((void)((int)((endview_scaleas*a_gy1as/target)*MAX_PG_IAMP)), ia_gy1as) : (int)((endview_scaleas*a_gy1as/target)*MAX_PG_IAMP);
   ia_gy1aswa  = _ia_gy1aswa.fixedflag ?      
                          ((void)((int)((endview_scaleas*a_gy1asa/target)*MAX_PG_IAMP)), ia_gy1aswa) : (int)((endview_scaleas*a_gy1asa/target)*MAX_PG_IAMP);
   ia_gy1aswb  = _ia_gy1aswb.fixedflag ?      
                      ((void)((int)((endview_scaleas*a_gy1asb/target)*MAX_PG_IAMP)), ia_gy1aswb) : (int)((endview_scaleas*a_gy1asb/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1ras,&asloggrd);
   ia_gy1ras  = _ia_gy1ras.fixedflag ?      
                    ((void)((int)((endview_scaleas*a_gy1ras/target)*MAX_PG_IAMP)), ia_gy1ras) : (int)((endview_scaleas*a_gy1ras/target)*MAX_PG_IAMP);
   ia_gy1raswa  = _ia_gy1raswa.fixedflag ?      
                          ((void)((int)((endview_scaleas*a_gy1rasa/target)*MAX_PG_IAMP)), ia_gy1raswa) : (int)((endview_scaleas*a_gy1rasa/target)*MAX_PG_IAMP);
   ia_gy1raswb  = _ia_gy1raswb.fixedflag ?      
                      ((void)((int)((endview_scaleas*a_gy1rasb/target)*MAX_PG_IAMP)), ia_gy1raswb) : (int)((endview_scaleas*a_gy1rasb/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkas, &asloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkas, &asloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkas.fixedflag ? (_temp1893_a_gxkas=a_gxkas,&_temp1893_a_gxkas) : &a_gxkas, _pw_gxkasa.fixedflag ? (_temp1894_pw_gxkasa=pw_gxkasa,&_temp1894_pw_gxkasa) : &pw_gxkasa, _pw_gxkas.fixedflag ? (_temp1895_pw_gxkas=pw_gxkas,&_temp1895_pw_gxkas) : &pw_gxkas,
                      _pw_gxkasd.fixedflag ? (_temp1896_pw_gxkasd=pw_gxkasd,&_temp1896_pw_gxkasd) : &pw_gxkasd) == FAILURE)
            return FAILURE;
    }

    ia_gxkas  = _ia_gxkas.fixedflag ?     ((void)((int)((a_gxkas/target)*MAX_PG_IAMP)), ia_gxkas) : (int)((a_gxkas/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkas, &asloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkas, &asloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkas.fixedflag ? (_temp1897_a_gzkas=a_gzkas,&_temp1897_a_gzkas) : &a_gzkas, _pw_gzkasa.fixedflag ? (_temp1898_pw_gzkasa=pw_gzkasa,&_temp1898_pw_gzkasa) : &pw_gzkasa, _pw_gzkas.fixedflag ? (_temp1899_pw_gzkas=pw_gzkas,&_temp1899_pw_gzkas) : &pw_gzkas,
                      _pw_gzkasd.fixedflag ? (_temp1900_pw_gzkasd=pw_gzkasd,&_temp1900_pw_gzkasd) : &pw_gzkasd) == FAILURE)
            return FAILURE;
    }

    ia_gzkas  = _ia_gzkas.fixedflag ?     ((void)((int)((a_gzkas/target)*MAX_PG_IAMP)), ia_gzkas) : (int)((a_gzkas/target)*MAX_PG_IAMP);
}

{
  float target;
  gettarget(&target, (WF_PROCESSOR)wg_xdixon, &asloggrd);
  ia_xdixon  = _ia_xdixon.fixedflag ?     ((void)((int)((a_xdixon/target)*MAX_PG_IAMP)), ia_xdixon) : (int)((a_xdixon/target)*MAX_PG_IAMP);
}

{
  float target;
  gettarget(&target, (WF_PROCESSOR)wg_ydixon, &asloggrd);
  ia_ydixon  = _ia_ydixon.fixedflag ?     ((void)((int)((a_ydixon/target)*MAX_PG_IAMP)), ia_ydixon) : (int)((a_ydixon/target)*MAX_PG_IAMP);
}

{
  float target;
  gettarget(&target, (WF_PROCESSOR)wg_zdixon, &asloggrd);
  ia_zdixon  = _ia_zdixon.fixedflag ?     ((void)((int)((a_zdixon/target)*MAX_PG_IAMP)), ia_zdixon) : (int)((a_zdixon/target)*MAX_PG_IAMP);
}

{
  float target;
  gettarget(&target, (WF_PROCESSOR)wg_sdixon, &asloggrd);
  ia_sdixon  = _ia_sdixon.fixedflag ?     ((void)((int)((a_sdixon/target)*MAX_PG_IAMP)), ia_sdixon) : (int)((a_sdixon/target)*MAX_PG_IAMP);
}

{
  float target;
  gettarget(&target, (WF_PROCESSOR)wg_sdixon2, &asloggrd);
  ia_sdixon2  = _ia_sdixon2.fixedflag ?     ((void)((int)((a_sdixon2/target)*MAX_PG_IAMP)), ia_sdixon2) : (int)((a_sdixon2/target)*MAX_PG_IAMP);
}







{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf1rs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf1rs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf1rs.fixedflag ? (_temp1901_a_gzrf1rs=a_gzrf1rs,&_temp1901_a_gzrf1rs) : &a_gzrf1rs, _pw_gzrf1rsa.fixedflag ? (_temp1902_pw_gzrf1rsa=pw_gzrf1rsa,&_temp1902_pw_gzrf1rsa) : &pw_gzrf1rsa, _pw_gzrf1rs.fixedflag ? (_temp1903_pw_gzrf1rs=pw_gzrf1rs,&_temp1903_pw_gzrf1rs) : &pw_gzrf1rs,
                      _pw_gzrf1rsd.fixedflag ? (_temp1904_pw_gzrf1rsd=pw_gzrf1rsd,&_temp1904_pw_gzrf1rsd) : &pw_gzrf1rsd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf1rs  = _ia_gzrf1rs.fixedflag ?     ((void)((int)((a_gzrf1rs/target)*MAX_PG_IAMP)), ia_gzrf1rs) : (int)((a_gzrf1rs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkbsrs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkbsrs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkbsrs.fixedflag ? (_temp1905_a_gxkbsrs=a_gxkbsrs,&_temp1905_a_gxkbsrs) : &a_gxkbsrs, _pw_gxkbsrsa.fixedflag ? (_temp1906_pw_gxkbsrsa=pw_gxkbsrsa,&_temp1906_pw_gxkbsrsa) : &pw_gxkbsrsa, _pw_gxkbsrs.fixedflag ? (_temp1907_pw_gxkbsrs=pw_gxkbsrs,&_temp1907_pw_gxkbsrs) : &pw_gxkbsrs,
                      _pw_gxkbsrsd.fixedflag ? (_temp1908_pw_gxkbsrsd=pw_gxkbsrsd,&_temp1908_pw_gxkbsrsd) : &pw_gxkbsrsd) == FAILURE)
            return FAILURE;
    }

    ia_gxkbsrs  = _ia_gxkbsrs.fixedflag ?     ((void)((int)((a_gxkbsrs/target)*MAX_PG_IAMP)), ia_gxkbsrs) : (int)((a_gxkbsrs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1rs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1rs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1rs.fixedflag ? (_temp1909_a_gz1rs=a_gz1rs,&_temp1909_a_gz1rs) : &a_gz1rs, _pw_gz1rsa.fixedflag ? (_temp1910_pw_gz1rsa=pw_gz1rsa,&_temp1910_pw_gz1rsa) : &pw_gz1rsa, _pw_gz1rs.fixedflag ? (_temp1911_pw_gz1rs=pw_gz1rs,&_temp1911_pw_gz1rs) : &pw_gz1rs,
                      _pw_gz1rsd.fixedflag ? (_temp1912_pw_gz1rsd=pw_gz1rsd,&_temp1912_pw_gz1rsd) : &pw_gz1rsd) == FAILURE)
            return FAILURE;
    }

    ia_gz1rs  = _ia_gz1rs.fixedflag ?     ((void)((int)((a_gz1rs/target)*MAX_PG_IAMP)), ia_gz1rs) : (int)((a_gz1rs/target)*MAX_PG_IAMP);
}

    {
        ia_rfbrs    = _ia_rfbrs.fixedflag ?    ((void)((int)(a_rfbrs*MAX_PG_IAMP)), ia_rfbrs) : (int)(a_rfbrs*MAX_PG_IAMP);
    }

    {
        ia_thetarfbrs    = _ia_thetarfbrs.fixedflag ?    ((void)((int)(a_thetarfbrs*MAX_PG_IAMP)), ia_thetarfbrs) : (int)(a_thetarfbrs*MAX_PG_IAMP);
    }

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkbsrs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkbsrs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkbsrs.fixedflag ? (_temp1913_a_gzkbsrs=a_gzkbsrs,&_temp1913_a_gzkbsrs) : &a_gzkbsrs, _pw_gzkbsrsa.fixedflag ? (_temp1914_pw_gzkbsrsa=pw_gzkbsrsa,&_temp1914_pw_gzkbsrsa) : &pw_gzkbsrsa, _pw_gzkbsrs.fixedflag ? (_temp1915_pw_gzkbsrs=pw_gzkbsrs,&_temp1915_pw_gzkbsrs) : &pw_gzkbsrs,
                      _pw_gzkbsrsd.fixedflag ? (_temp1916_pw_gzkbsrsd=pw_gzkbsrsd,&_temp1916_pw_gzkbsrsd) : &pw_gzkbsrsd) == FAILURE)
            return FAILURE;
    }

    ia_gzkbsrs  = _ia_gzkbsrs.fixedflag ?     ((void)((int)((a_gzkbsrs/target)*MAX_PG_IAMP)), ia_gzkbsrs) : (int)((a_gzkbsrs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwrs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwrs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwrs.fixedflag ? (_temp1917_a_gxwrs=a_gxwrs,&_temp1917_a_gxwrs) : &a_gxwrs, _pw_gxwrsa.fixedflag ? (_temp1918_pw_gxwrsa=pw_gxwrsa,&_temp1918_pw_gxwrsa) : &pw_gxwrsa, _pw_gxwrs.fixedflag ? (_temp1919_pw_gxwrs=pw_gxwrs,&_temp1919_pw_gxwrs) : &pw_gxwrs,
                      _pw_gxwrsd.fixedflag ? (_temp1920_pw_gxwrsd=pw_gxwrsd,&_temp1920_pw_gxwrsd) : &pw_gxwrsd) == FAILURE)
            return FAILURE;
    }

    ia_gxwrs  = _ia_gxwrs.fixedflag ?     ((void)((int)((a_gxwrs/target)*MAX_PG_IAMP)), ia_gxwrs) : (int)((a_gxwrs/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx2rs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx2rs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx2rs.fixedflag ? (_temp1921_a_gx2rs=a_gx2rs,&_temp1921_a_gx2rs) : &a_gx2rs, _pw_gx2rsa.fixedflag ? (_temp1922_pw_gx2rsa=pw_gx2rsa,&_temp1922_pw_gx2rsa) : &pw_gx2rsa, _pw_gx2rs.fixedflag ? (_temp1923_pw_gx2rs=pw_gx2rs,&_temp1923_pw_gx2rs) : &pw_gx2rs,
                      _pw_gx2rsd.fixedflag ? (_temp1924_pw_gx2rsd=pw_gx2rsd,&_temp1924_pw_gx2rsd) : &pw_gx2rsd) == FAILURE)
            return FAILURE;
    }

    ia_gx2rs  = _ia_gx2rs.fixedflag ?     ((void)((int)((a_gx2rs/target)*MAX_PG_IAMP)), ia_gx2rs) : (int)((a_gx2rs/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy2rs,&rsloggrd);
   ia_gy2rs  = _ia_gy2rs.fixedflag ?      
                    ((void)((int)((endview_scalers*a_gy2rs/target)*MAX_PG_IAMP)), ia_gy2rs) : (int)((endview_scalers*a_gy2rs/target)*MAX_PG_IAMP);
   ia_gy2rswa  = _ia_gy2rswa.fixedflag ?      
                          ((void)((int)((endview_scalers*a_gy2rsa/target)*MAX_PG_IAMP)), ia_gy2rswa) : (int)((endview_scalers*a_gy2rsa/target)*MAX_PG_IAMP);
   ia_gy2rswb  = _ia_gy2rswb.fixedflag ?      
                      ((void)((int)((endview_scalers*a_gy2rsb/target)*MAX_PG_IAMP)), ia_gy2rswb) : (int)((endview_scalers*a_gy2rsb/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxw2rs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxw2rs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxw2rs.fixedflag ? (_temp1925_a_gxw2rs=a_gxw2rs,&_temp1925_a_gxw2rs) : &a_gxw2rs, _pw_gxw2rsa.fixedflag ? (_temp1926_pw_gxw2rsa=pw_gxw2rsa,&_temp1926_pw_gxw2rsa) : &pw_gxw2rsa, _pw_gxw2rs.fixedflag ? (_temp1927_pw_gxw2rs=pw_gxw2rs,&_temp1927_pw_gxw2rs) : &pw_gxw2rs,
                      _pw_gxw2rsd.fixedflag ? (_temp1928_pw_gxw2rsd=pw_gxw2rsd,&_temp1928_pw_gxw2rsd) : &pw_gxw2rsd) == FAILURE)
            return FAILURE;
    }

    ia_gxw2rs  = _ia_gxw2rs.fixedflag ?     ((void)((int)((a_gxw2rs/target)*MAX_PG_IAMP)), ia_gxw2rs) : (int)((a_gxw2rs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1rs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1rs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1rs.fixedflag ? (_temp1929_a_gx1rs=a_gx1rs,&_temp1929_a_gx1rs) : &a_gx1rs, _pw_gx1rsa.fixedflag ? (_temp1930_pw_gx1rsa=pw_gx1rsa,&_temp1930_pw_gx1rsa) : &pw_gx1rsa, _pw_gx1rs.fixedflag ? (_temp1931_pw_gx1rs=pw_gx1rs,&_temp1931_pw_gx1rs) : &pw_gx1rs,
                      _pw_gx1rsd.fixedflag ? (_temp1932_pw_gx1rsd=pw_gx1rsd,&_temp1932_pw_gx1rsd) : &pw_gx1rsd) == FAILURE)
            return FAILURE;
    }

    ia_gx1rs  = _ia_gx1rs.fixedflag ?     ((void)((int)((a_gx1rs/target)*MAX_PG_IAMP)), ia_gx1rs) : (int)((a_gx1rs/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1rrs,&rsloggrd);
   ia_gy1rrs  = _ia_gy1rrs.fixedflag ?      
                    ((void)((int)((endview_scalers*a_gy1rrs/target)*MAX_PG_IAMP)), ia_gy1rrs) : (int)((endview_scalers*a_gy1rrs/target)*MAX_PG_IAMP);
   ia_gy1rrswa  = _ia_gy1rrswa.fixedflag ?      
                          ((void)((int)((endview_scalers*a_gy1rrsa/target)*MAX_PG_IAMP)), ia_gy1rrswa) : (int)((endview_scalers*a_gy1rrsa/target)*MAX_PG_IAMP);
   ia_gy1rrswb  = _ia_gy1rrswb.fixedflag ?      
                      ((void)((int)((endview_scalers*a_gy1rrsb/target)*MAX_PG_IAMP)), ia_gy1rrswb) : (int)((endview_scalers*a_gy1rrsb/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1rs,&rsloggrd);
   ia_gy1rs  = _ia_gy1rs.fixedflag ?      
                    ((void)((int)((endview_scalers*a_gy1rs/target)*MAX_PG_IAMP)), ia_gy1rs) : (int)((endview_scalers*a_gy1rs/target)*MAX_PG_IAMP);
   ia_gy1rswa  = _ia_gy1rswa.fixedflag ?      
                          ((void)((int)((endview_scalers*a_gy1rsa/target)*MAX_PG_IAMP)), ia_gy1rswa) : (int)((endview_scalers*a_gy1rsa/target)*MAX_PG_IAMP);
   ia_gy1rswb  = _ia_gy1rswb.fixedflag ?      
                      ((void)((int)((endview_scalers*a_gy1rsb/target)*MAX_PG_IAMP)), ia_gy1rswb) : (int)((endview_scalers*a_gy1rsb/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkrs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkrs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkrs.fixedflag ? (_temp1933_a_gzkrs=a_gzkrs,&_temp1933_a_gzkrs) : &a_gzkrs, _pw_gzkrsa.fixedflag ? (_temp1934_pw_gzkrsa=pw_gzkrsa,&_temp1934_pw_gzkrsa) : &pw_gzkrsa, _pw_gzkrs.fixedflag ? (_temp1935_pw_gzkrs=pw_gzkrs,&_temp1935_pw_gzkrs) : &pw_gzkrs,
                      _pw_gzkrsd.fixedflag ? (_temp1936_pw_gzkrsd=pw_gzkrsd,&_temp1936_pw_gzkrsd) : &pw_gzkrsd) == FAILURE)
            return FAILURE;
    }

    ia_gzkrs  = _ia_gzkrs.fixedflag ?     ((void)((int)((a_gzkrs/target)*MAX_PG_IAMP)), ia_gzkrs) : (int)((a_gzkrs/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkrs, &rsloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkrs, &rsloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkrs.fixedflag ? (_temp1937_a_gxkrs=a_gxkrs,&_temp1937_a_gxkrs) : &a_gxkrs, _pw_gxkrsa.fixedflag ? (_temp1938_pw_gxkrsa=pw_gxkrsa,&_temp1938_pw_gxkrsa) : &pw_gxkrsa, _pw_gxkrs.fixedflag ? (_temp1939_pw_gxkrs=pw_gxkrs,&_temp1939_pw_gxkrs) : &pw_gxkrs,
                      _pw_gxkrsd.fixedflag ? (_temp1940_pw_gxkrsd=pw_gxkrsd,&_temp1940_pw_gxkrsd) : &pw_gxkrsd) == FAILURE)
            return FAILURE;
    }

    ia_gxkrs  = _ia_gxkrs.fixedflag ?     ((void)((int)((a_gxkrs/target)*MAX_PG_IAMP)), ia_gxkrs) : (int)((a_gxkrs/target)*MAX_PG_IAMP);
}





{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf1dtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf1dtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf1dtg.fixedflag ? (_temp1941_a_gzrf1dtg=a_gzrf1dtg,&_temp1941_a_gzrf1dtg) : &a_gzrf1dtg, _pw_gzrf1dtga.fixedflag ? (_temp1942_pw_gzrf1dtga=pw_gzrf1dtga,&_temp1942_pw_gzrf1dtga) : &pw_gzrf1dtga, _pw_gzrf1dtg.fixedflag ? (_temp1943_pw_gzrf1dtg=pw_gzrf1dtg,&_temp1943_pw_gzrf1dtg) : &pw_gzrf1dtg,
                      _pw_gzrf1dtgd.fixedflag ? (_temp1944_pw_gzrf1dtgd=pw_gzrf1dtgd,&_temp1944_pw_gzrf1dtgd) : &pw_gzrf1dtgd) == FAILURE)
            return FAILURE;
    }

    ia_gzrf1dtg  = _ia_gzrf1dtg.fixedflag ?     ((void)((int)((a_gzrf1dtg/target)*MAX_PG_IAMP)), ia_gzrf1dtg) : (int)((a_gzrf1dtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkbsdtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkbsdtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkbsdtg.fixedflag ? (_temp1945_a_gxkbsdtg=a_gxkbsdtg,&_temp1945_a_gxkbsdtg) : &a_gxkbsdtg, _pw_gxkbsdtga.fixedflag ? (_temp1946_pw_gxkbsdtga=pw_gxkbsdtga,&_temp1946_pw_gxkbsdtga) : &pw_gxkbsdtga, _pw_gxkbsdtg.fixedflag ? (_temp1947_pw_gxkbsdtg=pw_gxkbsdtg,&_temp1947_pw_gxkbsdtg) : &pw_gxkbsdtg,
                      _pw_gxkbsdtgd.fixedflag ? (_temp1948_pw_gxkbsdtgd=pw_gxkbsdtgd,&_temp1948_pw_gxkbsdtgd) : &pw_gxkbsdtgd) == FAILURE)
            return FAILURE;
    }

    ia_gxkbsdtg  = _ia_gxkbsdtg.fixedflag ?     ((void)((int)((a_gxkbsdtg/target)*MAX_PG_IAMP)), ia_gxkbsdtg) : (int)((a_gxkbsdtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1dtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1dtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1dtg.fixedflag ? (_temp1949_a_gz1dtg=a_gz1dtg,&_temp1949_a_gz1dtg) : &a_gz1dtg, _pw_gz1dtga.fixedflag ? (_temp1950_pw_gz1dtga=pw_gz1dtga,&_temp1950_pw_gz1dtga) : &pw_gz1dtga, _pw_gz1dtg.fixedflag ? (_temp1951_pw_gz1dtg=pw_gz1dtg,&_temp1951_pw_gz1dtg) : &pw_gz1dtg,
                      _pw_gz1dtgd.fixedflag ? (_temp1952_pw_gz1dtgd=pw_gz1dtgd,&_temp1952_pw_gz1dtgd) : &pw_gz1dtgd) == FAILURE)
            return FAILURE;
    }

    ia_gz1dtg  = _ia_gz1dtg.fixedflag ?     ((void)((int)((a_gz1dtg/target)*MAX_PG_IAMP)), ia_gz1dtg) : (int)((a_gz1dtg/target)*MAX_PG_IAMP);
}

    {
        ia_rfbdtg    = _ia_rfbdtg.fixedflag ?    ((void)((int)(a_rfbdtg*MAX_PG_IAMP)), ia_rfbdtg) : (int)(a_rfbdtg*MAX_PG_IAMP);
    }

    {
        ia_thetarfbdtg    = _ia_thetarfbdtg.fixedflag ?    ((void)((int)(a_thetarfbdtg*MAX_PG_IAMP)), ia_thetarfbdtg) : (int)(a_thetarfbdtg*MAX_PG_IAMP);
    }

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkbsdtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkbsdtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkbsdtg.fixedflag ? (_temp1953_a_gzkbsdtg=a_gzkbsdtg,&_temp1953_a_gzkbsdtg) : &a_gzkbsdtg, _pw_gzkbsdtga.fixedflag ? (_temp1954_pw_gzkbsdtga=pw_gzkbsdtga,&_temp1954_pw_gzkbsdtga) : &pw_gzkbsdtga, _pw_gzkbsdtg.fixedflag ? (_temp1955_pw_gzkbsdtg=pw_gzkbsdtg,&_temp1955_pw_gzkbsdtg) : &pw_gzkbsdtg,
                      _pw_gzkbsdtgd.fixedflag ? (_temp1956_pw_gzkbsdtgd=pw_gzkbsdtgd,&_temp1956_pw_gzkbsdtgd) : &pw_gzkbsdtgd) == FAILURE)
            return FAILURE;
    }

    ia_gzkbsdtg  = _ia_gzkbsdtg.fixedflag ?     ((void)((int)((a_gzkbsdtg/target)*MAX_PG_IAMP)), ia_gzkbsdtg) : (int)((a_gzkbsdtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwdtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwdtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwdtg.fixedflag ? (_temp1957_a_gxwdtg=a_gxwdtg,&_temp1957_a_gxwdtg) : &a_gxwdtg, _pw_gxwdtga.fixedflag ? (_temp1958_pw_gxwdtga=pw_gxwdtga,&_temp1958_pw_gxwdtga) : &pw_gxwdtga, _pw_gxwdtg.fixedflag ? (_temp1959_pw_gxwdtg=pw_gxwdtg,&_temp1959_pw_gxwdtg) : &pw_gxwdtg,
                      _pw_gxwdtgd.fixedflag ? (_temp1960_pw_gxwdtgd=pw_gxwdtgd,&_temp1960_pw_gxwdtgd) : &pw_gxwdtgd) == FAILURE)
            return FAILURE;
    }

    ia_gxwdtg  = _ia_gxwdtg.fixedflag ?     ((void)((int)((a_gxwdtg/target)*MAX_PG_IAMP)), ia_gxwdtg) : (int)((a_gxwdtg/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx2dtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx2dtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx2dtg.fixedflag ? (_temp1961_a_gx2dtg=a_gx2dtg,&_temp1961_a_gx2dtg) : &a_gx2dtg, _pw_gx2dtga.fixedflag ? (_temp1962_pw_gx2dtga=pw_gx2dtga,&_temp1962_pw_gx2dtga) : &pw_gx2dtga, _pw_gx2dtg.fixedflag ? (_temp1963_pw_gx2dtg=pw_gx2dtg,&_temp1963_pw_gx2dtg) : &pw_gx2dtg,
                      _pw_gx2dtgd.fixedflag ? (_temp1964_pw_gx2dtgd=pw_gx2dtgd,&_temp1964_pw_gx2dtgd) : &pw_gx2dtgd) == FAILURE)
            return FAILURE;
    }

    ia_gx2dtg  = _ia_gx2dtg.fixedflag ?     ((void)((int)((a_gx2dtg/target)*MAX_PG_IAMP)), ia_gx2dtg) : (int)((a_gx2dtg/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy2dtg,&dtgloggrd);
   ia_gy2dtg  = _ia_gy2dtg.fixedflag ?      
                    ((void)((int)((endview_scaledtg*a_gy2dtg/target)*MAX_PG_IAMP)), ia_gy2dtg) : (int)((endview_scaledtg*a_gy2dtg/target)*MAX_PG_IAMP);
   ia_gy2dtgwa  = _ia_gy2dtgwa.fixedflag ?      
                          ((void)((int)((endview_scaledtg*a_gy2dtga/target)*MAX_PG_IAMP)), ia_gy2dtgwa) : (int)((endview_scaledtg*a_gy2dtga/target)*MAX_PG_IAMP);
   ia_gy2dtgwb  = _ia_gy2dtgwb.fixedflag ?      
                      ((void)((int)((endview_scaledtg*a_gy2dtgb/target)*MAX_PG_IAMP)), ia_gy2dtgwb) : (int)((endview_scaledtg*a_gy2dtgb/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxw2dtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxw2dtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxw2dtg.fixedflag ? (_temp1965_a_gxw2dtg=a_gxw2dtg,&_temp1965_a_gxw2dtg) : &a_gxw2dtg, _pw_gxw2dtga.fixedflag ? (_temp1966_pw_gxw2dtga=pw_gxw2dtga,&_temp1966_pw_gxw2dtga) : &pw_gxw2dtga, _pw_gxw2dtg.fixedflag ? (_temp1967_pw_gxw2dtg=pw_gxw2dtg,&_temp1967_pw_gxw2dtg) : &pw_gxw2dtg,
                      _pw_gxw2dtgd.fixedflag ? (_temp1968_pw_gxw2dtgd=pw_gxw2dtgd,&_temp1968_pw_gxw2dtgd) : &pw_gxw2dtgd) == FAILURE)
            return FAILURE;
    }

    ia_gxw2dtg  = _ia_gxw2dtg.fixedflag ?     ((void)((int)((a_gxw2dtg/target)*MAX_PG_IAMP)), ia_gxw2dtg) : (int)((a_gxw2dtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1dtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1dtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1dtg.fixedflag ? (_temp1969_a_gx1dtg=a_gx1dtg,&_temp1969_a_gx1dtg) : &a_gx1dtg, _pw_gx1dtga.fixedflag ? (_temp1970_pw_gx1dtga=pw_gx1dtga,&_temp1970_pw_gx1dtga) : &pw_gx1dtga, _pw_gx1dtg.fixedflag ? (_temp1971_pw_gx1dtg=pw_gx1dtg,&_temp1971_pw_gx1dtg) : &pw_gx1dtg,
                      _pw_gx1dtgd.fixedflag ? (_temp1972_pw_gx1dtgd=pw_gx1dtgd,&_temp1972_pw_gx1dtgd) : &pw_gx1dtgd) == FAILURE)
            return FAILURE;
    }

    ia_gx1dtg  = _ia_gx1dtg.fixedflag ?     ((void)((int)((a_gx1dtg/target)*MAX_PG_IAMP)), ia_gx1dtg) : (int)((a_gx1dtg/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1rdtg,&dtgloggrd);
   ia_gy1rdtg  = _ia_gy1rdtg.fixedflag ?      
                    ((void)((int)((endview_scaledtg*a_gy1rdtg/target)*MAX_PG_IAMP)), ia_gy1rdtg) : (int)((endview_scaledtg*a_gy1rdtg/target)*MAX_PG_IAMP);
   ia_gy1rdtgwa  = _ia_gy1rdtgwa.fixedflag ?      
                          ((void)((int)((endview_scaledtg*a_gy1rdtga/target)*MAX_PG_IAMP)), ia_gy1rdtgwa) : (int)((endview_scaledtg*a_gy1rdtga/target)*MAX_PG_IAMP);
   ia_gy1rdtgwb  = _ia_gy1rdtgwb.fixedflag ?      
                      ((void)((int)((endview_scaledtg*a_gy1rdtgb/target)*MAX_PG_IAMP)), ia_gy1rdtgwb) : (int)((endview_scaledtg*a_gy1rdtgb/target)*MAX_PG_IAMP);
}

{
   float target;

   gettarget(&target,(WF_PROCESSOR)wg_gy1dtg,&dtgloggrd);
   ia_gy1dtg  = _ia_gy1dtg.fixedflag ?      
                    ((void)((int)((endview_scaledtg*a_gy1dtg/target)*MAX_PG_IAMP)), ia_gy1dtg) : (int)((endview_scaledtg*a_gy1dtg/target)*MAX_PG_IAMP);
   ia_gy1dtgwa  = _ia_gy1dtgwa.fixedflag ?      
                          ((void)((int)((endview_scaledtg*a_gy1dtga/target)*MAX_PG_IAMP)), ia_gy1dtgwa) : (int)((endview_scaledtg*a_gy1dtga/target)*MAX_PG_IAMP);
   ia_gy1dtgwb  = _ia_gy1dtgwb.fixedflag ?      
                      ((void)((int)((endview_scaledtg*a_gy1dtgb/target)*MAX_PG_IAMP)), ia_gy1dtgwb) : (int)((endview_scaledtg*a_gy1dtgb/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkdtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkdtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkdtg.fixedflag ? (_temp1973_a_gzkdtg=a_gzkdtg,&_temp1973_a_gzkdtg) : &a_gzkdtg, _pw_gzkdtga.fixedflag ? (_temp1974_pw_gzkdtga=pw_gzkdtga,&_temp1974_pw_gzkdtga) : &pw_gzkdtga, _pw_gzkdtg.fixedflag ? (_temp1975_pw_gzkdtg=pw_gzkdtg,&_temp1975_pw_gzkdtg) : &pw_gzkdtg,
                      _pw_gzkdtgd.fixedflag ? (_temp1976_pw_gzkdtgd=pw_gzkdtgd,&_temp1976_pw_gzkdtgd) : &pw_gzkdtgd) == FAILURE)
            return FAILURE;
    }

    ia_gzkdtg  = _ia_gzkdtg.fixedflag ?     ((void)((int)((a_gzkdtg/target)*MAX_PG_IAMP)), ia_gzkdtg) : (int)((a_gzkdtg/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxkdtg, &dtgloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxkdtg, &dtgloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxkdtg.fixedflag ? (_temp1977_a_gxkdtg=a_gxkdtg,&_temp1977_a_gxkdtg) : &a_gxkdtg, _pw_gxkdtga.fixedflag ? (_temp1978_pw_gxkdtga=pw_gxkdtga,&_temp1978_pw_gxkdtga) : &pw_gxkdtga, _pw_gxkdtg.fixedflag ? (_temp1979_pw_gxkdtg=pw_gxkdtg,&_temp1979_pw_gxkdtg) : &pw_gxkdtg,
                      _pw_gxkdtgd.fixedflag ? (_temp1980_pw_gxkdtgd=pw_gxkdtgd,&_temp1980_pw_gxkdtgd) : &pw_gxkdtgd) == FAILURE)
            return FAILURE;
    }

    ia_gxkdtg  = _ia_gxkdtg.fixedflag ?     ((void)((int)((a_gxkdtg/target)*MAX_PG_IAMP)), ia_gxkdtg) : (int)((a_gxkdtg/target)*MAX_PG_IAMP);
}




    {
        ia_rf1cal    = _ia_rf1cal.fixedflag ?    ((void)((int)(a_rf1cal*MAX_PG_IAMP)), ia_rf1cal) : (int)(a_rf1cal*MAX_PG_IAMP);
    }

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf1cal, &calloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf1cal, &calloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf1cal.fixedflag ? (_temp1981_a_gzrf1cal=a_gzrf1cal,&_temp1981_a_gzrf1cal) : &a_gzrf1cal, _pw_gzrf1cala.fixedflag ? (_temp1982_pw_gzrf1cala=pw_gzrf1cala,&_temp1982_pw_gzrf1cala) : &pw_gzrf1cala, _pw_gzrf1cal.fixedflag ? (_temp1983_pw_gzrf1cal=pw_gzrf1cal,&_temp1983_pw_gzrf1cal) : &pw_gzrf1cal,
                      _pw_gzrf1cald.fixedflag ? (_temp1984_pw_gzrf1cald=pw_gzrf1cald,&_temp1984_pw_gzrf1cald) : &pw_gzrf1cald) == FAILURE)
            return FAILURE;
    }

    ia_gzrf1cal  = _ia_gzrf1cal.fixedflag ?     ((void)((int)((a_gzrf1cal/target)*MAX_PG_IAMP)), ia_gzrf1cal) : (int)((a_gzrf1cal/target)*MAX_PG_IAMP);
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gzcombcal, &calloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzcombcal, &calloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gzcombcal.fixedflag ? (_temp1985_a_gzcombcal=a_gzcombcal,&_temp1985_a_gzcombcal) : &a_gzcombcal, _pw_gzcombcala.fixedflag ? (_temp1986_pw_gzcombcala=pw_gzcombcala,&_temp1986_pw_gzcombcala) : &pw_gzcombcala, _pw_gzcombcal.fixedflag ? (_temp1987_pw_gzcombcal=pw_gzcombcal,&_temp1987_pw_gzcombcal) : &pw_gzcombcal,
				 _pw_gzcombcald.fixedflag ? (_temp1988_pw_gzcombcald=pw_gzcombcald,&_temp1988_pw_gzcombcald) : &pw_gzcombcald) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gzcombcal  = _ia_gzcombcal.fixedflag ?       ((void)((int)((endviewz_scalecal*a_gzcombcal/target)*MAX_PG_IAMP)), ia_gzcombcal) : (int)((endviewz_scalecal*a_gzcombcal/target)*MAX_PG_IAMP);
       ia_gzcombcalwa  = _ia_gzcombcalwa.fixedflag ?       ((void)((int)((endviewz_scalecal*a_gzcombcala/target)*MAX_PG_IAMP)), ia_gzcombcalwa) : (int)((endviewz_scalecal*a_gzcombcala/target)*MAX_PG_IAMP);
       ia_gzcombcalwb  = _ia_gzcombcalwb.fixedflag ?       ((void)((int)((endviewz_scalecal*a_gzcombcalb/target)*MAX_PG_IAMP)), ia_gzcombcalwb) : (int)((endviewz_scalecal*a_gzcombcalb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gzcombcal  = _ia_gzcombcal.fixedflag ?     ((void)((int)((a_gzcombcal/target)*MAX_PG_IAMP)), ia_gzcombcal) : (int)((a_gzcombcal/target)*MAX_PG_IAMP);
       ia_gzcombcalwa  = _ia_gzcombcalwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gzcombcalwa) : MAX_PG_WAMP;
       ia_gzcombcalwb  = _ia_gzcombcalwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gzcombcalwb) : MAX_PG_WAMP;
     }

   if ((wg_gzcombcal==TYPRHO1)||(wg_gzcombcal==TYPRHO2) ||
       (wg_gzcombcal==TYPTHETA)||(wg_gzcombcal==TYPOMEGA))
     {				/* Determine min period */
       per_gzcombcal  = _per_gzcombcal.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gzcombcal) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gzcombcal  = _per_gzcombcal.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gzcombcal) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gzcombcalf  = _pw_gzcombcalf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gzcombcalf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gzcombcalf  = _pw_gzcombcalf.fixedflag ?  ((void)(0), pw_gzcombcalf) : 0;

   if ((wg_gzcombcal==TYPRHO1)||(wg_gzcombcal==TYPRHO2) ||
       (wg_gzcombcal==TYPTHETA)||(wg_gzcombcal==TYPOMEGA))
     pw_gzcombcal  = _pw_gzcombcal.fixedflag ?  ((void)(0), pw_gzcombcal) : 0;    /* no need for leading edge if rf */

   res_gzcombcal  = _res_gzcombcal.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gzcombcalf+pw_gzcombcala+pw_gzcombcal+pw_gzcombcald)/per_gzcombcal), res_gzcombcal) : (pw_gzcombcalf+pw_gzcombcala+pw_gzcombcal+pw_gzcombcald)/per_gzcombcal;
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gzprcal, &calloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzprcal, &calloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gzprcal.fixedflag ? (_temp1989_a_gzprcal=a_gzprcal,&_temp1989_a_gzprcal) : &a_gzprcal, _pw_gzprcala.fixedflag ? (_temp1990_pw_gzprcala=pw_gzprcala,&_temp1990_pw_gzprcala) : &pw_gzprcala, _pw_gzprcal.fixedflag ? (_temp1991_pw_gzprcal=pw_gzprcal,&_temp1991_pw_gzprcal) : &pw_gzprcal,
				 _pw_gzprcald.fixedflag ? (_temp1992_pw_gzprcald=pw_gzprcald,&_temp1992_pw_gzprcald) : &pw_gzprcald) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gzprcal  = _ia_gzprcal.fixedflag ?       ((void)((int)((endviewz_scalecal*a_gzprcal/target)*MAX_PG_IAMP)), ia_gzprcal) : (int)((endviewz_scalecal*a_gzprcal/target)*MAX_PG_IAMP);
       ia_gzprcalwa  = _ia_gzprcalwa.fixedflag ?       ((void)((int)((endviewz_scalecal*a_gzprcala/target)*MAX_PG_IAMP)), ia_gzprcalwa) : (int)((endviewz_scalecal*a_gzprcala/target)*MAX_PG_IAMP);
       ia_gzprcalwb  = _ia_gzprcalwb.fixedflag ?       ((void)((int)((endviewz_scalecal*a_gzprcalb/target)*MAX_PG_IAMP)), ia_gzprcalwb) : (int)((endviewz_scalecal*a_gzprcalb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gzprcal  = _ia_gzprcal.fixedflag ?     ((void)((int)((a_gzprcal/target)*MAX_PG_IAMP)), ia_gzprcal) : (int)((a_gzprcal/target)*MAX_PG_IAMP);
       ia_gzprcalwa  = _ia_gzprcalwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gzprcalwa) : MAX_PG_WAMP;
       ia_gzprcalwb  = _ia_gzprcalwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gzprcalwb) : MAX_PG_WAMP;
     }

   if ((wg_gzprcal==TYPRHO1)||(wg_gzprcal==TYPRHO2) ||
       (wg_gzprcal==TYPTHETA)||(wg_gzprcal==TYPOMEGA))
     {				/* Determine min period */
       per_gzprcal  = _per_gzprcal.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gzprcal) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gzprcal  = _per_gzprcal.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gzprcal) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gzprcalf  = _pw_gzprcalf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gzprcalf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gzprcalf  = _pw_gzprcalf.fixedflag ?  ((void)(0), pw_gzprcalf) : 0;

   if ((wg_gzprcal==TYPRHO1)||(wg_gzprcal==TYPRHO2) ||
       (wg_gzprcal==TYPTHETA)||(wg_gzprcal==TYPOMEGA))
     pw_gzprcal  = _pw_gzprcal.fixedflag ?  ((void)(0), pw_gzprcal) : 0;    /* no need for leading edge if rf */

   res_gzprcal  = _res_gzprcal.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gzprcalf+pw_gzprcala+pw_gzprcal+pw_gzprcald)/per_gzprcal), res_gzprcal) : (pw_gzprcalf+pw_gzprcala+pw_gzprcal+pw_gzprcald)/per_gzprcal;
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwcal, &calloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwcal, &calloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwcal.fixedflag ? (_temp1993_a_gxwcal=a_gxwcal,&_temp1993_a_gxwcal) : &a_gxwcal, _pw_gxwcala.fixedflag ? (_temp1994_pw_gxwcala=pw_gxwcala,&_temp1994_pw_gxwcala) : &pw_gxwcala, _pw_gxwcal.fixedflag ? (_temp1995_pw_gxwcal=pw_gxwcal,&_temp1995_pw_gxwcal) : &pw_gxwcal,
                      _pw_gxwcald.fixedflag ? (_temp1996_pw_gxwcald=pw_gxwcald,&_temp1996_pw_gxwcald) : &pw_gxwcald) == FAILURE)
            return FAILURE;
    }

    ia_gxwcal  = _ia_gxwcal.fixedflag ?     ((void)((int)((a_gxwcal/target)*MAX_PG_IAMP)), ia_gxwcal) : (int)((a_gxwcal/target)*MAX_PG_IAMP);
}



{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gx1cal, &calloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1cal, &calloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gx1cal.fixedflag ? (_temp1997_a_gx1cal=a_gx1cal,&_temp1997_a_gx1cal) : &a_gx1cal, _pw_gx1cala.fixedflag ? (_temp1998_pw_gx1cala=pw_gx1cala,&_temp1998_pw_gx1cala) : &pw_gx1cala, _pw_gx1cal.fixedflag ? (_temp1999_pw_gx1cal=pw_gx1cal,&_temp1999_pw_gx1cal) : &pw_gx1cal,
				 _pw_gx1cald.fixedflag ? (_temp2000_pw_gx1cald=pw_gx1cald,&_temp2000_pw_gx1cald) : &pw_gx1cald) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL & TRAP_SLOPED)
     {
       ia_gx1cal  = _ia_gx1cal.fixedflag ?       ((void)((int)((1.0*a_gx1cal/target)*MAX_PG_IAMP)), ia_gx1cal) : (int)((1.0*a_gx1cal/target)*MAX_PG_IAMP);
       ia_gx1calwa  = _ia_gx1calwa.fixedflag ?       ((void)((int)((1.0*a_gx1cala/target)*MAX_PG_IAMP)), ia_gx1calwa) : (int)((1.0*a_gx1cala/target)*MAX_PG_IAMP);
       ia_gx1calwb  = _ia_gx1calwb.fixedflag ?       ((void)((int)((1.0*a_gx1calb/target)*MAX_PG_IAMP)), ia_gx1calwb) : (int)((1.0*a_gx1calb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gx1cal  = _ia_gx1cal.fixedflag ?     ((void)((int)((a_gx1cal/target)*MAX_PG_IAMP)), ia_gx1cal) : (int)((a_gx1cal/target)*MAX_PG_IAMP);
       ia_gx1calwa  = _ia_gx1calwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gx1calwa) : MAX_PG_WAMP;
       ia_gx1calwb  = _ia_gx1calwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gx1calwb) : MAX_PG_WAMP;
     }

   if ((wg_gx1cal==TYPRHO1)||(wg_gx1cal==TYPRHO2) ||
       (wg_gx1cal==TYPTHETA)||(wg_gx1cal==TYPOMEGA))
     {				/* Determine min period */
       per_gx1cal  = _per_gx1cal.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gx1cal) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gx1cal  = _per_gx1cal.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gx1cal) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gx1calf  = _pw_gx1calf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gx1calf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gx1calf  = _pw_gx1calf.fixedflag ?  ((void)(0), pw_gx1calf) : 0;

   if ((wg_gx1cal==TYPRHO1)||(wg_gx1cal==TYPRHO2) ||
       (wg_gx1cal==TYPTHETA)||(wg_gx1cal==TYPOMEGA))
     pw_gx1cal  = _pw_gx1cal.fixedflag ?  ((void)(0), pw_gx1cal) : 0;    /* no need for leading edge if rf */

   res_gx1cal  = _res_gx1cal.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gx1calf+pw_gx1cala+pw_gx1cal+pw_gx1cald)/per_gx1cal), res_gx1cal) : (pw_gx1calf+pw_gx1cala+pw_gx1cal+pw_gx1cald)/per_gx1cal;
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gy1cal, &calloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1cal, &calloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gy1cal.fixedflag ? (_temp2001_a_gy1cal=a_gy1cal,&_temp2001_a_gy1cal) : &a_gy1cal, _pw_gy1cala.fixedflag ? (_temp2002_pw_gy1cala=pw_gy1cala,&_temp2002_pw_gy1cala) : &pw_gy1cala, _pw_gy1cal.fixedflag ? (_temp2003_pw_gy1cal=pw_gy1cal,&_temp2003_pw_gy1cal) : &pw_gy1cal,
				 _pw_gy1cald.fixedflag ? (_temp2004_pw_gy1cald=pw_gy1cald,&_temp2004_pw_gy1cald) : &pw_gy1cald) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gy1cal  = _ia_gy1cal.fixedflag ?       ((void)((int)((endview_scalecal*a_gy1cal/target)*MAX_PG_IAMP)), ia_gy1cal) : (int)((endview_scalecal*a_gy1cal/target)*MAX_PG_IAMP);
       ia_gy1calwa  = _ia_gy1calwa.fixedflag ?       ((void)((int)((endview_scalecal*a_gy1cala/target)*MAX_PG_IAMP)), ia_gy1calwa) : (int)((endview_scalecal*a_gy1cala/target)*MAX_PG_IAMP);
       ia_gy1calwb  = _ia_gy1calwb.fixedflag ?       ((void)((int)((endview_scalecal*a_gy1calb/target)*MAX_PG_IAMP)), ia_gy1calwb) : (int)((endview_scalecal*a_gy1calb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gy1cal  = _ia_gy1cal.fixedflag ?     ((void)((int)((a_gy1cal/target)*MAX_PG_IAMP)), ia_gy1cal) : (int)((a_gy1cal/target)*MAX_PG_IAMP);
       ia_gy1calwa  = _ia_gy1calwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gy1calwa) : MAX_PG_WAMP;
       ia_gy1calwb  = _ia_gy1calwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gy1calwb) : MAX_PG_WAMP;
     }

   if ((wg_gy1cal==TYPRHO1)||(wg_gy1cal==TYPRHO2) ||
       (wg_gy1cal==TYPTHETA)||(wg_gy1cal==TYPOMEGA))
     {				/* Determine min period */
       per_gy1cal  = _per_gy1cal.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gy1cal) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gy1cal  = _per_gy1cal.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gy1cal) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gy1calf  = _pw_gy1calf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gy1calf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gy1calf  = _pw_gy1calf.fixedflag ?  ((void)(0), pw_gy1calf) : 0;

   if ((wg_gy1cal==TYPRHO1)||(wg_gy1cal==TYPRHO2) ||
       (wg_gy1cal==TYPTHETA)||(wg_gy1cal==TYPOMEGA))
     pw_gy1cal  = _pw_gy1cal.fixedflag ?  ((void)(0), pw_gy1cal) : 0;    /* no need for leading edge if rf */

   res_gy1cal  = _res_gy1cal.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gy1calf+pw_gy1cala+pw_gy1cal+pw_gy1cald)/per_gy1cal), res_gy1cal) : (pw_gy1calf+pw_gy1cala+pw_gy1cal+pw_gy1cald)/per_gy1cal;
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gy1rcal, &calloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1rcal, &calloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gy1rcal.fixedflag ? (_temp2005_a_gy1rcal=a_gy1rcal,&_temp2005_a_gy1rcal) : &a_gy1rcal, _pw_gy1rcala.fixedflag ? (_temp2006_pw_gy1rcala=pw_gy1rcala,&_temp2006_pw_gy1rcala) : &pw_gy1rcala, _pw_gy1rcal.fixedflag ? (_temp2007_pw_gy1rcal=pw_gy1rcal,&_temp2007_pw_gy1rcal) : &pw_gy1rcal,
				 _pw_gy1rcald.fixedflag ? (_temp2008_pw_gy1rcald=pw_gy1rcald,&_temp2008_pw_gy1rcald) : &pw_gy1rcald) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gy1rcal  = _ia_gy1rcal.fixedflag ?       ((void)((int)((endview_scalecal*a_gy1rcal/target)*MAX_PG_IAMP)), ia_gy1rcal) : (int)((endview_scalecal*a_gy1rcal/target)*MAX_PG_IAMP);
       ia_gy1rcalwa  = _ia_gy1rcalwa.fixedflag ?       ((void)((int)((endview_scalecal*a_gy1rcala/target)*MAX_PG_IAMP)), ia_gy1rcalwa) : (int)((endview_scalecal*a_gy1rcala/target)*MAX_PG_IAMP);
       ia_gy1rcalwb  = _ia_gy1rcalwb.fixedflag ?       ((void)((int)((endview_scalecal*a_gy1rcalb/target)*MAX_PG_IAMP)), ia_gy1rcalwb) : (int)((endview_scalecal*a_gy1rcalb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gy1rcal  = _ia_gy1rcal.fixedflag ?     ((void)((int)((a_gy1rcal/target)*MAX_PG_IAMP)), ia_gy1rcal) : (int)((a_gy1rcal/target)*MAX_PG_IAMP);
       ia_gy1rcalwa  = _ia_gy1rcalwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gy1rcalwa) : MAX_PG_WAMP;
       ia_gy1rcalwb  = _ia_gy1rcalwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gy1rcalwb) : MAX_PG_WAMP;
     }

   if ((wg_gy1rcal==TYPRHO1)||(wg_gy1rcal==TYPRHO2) ||
       (wg_gy1rcal==TYPTHETA)||(wg_gy1rcal==TYPOMEGA))
     {				/* Determine min period */
       per_gy1rcal  = _per_gy1rcal.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gy1rcal) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gy1rcal  = _per_gy1rcal.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gy1rcal) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gy1rcalf  = _pw_gy1rcalf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gy1rcalf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gy1rcalf  = _pw_gy1rcalf.fixedflag ?  ((void)(0), pw_gy1rcalf) : 0;

   if ((wg_gy1rcal==TYPRHO1)||(wg_gy1rcal==TYPRHO2) ||
       (wg_gy1rcal==TYPTHETA)||(wg_gy1rcal==TYPOMEGA))
     pw_gy1rcal  = _pw_gy1rcal.fixedflag ?  ((void)(0), pw_gy1rcal) : 0;    /* no need for leading edge if rf */

   res_gy1rcal  = _res_gy1rcal.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gy1rcalf+pw_gy1rcala+pw_gy1rcal+pw_gy1rcald)/per_gy1rcal), res_gy1rcal) : (pw_gy1rcalf+pw_gy1rcala+pw_gy1rcal+pw_gy1rcald)/per_gy1rcal;
}





    {
        ia_rf1coil    = _ia_rf1coil.fixedflag ?    ((void)((int)(a_rf1coil*MAX_PG_IAMP)), ia_rf1coil) : (int)(a_rf1coil*MAX_PG_IAMP);
    }

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzrf1coil, &coilloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzrf1coil, &coilloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzrf1coil.fixedflag ? (_temp2009_a_gzrf1coil=a_gzrf1coil,&_temp2009_a_gzrf1coil) : &a_gzrf1coil, _pw_gzrf1coila.fixedflag ? (_temp2010_pw_gzrf1coila=pw_gzrf1coila,&_temp2010_pw_gzrf1coila) : &pw_gzrf1coila, _pw_gzrf1coil.fixedflag ? (_temp2011_pw_gzrf1coil=pw_gzrf1coil,&_temp2011_pw_gzrf1coil) : &pw_gzrf1coil,
                      _pw_gzrf1coild.fixedflag ? (_temp2012_pw_gzrf1coild=pw_gzrf1coild,&_temp2012_pw_gzrf1coild) : &pw_gzrf1coild) == FAILURE)
            return FAILURE;
    }

    ia_gzrf1coil  = _ia_gzrf1coil.fixedflag ?     ((void)((int)((a_gzrf1coil/target)*MAX_PG_IAMP)), ia_gzrf1coil) : (int)((a_gzrf1coil/target)*MAX_PG_IAMP);
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gzcombcoil, &coilloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzcombcoil, &coilloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gzcombcoil.fixedflag ? (_temp2013_a_gzcombcoil=a_gzcombcoil,&_temp2013_a_gzcombcoil) : &a_gzcombcoil, _pw_gzcombcoila.fixedflag ? (_temp2014_pw_gzcombcoila=pw_gzcombcoila,&_temp2014_pw_gzcombcoila) : &pw_gzcombcoila, _pw_gzcombcoil.fixedflag ? (_temp2015_pw_gzcombcoil=pw_gzcombcoil,&_temp2015_pw_gzcombcoil) : &pw_gzcombcoil,
				 _pw_gzcombcoild.fixedflag ? (_temp2016_pw_gzcombcoild=pw_gzcombcoild,&_temp2016_pw_gzcombcoild) : &pw_gzcombcoild) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gzcombcoil  = _ia_gzcombcoil.fixedflag ?       ((void)((int)((endviewz_scalecoil*a_gzcombcoil/target)*MAX_PG_IAMP)), ia_gzcombcoil) : (int)((endviewz_scalecoil*a_gzcombcoil/target)*MAX_PG_IAMP);
       ia_gzcombcoilwa  = _ia_gzcombcoilwa.fixedflag ?       ((void)((int)((endviewz_scalecoil*a_gzcombcoila/target)*MAX_PG_IAMP)), ia_gzcombcoilwa) : (int)((endviewz_scalecoil*a_gzcombcoila/target)*MAX_PG_IAMP);
       ia_gzcombcoilwb  = _ia_gzcombcoilwb.fixedflag ?       ((void)((int)((endviewz_scalecoil*a_gzcombcoilb/target)*MAX_PG_IAMP)), ia_gzcombcoilwb) : (int)((endviewz_scalecoil*a_gzcombcoilb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gzcombcoil  = _ia_gzcombcoil.fixedflag ?     ((void)((int)((a_gzcombcoil/target)*MAX_PG_IAMP)), ia_gzcombcoil) : (int)((a_gzcombcoil/target)*MAX_PG_IAMP);
       ia_gzcombcoilwa  = _ia_gzcombcoilwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gzcombcoilwa) : MAX_PG_WAMP;
       ia_gzcombcoilwb  = _ia_gzcombcoilwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gzcombcoilwb) : MAX_PG_WAMP;
     }

   if ((wg_gzcombcoil==TYPRHO1)||(wg_gzcombcoil==TYPRHO2) ||
       (wg_gzcombcoil==TYPTHETA)||(wg_gzcombcoil==TYPOMEGA))
     {				/* Determine min period */
       per_gzcombcoil  = _per_gzcombcoil.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gzcombcoil) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gzcombcoil  = _per_gzcombcoil.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gzcombcoil) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gzcombcoilf  = _pw_gzcombcoilf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gzcombcoilf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gzcombcoilf  = _pw_gzcombcoilf.fixedflag ?  ((void)(0), pw_gzcombcoilf) : 0;

   if ((wg_gzcombcoil==TYPRHO1)||(wg_gzcombcoil==TYPRHO2) ||
       (wg_gzcombcoil==TYPTHETA)||(wg_gzcombcoil==TYPOMEGA))
     pw_gzcombcoil  = _pw_gzcombcoil.fixedflag ?  ((void)(0), pw_gzcombcoil) : 0;    /* no need for leading edge if rf */

   res_gzcombcoil  = _res_gzcombcoil.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gzcombcoilf+pw_gzcombcoila+pw_gzcombcoil+pw_gzcombcoild)/per_gzcombcoil), res_gzcombcoil) : (pw_gzcombcoilf+pw_gzcombcoila+pw_gzcombcoil+pw_gzcombcoild)/per_gzcombcoil;
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gzprcoil, &coilloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzprcoil, &coilloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gzprcoil.fixedflag ? (_temp2017_a_gzprcoil=a_gzprcoil,&_temp2017_a_gzprcoil) : &a_gzprcoil, _pw_gzprcoila.fixedflag ? (_temp2018_pw_gzprcoila=pw_gzprcoila,&_temp2018_pw_gzprcoila) : &pw_gzprcoila, _pw_gzprcoil.fixedflag ? (_temp2019_pw_gzprcoil=pw_gzprcoil,&_temp2019_pw_gzprcoil) : &pw_gzprcoil,
				 _pw_gzprcoild.fixedflag ? (_temp2020_pw_gzprcoild=pw_gzprcoild,&_temp2020_pw_gzprcoild) : &pw_gzprcoild) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gzprcoil  = _ia_gzprcoil.fixedflag ?       ((void)((int)((endviewz_scalecoil*a_gzprcoil/target)*MAX_PG_IAMP)), ia_gzprcoil) : (int)((endviewz_scalecoil*a_gzprcoil/target)*MAX_PG_IAMP);
       ia_gzprcoilwa  = _ia_gzprcoilwa.fixedflag ?       ((void)((int)((endviewz_scalecoil*a_gzprcoila/target)*MAX_PG_IAMP)), ia_gzprcoilwa) : (int)((endviewz_scalecoil*a_gzprcoila/target)*MAX_PG_IAMP);
       ia_gzprcoilwb  = _ia_gzprcoilwb.fixedflag ?       ((void)((int)((endviewz_scalecoil*a_gzprcoilb/target)*MAX_PG_IAMP)), ia_gzprcoilwb) : (int)((endviewz_scalecoil*a_gzprcoilb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gzprcoil  = _ia_gzprcoil.fixedflag ?     ((void)((int)((a_gzprcoil/target)*MAX_PG_IAMP)), ia_gzprcoil) : (int)((a_gzprcoil/target)*MAX_PG_IAMP);
       ia_gzprcoilwa  = _ia_gzprcoilwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gzprcoilwa) : MAX_PG_WAMP;
       ia_gzprcoilwb  = _ia_gzprcoilwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gzprcoilwb) : MAX_PG_WAMP;
     }

   if ((wg_gzprcoil==TYPRHO1)||(wg_gzprcoil==TYPRHO2) ||
       (wg_gzprcoil==TYPTHETA)||(wg_gzprcoil==TYPOMEGA))
     {				/* Determine min period */
       per_gzprcoil  = _per_gzprcoil.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gzprcoil) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gzprcoil  = _per_gzprcoil.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gzprcoil) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gzprcoilf  = _pw_gzprcoilf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gzprcoilf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gzprcoilf  = _pw_gzprcoilf.fixedflag ?  ((void)(0), pw_gzprcoilf) : 0;

   if ((wg_gzprcoil==TYPRHO1)||(wg_gzprcoil==TYPRHO2) ||
       (wg_gzprcoil==TYPTHETA)||(wg_gzprcoil==TYPOMEGA))
     pw_gzprcoil  = _pw_gzprcoil.fixedflag ?  ((void)(0), pw_gzprcoil) : 0;    /* no need for leading edge if rf */

   res_gzprcoil  = _res_gzprcoil.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gzprcoilf+pw_gzprcoila+pw_gzprcoil+pw_gzprcoild)/per_gzprcoil), res_gzprcoil) : (pw_gzprcoilf+pw_gzprcoila+pw_gzprcoil+pw_gzprcoild)/per_gzprcoil;
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwcoil, &coilloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwcoil, &coilloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwcoil.fixedflag ? (_temp2021_a_gxwcoil=a_gxwcoil,&_temp2021_a_gxwcoil) : &a_gxwcoil, _pw_gxwcoila.fixedflag ? (_temp2022_pw_gxwcoila=pw_gxwcoila,&_temp2022_pw_gxwcoila) : &pw_gxwcoila, _pw_gxwcoil.fixedflag ? (_temp2023_pw_gxwcoil=pw_gxwcoil,&_temp2023_pw_gxwcoil) : &pw_gxwcoil,
                      _pw_gxwcoild.fixedflag ? (_temp2024_pw_gxwcoild=pw_gxwcoild,&_temp2024_pw_gxwcoild) : &pw_gxwcoild) == FAILURE)
            return FAILURE;
    }

    ia_gxwcoil  = _ia_gxwcoil.fixedflag ?     ((void)((int)((a_gxwcoil/target)*MAX_PG_IAMP)), ia_gxwcoil) : (int)((a_gxwcoil/target)*MAX_PG_IAMP);
}



{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gx1coil, &coilloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1coil, &coilloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gx1coil.fixedflag ? (_temp2025_a_gx1coil=a_gx1coil,&_temp2025_a_gx1coil) : &a_gx1coil, _pw_gx1coila.fixedflag ? (_temp2026_pw_gx1coila=pw_gx1coila,&_temp2026_pw_gx1coila) : &pw_gx1coila, _pw_gx1coil.fixedflag ? (_temp2027_pw_gx1coil=pw_gx1coil,&_temp2027_pw_gx1coil) : &pw_gx1coil,
				 _pw_gx1coild.fixedflag ? (_temp2028_pw_gx1coild=pw_gx1coild,&_temp2028_pw_gx1coild) : &pw_gx1coild) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL & TRAP_SLOPED)
     {
       ia_gx1coil  = _ia_gx1coil.fixedflag ?       ((void)((int)((1.0*a_gx1coil/target)*MAX_PG_IAMP)), ia_gx1coil) : (int)((1.0*a_gx1coil/target)*MAX_PG_IAMP);
       ia_gx1coilwa  = _ia_gx1coilwa.fixedflag ?       ((void)((int)((1.0*a_gx1coila/target)*MAX_PG_IAMP)), ia_gx1coilwa) : (int)((1.0*a_gx1coila/target)*MAX_PG_IAMP);
       ia_gx1coilwb  = _ia_gx1coilwb.fixedflag ?       ((void)((int)((1.0*a_gx1coilb/target)*MAX_PG_IAMP)), ia_gx1coilwb) : (int)((1.0*a_gx1coilb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gx1coil  = _ia_gx1coil.fixedflag ?     ((void)((int)((a_gx1coil/target)*MAX_PG_IAMP)), ia_gx1coil) : (int)((a_gx1coil/target)*MAX_PG_IAMP);
       ia_gx1coilwa  = _ia_gx1coilwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gx1coilwa) : MAX_PG_WAMP;
       ia_gx1coilwb  = _ia_gx1coilwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gx1coilwb) : MAX_PG_WAMP;
     }

   if ((wg_gx1coil==TYPRHO1)||(wg_gx1coil==TYPRHO2) ||
       (wg_gx1coil==TYPTHETA)||(wg_gx1coil==TYPOMEGA))
     {				/* Determine min period */
       per_gx1coil  = _per_gx1coil.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gx1coil) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gx1coil  = _per_gx1coil.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gx1coil) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gx1coilf  = _pw_gx1coilf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gx1coilf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gx1coilf  = _pw_gx1coilf.fixedflag ?  ((void)(0), pw_gx1coilf) : 0;

   if ((wg_gx1coil==TYPRHO1)||(wg_gx1coil==TYPRHO2) ||
       (wg_gx1coil==TYPTHETA)||(wg_gx1coil==TYPOMEGA))
     pw_gx1coil  = _pw_gx1coil.fixedflag ?  ((void)(0), pw_gx1coil) : 0;    /* no need for leading edge if rf */

   res_gx1coil  = _res_gx1coil.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gx1coilf+pw_gx1coila+pw_gx1coil+pw_gx1coild)/per_gx1coil), res_gx1coil) : (pw_gx1coilf+pw_gx1coila+pw_gx1coil+pw_gx1coild)/per_gx1coil;
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gy1coil, &coilloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1coil, &coilloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gy1coil.fixedflag ? (_temp2029_a_gy1coil=a_gy1coil,&_temp2029_a_gy1coil) : &a_gy1coil, _pw_gy1coila.fixedflag ? (_temp2030_pw_gy1coila=pw_gy1coila,&_temp2030_pw_gy1coila) : &pw_gy1coila, _pw_gy1coil.fixedflag ? (_temp2031_pw_gy1coil=pw_gy1coil,&_temp2031_pw_gy1coil) : &pw_gy1coil,
				 _pw_gy1coild.fixedflag ? (_temp2032_pw_gy1coild=pw_gy1coild,&_temp2032_pw_gy1coild) : &pw_gy1coild) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gy1coil  = _ia_gy1coil.fixedflag ?       ((void)((int)((endview_scalecoil*a_gy1coil/target)*MAX_PG_IAMP)), ia_gy1coil) : (int)((endview_scalecoil*a_gy1coil/target)*MAX_PG_IAMP);
       ia_gy1coilwa  = _ia_gy1coilwa.fixedflag ?       ((void)((int)((endview_scalecoil*a_gy1coila/target)*MAX_PG_IAMP)), ia_gy1coilwa) : (int)((endview_scalecoil*a_gy1coila/target)*MAX_PG_IAMP);
       ia_gy1coilwb  = _ia_gy1coilwb.fixedflag ?       ((void)((int)((endview_scalecoil*a_gy1coilb/target)*MAX_PG_IAMP)), ia_gy1coilwb) : (int)((endview_scalecoil*a_gy1coilb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gy1coil  = _ia_gy1coil.fixedflag ?     ((void)((int)((a_gy1coil/target)*MAX_PG_IAMP)), ia_gy1coil) : (int)((a_gy1coil/target)*MAX_PG_IAMP);
       ia_gy1coilwa  = _ia_gy1coilwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gy1coilwa) : MAX_PG_WAMP;
       ia_gy1coilwb  = _ia_gy1coilwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gy1coilwb) : MAX_PG_WAMP;
     }

   if ((wg_gy1coil==TYPRHO1)||(wg_gy1coil==TYPRHO2) ||
       (wg_gy1coil==TYPTHETA)||(wg_gy1coil==TYPOMEGA))
     {				/* Determine min period */
       per_gy1coil  = _per_gy1coil.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gy1coil) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gy1coil  = _per_gy1coil.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gy1coil) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gy1coilf  = _pw_gy1coilf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gy1coilf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gy1coilf  = _pw_gy1coilf.fixedflag ?  ((void)(0), pw_gy1coilf) : 0;

   if ((wg_gy1coil==TYPRHO1)||(wg_gy1coil==TYPRHO2) ||
       (wg_gy1coil==TYPTHETA)||(wg_gy1coil==TYPOMEGA))
     pw_gy1coil  = _pw_gy1coil.fixedflag ?  ((void)(0), pw_gy1coil) : 0;    /* no need for leading edge if rf */

   res_gy1coil  = _res_gy1coil.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gy1coilf+pw_gy1coila+pw_gy1coil+pw_gy1coild)/per_gy1coil), res_gy1coil) : (pw_gy1coilf+pw_gy1coila+pw_gy1coil+pw_gy1coild)/per_gy1coil;
}

{
   float target;
   int rtime,ftime;

   gettarget(&target, (WF_PROCESSOR)wg_gy1rcoil, &coilloggrd);
   getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1rcoil, &coilloggrd);
   if (TYPNDEF == TYPDEF) {
     if (amppwgrad((float)(0.0),target,0.0,0.0,rtime,MIN_PLATEAU_TIME,
				 _a_gy1rcoil.fixedflag ? (_temp2033_a_gy1rcoil=a_gy1rcoil,&_temp2033_a_gy1rcoil) : &a_gy1rcoil, _pw_gy1rcoila.fixedflag ? (_temp2034_pw_gy1rcoila=pw_gy1rcoila,&_temp2034_pw_gy1rcoila) : &pw_gy1rcoila, _pw_gy1rcoil.fixedflag ? (_temp2035_pw_gy1rcoil=pw_gy1rcoil,&_temp2035_pw_gy1rcoil) : &pw_gy1rcoil,
				 _pw_gy1rcoild.fixedflag ? (_temp2036_pw_gy1rcoild=pw_gy1rcoild,&_temp2036_pw_gy1rcoild) : &pw_gy1rcoild) == FAILURE) return FAILURE;
   }
   if (TRAP_ALL_SLOPED & TRAP_SLOPED)
     {
       ia_gy1rcoil  = _ia_gy1rcoil.fixedflag ?       ((void)((int)((endview_scalecoil*a_gy1rcoil/target)*MAX_PG_IAMP)), ia_gy1rcoil) : (int)((endview_scalecoil*a_gy1rcoil/target)*MAX_PG_IAMP);
       ia_gy1rcoilwa  = _ia_gy1rcoilwa.fixedflag ?       ((void)((int)((endview_scalecoil*a_gy1rcoila/target)*MAX_PG_IAMP)), ia_gy1rcoilwa) : (int)((endview_scalecoil*a_gy1rcoila/target)*MAX_PG_IAMP);
       ia_gy1rcoilwb  = _ia_gy1rcoilwb.fixedflag ?       ((void)((int)((endview_scalecoil*a_gy1rcoilb/target)*MAX_PG_IAMP)), ia_gy1rcoilwb) : (int)((endview_scalecoil*a_gy1rcoilb/target)*MAX_PG_IAMP);
     }
   else  /* standard trapezoid */
     {
       ia_gy1rcoil  = _ia_gy1rcoil.fixedflag ?     ((void)((int)((a_gy1rcoil/target)*MAX_PG_IAMP)), ia_gy1rcoil) : (int)((a_gy1rcoil/target)*MAX_PG_IAMP);
       ia_gy1rcoilwa  = _ia_gy1rcoilwa.fixedflag ?   ((void)(MAX_PG_WAMP), ia_gy1rcoilwa) : MAX_PG_WAMP;
       ia_gy1rcoilwb  = _ia_gy1rcoilwb.fixedflag ?  ((void)(MAX_PG_WAMP), ia_gy1rcoilwb) : MAX_PG_WAMP;
     }

   if ((wg_gy1rcoil==TYPRHO1)||(wg_gy1rcoil==TYPRHO2) ||
       (wg_gy1rcoil==TYPTHETA)||(wg_gy1rcoil==TYPOMEGA))
     {				/* Determine min period */
       per_gy1rcoil  = _per_gy1rcoil.fixedflag ?  ((void)((RF_UPDATE_TIME)), per_gy1rcoil) : (RF_UPDATE_TIME); 
     }
   else
     {
       per_gy1rcoil  = _per_gy1rcoil.fixedflag ?  ((void)((GRAD_UPDATE_TIME)), per_gy1rcoil) : (GRAD_UPDATE_TIME);
     }

   /* set leading edge pulse width */
   if (0 != 0)
     pw_gy1rcoilf  = _pw_gy1rcoilf.fixedflag ?  ((void)(IMax(2,GRAD_UPDATE_TIME,0)), pw_gy1rcoilf) : IMax(2,GRAD_UPDATE_TIME,0);
   else
     pw_gy1rcoilf  = _pw_gy1rcoilf.fixedflag ?  ((void)(0), pw_gy1rcoilf) : 0;

   if ((wg_gy1rcoil==TYPRHO1)||(wg_gy1rcoil==TYPRHO2) ||
       (wg_gy1rcoil==TYPTHETA)||(wg_gy1rcoil==TYPOMEGA))
     pw_gy1rcoil  = _pw_gy1rcoil.fixedflag ?  ((void)(0), pw_gy1rcoil) : 0;    /* no need for leading edge if rf */

   res_gy1rcoil  = _res_gy1rcoil.fixedflag ? 		/* Find resolution */
           
       ((void)((pw_gy1rcoilf+pw_gy1rcoila+pw_gy1rcoil+pw_gy1rcoild)/per_gy1rcoil), res_gy1rcoil) : (pw_gy1rcoilf+pw_gy1rcoila+pw_gy1rcoil+pw_gy1rcoild)/per_gy1rcoil;
}





{
  float target;

  gettarget(&target, (WF_PROCESSOR)wg_gycylra, &monloggrd);
  if ((wg_gycylra==TYPRHO1)||(wg_gycylra==TYPRHO2)||(wg_gycylra==TYPOMEGA)||(wg_gycylra==TYPTHETA))
      {
        ia_stgycylra  = _ia_stgycylra.fixedflag ?    ((void)((int)(start_gycylra*MAX_PG_WAMP)), ia_stgycylra) : (int)(start_gycylra*MAX_PG_WAMP);
        if ( (start_gycylra>0.0) || (start_gycylra<0.0) )
          {
            ia_endgycylra  = _ia_endgycylra.fixedflag ?    ((void)((int)(end_gycylra*MAX_PG_WAMP)), ia_endgycylra) : (int)(end_gycylra*MAX_PG_WAMP);
          }
        else
          {
            ia_endgycylra  = _ia_endgycylra.fixedflag ?    ((void)((int)(end_gycylra*MAX_PG_IAMP)), ia_endgycylra) : (int)(end_gycylra*MAX_PG_IAMP);
          }
       }
    else
      {
        ia_stgycylra  = _ia_stgycylra.fixedflag ?     ((void)((int)((start_gycylra/target)*MAX_PG_WAMP)), ia_stgycylra) : (int)((start_gycylra/target)*MAX_PG_WAMP);
        if ( (start_gycylra>0.0) || (start_gycylra<0.0) )
          {
            ia_endgycylra  = _ia_endgycylra.fixedflag ?     ((void)((int)((end_gycylra/target)*MAX_PG_WAMP)), ia_endgycylra) : (int)((end_gycylra/target)*MAX_PG_WAMP);
          }
        else
          {
            ia_endgycylra  = _ia_endgycylra.fixedflag ?     ((void)((int)((end_gycylra/target)*MAX_PG_IAMP)), ia_endgycylra) : (int)((end_gycylra/target)*MAX_PG_IAMP);
          }
      }
}

{
  float target;

  gettarget(&target, (WF_PROCESSOR)wg_gzcylra, &monloggrd);
  if ((wg_gzcylra==TYPRHO1)||(wg_gzcylra==TYPRHO2)||(wg_gzcylra==TYPOMEGA)||(wg_gzcylra==TYPTHETA))
      {
        ia_stgzcylra  = _ia_stgzcylra.fixedflag ?    ((void)((int)(start_gzcylra*MAX_PG_WAMP)), ia_stgzcylra) : (int)(start_gzcylra*MAX_PG_WAMP);
        if ( (start_gzcylra>0.0) || (start_gzcylra<0.0) )
          {
            ia_endgzcylra  = _ia_endgzcylra.fixedflag ?    ((void)((int)(end_gzcylra*MAX_PG_WAMP)), ia_endgzcylra) : (int)(end_gzcylra*MAX_PG_WAMP);
          }
        else
          {
            ia_endgzcylra  = _ia_endgzcylra.fixedflag ?    ((void)((int)(end_gzcylra*MAX_PG_IAMP)), ia_endgzcylra) : (int)(end_gzcylra*MAX_PG_IAMP);
          }
       }
    else
      {
        ia_stgzcylra  = _ia_stgzcylra.fixedflag ?     ((void)((int)((start_gzcylra/target)*MAX_PG_WAMP)), ia_stgzcylra) : (int)((start_gzcylra/target)*MAX_PG_WAMP);
        if ( (start_gzcylra>0.0) || (start_gzcylra<0.0) )
          {
            ia_endgzcylra  = _ia_endgzcylra.fixedflag ?     ((void)((int)((end_gzcylra/target)*MAX_PG_WAMP)), ia_endgzcylra) : (int)((end_gzcylra/target)*MAX_PG_WAMP);
          }
        else
          {
            ia_endgzcylra  = _ia_endgzcylra.fixedflag ?     ((void)((int)((end_gzcylra/target)*MAX_PG_IAMP)), ia_endgzcylra) : (int)((end_gzcylra/target)*MAX_PG_IAMP);
          }
      }
}





  if (ampslice(_a_gzrf1mon.fixedflag ? (_temp2037_a_gzrf1mon=a_gzrf1mon,&_temp2037_a_gzrf1mon) : &a_gzrf1mon,(LONG)(4000000*cyc_rf1mon/
					 pw_rf1mon),
	       (float)thk_rf1mon,(float)gscale_rf1mon,
	       (int)TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1mona.fixedflag ? (_temp2038_pw_gzrf1mona=pw_gzrf1mona,&_temp2038_pw_gzrf1mona) : &pw_gzrf1mona,a_gzrf1mon,monloggrd.tz,
      monloggrd.zrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gzrf1mond.fixedflag ? (_temp2039_pw_gzrf1mond=pw_gzrf1mond,&_temp2039_pw_gzrf1mond) : &pw_gzrf1mond,a_gzrf1mon,monloggrd.tz,
	  monloggrd.zft,TYPNDEF)== FAILURE) return FAILURE;

  ia_gzrf1mon  = _ia_gzrf1mon.fixedflag ?    ((void)((int)(a_gzrf1mon*MAX_PG_IAMP/monloggrd.tz)), ia_gzrf1mon) : (int)(a_gzrf1mon*MAX_PG_IAMP/monloggrd.tz);
			      
  ia_rf1mon  = _ia_rf1mon.fixedflag ?    ((void)((int)(a_rf1mon*MAX_PG_IAMP)), ia_rf1mon) : (int)(a_rf1mon*MAX_PG_IAMP);
  if (res_rf1mon == 0)
    res_rf1mon  = _res_rf1mon.fixedflag ?  ((void)(pw_rf1mon/(RF_UPDATE_TIME)), res_rf1mon) : pw_rf1mon/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf1mon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf1mon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf1mon.fixedflag ? (_temp2040_a_gyrf1mon=a_gyrf1mon,&_temp2040_a_gyrf1mon) : &a_gyrf1mon, _pw_gyrf1mona.fixedflag ? (_temp2041_pw_gyrf1mona=pw_gyrf1mona,&_temp2041_pw_gyrf1mona) : &pw_gyrf1mona, _pw_gyrf1mon.fixedflag ? (_temp2042_pw_gyrf1mon=pw_gyrf1mon,&_temp2042_pw_gyrf1mon) : &pw_gyrf1mon,
                      _pw_gyrf1mond.fixedflag ? (_temp2043_pw_gyrf1mond=pw_gyrf1mond,&_temp2043_pw_gyrf1mond) : &pw_gyrf1mond) == FAILURE)
            return FAILURE;
    }

    ia_gyrf1mon  = _ia_gyrf1mon.fixedflag ?     ((void)((int)((a_gyrf1mon/target)*MAX_PG_IAMP)), ia_gyrf1mon) : (int)((a_gyrf1mon/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gz1mon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gz1mon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gz1mon.fixedflag ? (_temp2044_a_gz1mon=a_gz1mon,&_temp2044_a_gz1mon) : &a_gz1mon, _pw_gz1mona.fixedflag ? (_temp2045_pw_gz1mona=pw_gz1mona,&_temp2045_pw_gz1mona) : &pw_gz1mona, _pw_gz1mon.fixedflag ? (_temp2046_pw_gz1mon=pw_gz1mon,&_temp2046_pw_gz1mon) : &pw_gz1mon,
                      _pw_gz1mond.fixedflag ? (_temp2047_pw_gz1mond=pw_gz1mond,&_temp2047_pw_gz1mond) : &pw_gz1mond) == FAILURE)
            return FAILURE;
    }

    ia_gz1mon  = _ia_gz1mon.fixedflag ?     ((void)((int)((a_gz1mon/target)*MAX_PG_IAMP)), ia_gz1mon) : (int)((a_gz1mon/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gy1mon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gy1mon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gy1mon.fixedflag ? (_temp2048_a_gy1mon=a_gy1mon,&_temp2048_a_gy1mon) : &a_gy1mon, _pw_gy1mona.fixedflag ? (_temp2049_pw_gy1mona=pw_gy1mona,&_temp2049_pw_gy1mona) : &pw_gy1mona, _pw_gy1mon.fixedflag ? (_temp2050_pw_gy1mon=pw_gy1mon,&_temp2050_pw_gy1mon) : &pw_gy1mon,
                      _pw_gy1mond.fixedflag ? (_temp2051_pw_gy1mond=pw_gy1mond,&_temp2051_pw_gy1mond) : &pw_gy1mond) == FAILURE)
            return FAILURE;
    }

    ia_gy1mon  = _ia_gy1mon.fixedflag ?     ((void)((int)((a_gy1mon/target)*MAX_PG_IAMP)), ia_gy1mon) : (int)((a_gy1mon/target)*MAX_PG_IAMP);
}

  if (ampslice(_a_gyrf2mon.fixedflag ? (_temp2052_a_gyrf2mon=a_gyrf2mon,&_temp2052_a_gyrf2mon) : &a_gyrf2mon,(LONG)(4000000*cyc_rf2mon/
					 pw_rf2mon),
	       (float)thk_rf2mon,(float)gscale_rf2mon,
	       (int)TYPNDEF)== FAILURE) return FAILURE;
  if (optramp(_pw_gyrf2mona.fixedflag ? (_temp2053_pw_gyrf2mona=pw_gyrf2mona,&_temp2053_pw_gyrf2mona) : &pw_gyrf2mona,a_gyrf2mon,monloggrd.ty,
		  monloggrd.yrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gyrf2mond.fixedflag ? (_temp2054_pw_gyrf2mond=pw_gyrf2mond,&_temp2054_pw_gyrf2mond) : &pw_gyrf2mond,a_gyrf2mon,monloggrd.ty,
	      monloggrd.yft,TYPNDEF) == FAILURE) return FAILURE;

  ia_gyrf2mon  = _ia_gyrf2mon.fixedflag ?    ((void)((int)(a_gyrf2mon*MAX_PG_IAMP/monloggrd.ty)), ia_gyrf2mon) : (int)(a_gyrf2mon*MAX_PG_IAMP/monloggrd.ty);
			      
  ia_rf2mon  = _ia_rf2mon.fixedflag ?    ((void)((int)(a_rf2mon*MAX_PG_IAMP)), ia_rf2mon) : (int)(a_rf2mon*MAX_PG_IAMP);
  if (res_rf2mon == 0)
    res_rf2mon  = _res_rf2mon.fixedflag ?  ((void)(pw_rf2mon/(RF_UPDATE_TIME)), res_rf2mon) : pw_rf2mon/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf2lmon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf2lmon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf2lmon.fixedflag ? (_temp2055_a_gyrf2lmon=a_gyrf2lmon,&_temp2055_a_gyrf2lmon) : &a_gyrf2lmon, _pw_gyrf2lmona.fixedflag ? (_temp2056_pw_gyrf2lmona=pw_gyrf2lmona,&_temp2056_pw_gyrf2lmona) : &pw_gyrf2lmona, _pw_gyrf2lmon.fixedflag ? (_temp2057_pw_gyrf2lmon=pw_gyrf2lmon,&_temp2057_pw_gyrf2lmon) : &pw_gyrf2lmon,
                      _pw_gyrf2lmond.fixedflag ? (_temp2058_pw_gyrf2lmond=pw_gyrf2lmond,&_temp2058_pw_gyrf2lmond) : &pw_gyrf2lmond) == FAILURE)
            return FAILURE;
    }

    ia_gyrf2lmon  = _ia_gyrf2lmon.fixedflag ?     ((void)((int)((a_gyrf2lmon/target)*MAX_PG_IAMP)), ia_gyrf2lmon) : (int)((a_gyrf2lmon/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gyrf2rmon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gyrf2rmon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gyrf2rmon.fixedflag ? (_temp2059_a_gyrf2rmon=a_gyrf2rmon,&_temp2059_a_gyrf2rmon) : &a_gyrf2rmon, _pw_gyrf2rmona.fixedflag ? (_temp2060_pw_gyrf2rmona=pw_gyrf2rmona,&_temp2060_pw_gyrf2rmona) : &pw_gyrf2rmona, _pw_gyrf2rmon.fixedflag ? (_temp2061_pw_gyrf2rmon=pw_gyrf2rmon,&_temp2061_pw_gyrf2rmon) : &pw_gyrf2rmon,
                      _pw_gyrf2rmond.fixedflag ? (_temp2062_pw_gyrf2rmond=pw_gyrf2rmond,&_temp2062_pw_gyrf2rmond) : &pw_gyrf2rmond) == FAILURE)
            return FAILURE;
    }

    ia_gyrf2rmon  = _ia_gyrf2rmon.fixedflag ?     ((void)((int)((a_gyrf2rmon/target)*MAX_PG_IAMP)), ia_gyrf2rmon) : (int)((a_gyrf2rmon/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxwmon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxwmon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxwmon.fixedflag ? (_temp2063_a_gxwmon=a_gxwmon,&_temp2063_a_gxwmon) : &a_gxwmon, _pw_gxwmona.fixedflag ? (_temp2064_pw_gxwmona=pw_gxwmona,&_temp2064_pw_gxwmona) : &pw_gxwmona, _pw_gxwmon.fixedflag ? (_temp2065_pw_gxwmon=pw_gxwmon,&_temp2065_pw_gxwmon) : &pw_gxwmon,
                      _pw_gxwmond.fixedflag ? (_temp2066_pw_gxwmond=pw_gxwmond,&_temp2066_pw_gxwmond) : &pw_gxwmond) == FAILURE)
            return FAILURE;
    }

    ia_gxwmon  = _ia_gxwmon.fixedflag ?     ((void)((int)((a_gxwmon/target)*MAX_PG_IAMP)), ia_gxwmon) : (int)((a_gxwmon/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gx1mon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gx1mon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gx1mon.fixedflag ? (_temp2067_a_gx1mon=a_gx1mon,&_temp2067_a_gx1mon) : &a_gx1mon, _pw_gx1mona.fixedflag ? (_temp2068_pw_gx1mona=pw_gx1mona,&_temp2068_pw_gx1mona) : &pw_gx1mona, _pw_gx1mon.fixedflag ? (_temp2069_pw_gx1mon=pw_gx1mon,&_temp2069_pw_gx1mon) : &pw_gx1mon,
                      _pw_gx1mond.fixedflag ? (_temp2070_pw_gx1mond=pw_gx1mond,&_temp2070_pw_gx1mond) : &pw_gx1mond) == FAILURE)
            return FAILURE;
    }

    ia_gx1mon  = _ia_gx1mon.fixedflag ?     ((void)((int)((a_gx1mon/target)*MAX_PG_IAMP)), ia_gx1mon) : (int)((a_gx1mon/target)*MAX_PG_IAMP);
}

{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gxfcmon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gxfcmon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gxfcmon.fixedflag ? (_temp2071_a_gxfcmon=a_gxfcmon,&_temp2071_a_gxfcmon) : &a_gxfcmon, _pw_gxfcmona.fixedflag ? (_temp2072_pw_gxfcmona=pw_gxfcmona,&_temp2072_pw_gxfcmona) : &pw_gxfcmona, _pw_gxfcmon.fixedflag ? (_temp2073_pw_gxfcmon=pw_gxfcmon,&_temp2073_pw_gxfcmon) : &pw_gxfcmon,
                      _pw_gxfcmond.fixedflag ? (_temp2074_pw_gxfcmond=pw_gxfcmond,&_temp2074_pw_gxfcmond) : &pw_gxfcmond) == FAILURE)
            return FAILURE;
    }

    ia_gxfcmon  = _ia_gxfcmon.fixedflag ?     ((void)((int)((a_gxfcmon/target)*MAX_PG_IAMP)), ia_gxfcmon) : (int)((a_gxfcmon/target)*MAX_PG_IAMP);
}


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkmon, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkmon, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkmon.fixedflag ? (_temp2075_a_gzkmon=a_gzkmon,&_temp2075_a_gzkmon) : &a_gzkmon, _pw_gzkmona.fixedflag ? (_temp2076_pw_gzkmona=pw_gzkmona,&_temp2076_pw_gzkmona) : &pw_gzkmona, _pw_gzkmon.fixedflag ? (_temp2077_pw_gzkmon=pw_gzkmon,&_temp2077_pw_gzkmon) : &pw_gzkmon,
                      _pw_gzkmond.fixedflag ? (_temp2078_pw_gzkmond=pw_gzkmond,&_temp2078_pw_gzkmond) : &pw_gzkmond) == FAILURE)
            return FAILURE;
    }

    ia_gzkmon  = _ia_gzkmon.fixedflag ?     ((void)((int)((a_gzkmon/target)*MAX_PG_IAMP)), ia_gzkmon) : (int)((a_gzkmon/target)*MAX_PG_IAMP);
}



{
  float target;

  gettarget(&target, (WF_PROCESSOR)wg_gycylratipup, &monloggrd);
  if ((wg_gycylratipup==TYPRHO1)||(wg_gycylratipup==TYPRHO2)||(wg_gycylratipup==TYPOMEGA)||(wg_gycylratipup==TYPTHETA))
      {
        ia_stgycylratipup  = _ia_stgycylratipup.fixedflag ?    ((void)((int)(start_gycylratipup*MAX_PG_WAMP)), ia_stgycylratipup) : (int)(start_gycylratipup*MAX_PG_WAMP);
        if ( (start_gycylratipup>0.0) || (start_gycylratipup<0.0) )
          {
            ia_endgycylratipup  = _ia_endgycylratipup.fixedflag ?    ((void)((int)(end_gycylratipup*MAX_PG_WAMP)), ia_endgycylratipup) : (int)(end_gycylratipup*MAX_PG_WAMP);
          }
        else
          {
            ia_endgycylratipup  = _ia_endgycylratipup.fixedflag ?    ((void)((int)(end_gycylratipup*MAX_PG_IAMP)), ia_endgycylratipup) : (int)(end_gycylratipup*MAX_PG_IAMP);
          }
       }
    else
      {
        ia_stgycylratipup  = _ia_stgycylratipup.fixedflag ?     ((void)((int)((start_gycylratipup/target)*MAX_PG_WAMP)), ia_stgycylratipup) : (int)((start_gycylratipup/target)*MAX_PG_WAMP);
        if ( (start_gycylratipup>0.0) || (start_gycylratipup<0.0) )
          {
            ia_endgycylratipup  = _ia_endgycylratipup.fixedflag ?     ((void)((int)((end_gycylratipup/target)*MAX_PG_WAMP)), ia_endgycylratipup) : (int)((end_gycylratipup/target)*MAX_PG_WAMP);
          }
        else
          {
            ia_endgycylratipup  = _ia_endgycylratipup.fixedflag ?     ((void)((int)((end_gycylratipup/target)*MAX_PG_IAMP)), ia_endgycylratipup) : (int)((end_gycylratipup/target)*MAX_PG_IAMP);
          }
      }
}

{
  float target;

  gettarget(&target, (WF_PROCESSOR)wg_gzcylratipup, &monloggrd);
  if ((wg_gzcylratipup==TYPRHO1)||(wg_gzcylratipup==TYPRHO2)||(wg_gzcylratipup==TYPOMEGA)||(wg_gzcylratipup==TYPTHETA))
      {
        ia_stgzcylratipup  = _ia_stgzcylratipup.fixedflag ?    ((void)((int)(start_gzcylratipup*MAX_PG_WAMP)), ia_stgzcylratipup) : (int)(start_gzcylratipup*MAX_PG_WAMP);
        if ( (start_gzcylratipup>0.0) || (start_gzcylratipup<0.0) )
          {
            ia_endgzcylratipup  = _ia_endgzcylratipup.fixedflag ?    ((void)((int)(end_gzcylratipup*MAX_PG_WAMP)), ia_endgzcylratipup) : (int)(end_gzcylratipup*MAX_PG_WAMP);
          }
        else
          {
            ia_endgzcylratipup  = _ia_endgzcylratipup.fixedflag ?    ((void)((int)(end_gzcylratipup*MAX_PG_IAMP)), ia_endgzcylratipup) : (int)(end_gzcylratipup*MAX_PG_IAMP);
          }
       }
    else
      {
        ia_stgzcylratipup  = _ia_stgzcylratipup.fixedflag ?     ((void)((int)((start_gzcylratipup/target)*MAX_PG_WAMP)), ia_stgzcylratipup) : (int)((start_gzcylratipup/target)*MAX_PG_WAMP);
        if ( (start_gzcylratipup>0.0) || (start_gzcylratipup<0.0) )
          {
            ia_endgzcylratipup  = _ia_endgzcylratipup.fixedflag ?     ((void)((int)((end_gzcylratipup/target)*MAX_PG_WAMP)), ia_endgzcylratipup) : (int)((end_gzcylratipup/target)*MAX_PG_WAMP);
          }
        else
          {
            ia_endgzcylratipup  = _ia_endgzcylratipup.fixedflag ?     ((void)((int)((end_gzcylratipup/target)*MAX_PG_IAMP)), ia_endgzcylratipup) : (int)((end_gzcylratipup/target)*MAX_PG_IAMP);
          }
      }
}





  if (ampslice(_a_gyrfmontipup.fixedflag ? (_temp2079_a_gyrfmontipup=a_gyrfmontipup,&_temp2079_a_gyrfmontipup) : &a_gyrfmontipup,(LONG)(4000000*cyc_rfmontipup/
					 pw_rfmontipup),
	       (float)thk_rfmontipup,(float)gscale_rfmontipup,
	       (int)TYPNDEF)== FAILURE) return FAILURE;
  if (optramp(_pw_gyrfmontipupa.fixedflag ? (_temp2080_pw_gyrfmontipupa=pw_gyrfmontipupa,&_temp2080_pw_gyrfmontipupa) : &pw_gyrfmontipupa,a_gyrfmontipup,monloggrd.ty,
		  monloggrd.yrt,TYPNDEF) == FAILURE) return FAILURE;
  if (optramp(_pw_gyrfmontipupd.fixedflag ? (_temp2081_pw_gyrfmontipupd=pw_gyrfmontipupd,&_temp2081_pw_gyrfmontipupd) : &pw_gyrfmontipupd,a_gyrfmontipup,monloggrd.ty,
	      monloggrd.yft,TYPNDEF) == FAILURE) return FAILURE;

  ia_gyrfmontipup  = _ia_gyrfmontipup.fixedflag ?    ((void)((int)(a_gyrfmontipup*MAX_PG_IAMP/monloggrd.ty)), ia_gyrfmontipup) : (int)(a_gyrfmontipup*MAX_PG_IAMP/monloggrd.ty);
			      
  ia_rfmontipup  = _ia_rfmontipup.fixedflag ?    ((void)((int)(a_rfmontipup*MAX_PG_IAMP)), ia_rfmontipup) : (int)(a_rfmontipup*MAX_PG_IAMP);
  if (res_rfmontipup == 0)
    res_rfmontipup  = _res_rfmontipup.fixedflag ?  ((void)(pw_rfmontipup/(RF_UPDATE_TIME)), res_rfmontipup) : pw_rfmontipup/(RF_UPDATE_TIME);


{
    float target;
    int rtime, ftime;

    gettarget(&target, (WF_PROCESSOR)wg_gzkmontipup, &monloggrd);
    if (TYPNDEF == TYPDEF) {
        getramptime(&rtime, &ftime, (WF_PROCESSOR)wg_gzkmontipup, &monloggrd);
        if (amppwgrad((float)(0),target, 0.0, 0.0, rtime,
                      MIN_PLATEAU_TIME,
                      _a_gzkmontipup.fixedflag ? (_temp2082_a_gzkmontipup=a_gzkmontipup,&_temp2082_a_gzkmontipup) : &a_gzkmontipup, _pw_gzkmontipupa.fixedflag ? (_temp2083_pw_gzkmontipupa=pw_gzkmontipupa,&_temp2083_pw_gzkmontipupa) : &pw_gzkmontipupa, _pw_gzkmontipup.fixedflag ? (_temp2084_pw_gzkmontipup=pw_gzkmontipup,&_temp2084_pw_gzkmontipup) : &pw_gzkmontipup,
                      _pw_gzkmontipupd.fixedflag ? (_temp2085_pw_gzkmontipupd=pw_gzkmontipupd,&_temp2085_pw_gzkmontipupd) : &pw_gzkmontipupd) == FAILURE)
            return FAILURE;
    }

    ia_gzkmontipup  = _ia_gzkmontipup.fixedflag ?     ((void)((int)((a_gzkmontipup/target)*MAX_PG_IAMP)), ia_gzkmontipup) : (int)((a_gzkmontipup/target)*MAX_PG_IAMP);
}









