/*
 * GE Medical Systems
 * Copyright (C) 1998 The General Electric Company
 * 
 * Interface file for the pgen_calcbval.c file.
 * 
 * Language : ANSI C
 * Author   : Charles Michelich
 * Date     : 2000/12/08
 */
/* do not edit anything above this line */

/*
 Version      Date      Author      Description
------------------------------------------------------------------------------
 1.0        2000/12/08  CRM         Initial version.
 */

#ifndef pgen_calcbvalue_h
#define pgen_calcbvalue_h

/* Public function declarations */

/* 
 * pgen_calcbvalue
 * 
 * Type: Public Function
 *
 * Description:
 * This function uses gradient and time cornerpoint vectors generated by
 * pulsegen on the host, and timing parameters passed to the function
 * to calculate the bvalue on each axis of a given sequence. 
 *
 * pulsegen on the host is called through getCornerPoints to merge the gradient
 * cornerpoints, cleanup the output of analyzeGradients, and provide a mechanism
 * to output the cornerPoints files.  If performance becomes a concern,
 * analyzeGradients could be called directly without modification to the interface 
 * of this function.
 *
 * Prototype:
 * STATUS pgen_calcbvalue( FLOAT *bvalue,
 *                        const FLOAT rf_excite_location,
 *                        const FLOAT *rf_180_location,
 *                        const INT num_180s,
 *                        const FLOAT te,
 *                        const FLOAT gam,
 *                        const LOG_GRAD *log_grad,
 *                        const seq_entry_index,
 *                        const INT samp_rate,
 *                        const INT pgen_tr,
 *                        const INT e_flag,
 *                        const INT debug_flag
 *                        FLOAT gw_scale[3]);
 *
 * Outputs: 
 *   FLOAT *bvalue,                  => b-value for gradient waveform (sec/mm^2)
 *   STATUS (returned)               => SUCCESS or FAILURE
 * 
 * Inputs:
 *   const FLOAT rf_excite_location, => Location of isocenter of excitation pulse (usec)
 *   const FLOAT *rf_180_location,   => Location of isocenter of 180 pulses (usec) pulses after
 *                                      excitation (NULL pointer for none)
 *   const INT num_180s,             => Number of 180s
 *   const FLOAT te,                 => Echo time - Time from magnetic isocenter of excitation pulse to the collection of the center of kspace (usec)
 *   const FLOAT gam                 => Gyromagnetic ratio (Hz/Gauss)
 *   const LOG_GRAD *log_grad        => gradient structure
 *   const INT seq_entry_index       => Sequence entry point
 *   const INT samp_rate             => Gradient sampling rate
 *   const INT pgen_tr               => TR used for pulsegen on the host
 *   const INT e_flag                => EPIC error flag
 *   const INT debug_flag            => Debuging level flag
 *   const INT bmat_flag             => b matrix flag or on-diagonal elements
 *
 * FROM calcbvalue():
 * Potential strange behavior:(1) Could add a very short linear segment due to round off errors.  
 *                                No divisions by this length, so it should be safe. 
 *                            (2) bvalue is scaled by 10^20 at the end for unit conversion.  
 *                                DOUBLEs used for calculatation to avoid roundoff errors
 *
 * Assumptions: Instantaneous 180s
 *              Piecewise linear gradients
 */
#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
STATUS pgen_calcbvalue(FLOAT *bvalue,
                       const FLOAT rf_excite_location,
                       const FLOAT *rf_180_location,
                       const INT num_180s,
                       const FLOAT te,
                       const FLOAT gam,
                       const LOG_GRAD *log_grad,
                       const INT seq_entry_index,
                       const INT samp_rate,
                       const INT pgen_tr,
                       const INT e_flag,
                       const INT debug_flag,
                       const INT bmat_flag);
#ifdef __cplusplus
}
#endif /* __cplusplus */
/* Public constants */

/* Public typedefs */

#endif /* pgen_calcbvalue_h */
